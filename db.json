{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/HTML/2010/12/09/hello-world-1/index.html","path":"HTML/2010/12/09/hello-world-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","path":"HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","path":"HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","path":"HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/14/red-hat9-command-messy-code/index.html","path":"HTML/2010/12/14/red-hat9-command-messy-code/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/22/linux-shell-problem/index.html","path":"HTML/2010/12/22/linux-shell-problem/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/16/wordpress-link-order/index.html","path":"HTML/2010/12/16/wordpress-link-order/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/14/linux-rename/index.html","path":"HTML/2010/12/14/linux-rename/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/30/linux-fork-test/index.html","path":"HTML/2010/12/30/linux-fork-test/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/31/linux-fork-2/index.html","path":"HTML/2010/12/31/linux-fork-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/30/wordpress-clickchar-plugin/index.html","path":"HTML/2010/12/30/wordpress-clickchar-plugin/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/23/linux-single-user-config/index.html","path":"HTML/2010/12/23/linux-single-user-config/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/23/linux-grub-encrypt/index.html","path":"HTML/2010/12/23/linux-grub-encrypt/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","path":"HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","path":"HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/10/networkflow-1-maximum-matching/index.html","path":"HTML/2011/02/10/networkflow-1-maximum-matching/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","path":"HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","path":"HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","path":"HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","path":"HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/27/networkflow-sap/index.html","path":"HTML/2011/02/27/networkflow-sap/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/07/usaco-4-3-3-street-race/index.html","path":"HTML/2011/03/07/usaco-4-3-3-street-race/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","path":"HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","path":"HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","path":"HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","path":"HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/17/poj-1704-game/index.html","path":"HTML/2011/03/17/poj-1704-game/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/18/another-ux-strong-password/index.html","path":"HTML/2011/03/18/another-ux-strong-password/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","path":"HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/22/c-cow-problem/index.html","path":"HTML/2011/03/22/c-cow-problem/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","path":"HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/15/hdu-1730-game/index.html","path":"HTML/2011/03/15/hdu-1730-game/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/19/networkflow-5-round-table/index.html","path":"HTML/2011/03/19/networkflow-5-round-table/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/24/hdu-3389/index.html","path":"HTML/2011/03/24/hdu-3389/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","path":"HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/29/pointers-on-c-8-array/index.html","path":"HTML/2011/03/29/pointers-on-c-8-array/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/29/segment-tree-my-templete/index.html","path":"HTML/2011/03/29/segment-tree-my-templete/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","path":"HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","path":"HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/c-string-point-two-dimension/index.html","path":"HTML/2011/03/30/c-string-point-two-dimension/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","path":"HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/pointers-on-c-9-string/index.html","path":"HTML/2011/03/30/pointers-on-c-9-string/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","path":"HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/31/poj-2478-eular-function/index.html","path":"HTML/2011/03/31/poj-2478-eular-function/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/04/permalink-change/index.html","path":"HTML/2011/05/04/permalink-change/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","path":"HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/05/computational-geometry-hdu-2857/index.html","path":"HTML/2011/05/05/computational-geometry-hdu-2857/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/02/ball-union-zoj-3350/index.html","path":"HTML/2011/05/02/ball-union-zoj-3350/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","path":"HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/08/gcj-2011-klion26/index.html","path":"HTML/2011/05/08/gcj-2011-klion26/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/12/recent-life/index.html","path":"HTML/2011/05/12/recent-life/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/13/factor-num-hdu-1299/index.html","path":"HTML/2011/05/13/factor-num-hdu-1299/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/16/sg-function-hdu-2873/index.html","path":"HTML/2011/05/16/sg-function-hdu-2873/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/09/fedora13-h3c/index.html","path":"HTML/2011/07/09/fedora13-h3c/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","path":"HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/12/number-theory-poj-3358/index.html","path":"HTML/2011/05/12/number-theory-poj-3358/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/18/number-theory-hdu-2879/index.html","path":"HTML/2011/05/18/number-theory-hdu-2879/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/19/cg-hdu-3834/index.html","path":"HTML/2011/07/19/cg-hdu-3834/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/03/hdu-3074-bit-inver/index.html","path":"HTML/2011/07/03/hdu-3074-bit-inver/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/25/half-plan-cross/index.html","path":"HTML/2011/07/25/half-plan-cross/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","path":"HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","path":"HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/06/pointers-on-c-link-list/index.html","path":"HTML/2011/04/06/pointers-on-c-link-list/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","path":"HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/09/pointers-on-c-advanced-point/index.html","path":"HTML/2011/04/09/pointers-on-c-advanced-point/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/08/why-am-i-cancer/index.html","path":"HTML/2011/04/08/why-am-i-cancer/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","path":"HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/10/usaco-5-3-4big-barn/index.html","path":"HTML/2011/04/10/usaco-5-3-4big-barn/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/18/poj-2480/index.html","path":"HTML/2011/04/18/poj-2480/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/11/drab-queue-poj-2823/index.html","path":"HTML/2011/04/11/drab-queue-poj-2823/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/12/pointers-on-c-preprocessor/index.html","path":"HTML/2011/04/12/pointers-on-c-preprocessor/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/15/eular-function-2/index.html","path":"HTML/2011/04/15/eular-function-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/20/math-education/index.html","path":"HTML/2011/04/20/math-education/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/19/eular-function-hdu-3307/index.html","path":"HTML/2011/04/19/eular-function-hdu-3307/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/08/03/csu-summer-training-team-1/index.html","path":"HTML/2011/08/03/csu-summer-training-team-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/08/20/reverse-poj-3761/index.html","path":"HTML/2011/08/20/reverse-poj-3761/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/23/5th-csu-acm-competition/index.html","path":"HTML/2011/04/23/5th-csu-acm-competition/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/08/29/usaco-5-4-5-5/index.html","path":"HTML/2011/08/29/usaco-5-4-5-5/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","path":"HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/06/22/xp-fedora-double-os/index.html","path":"HTML/2011/06/22/xp-fedora-double-os/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/12/13/windows-mpi/index.html","path":"HTML/2011/12/13/windows-mpi/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/26/replay-email/index.html","path":"HTML/2012/03/26/replay-email/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/12/22/fuck-csdn/index.html","path":"HTML/2011/12/22/fuck-csdn/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/game-theory-prove/index.html","path":"HTML/2012/03/29/game-theory-prove/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/github-create-project/index.html","path":"HTML/2012/03/29/github-create-project/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/user-chrome-cross-gfw/index.html","path":"HTML/2012/03/29/user-chrome-cross-gfw/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","path":"HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","path":"HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/04/19/vmware-ubuntu-fedora/index.html","path":"HTML/2012/04/19/vmware-ubuntu-fedora/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/30/primitive-root-poj-1284/index.html","path":"HTML/2011/04/30/primitive-root-poj-1284/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/08/scheme-and-the-little-scheme/index.html","path":"HTML/2012/10/08/scheme-and-the-little-scheme/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","path":"HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","path":"HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/02/12/2011-2012-plan/index.html","path":"HTML/2012/02/12/2011-2012-plan/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/02/12/xp-office-2010-error-1406/index.html","path":"HTML/2012/02/12/xp-office-2010-error-1406/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","path":"HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/09/21/wordpress-fatal-error/index.html","path":"HTML/2012/09/21/wordpress-fatal-error/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/23/google-adsense/index.html","path":"HTML/2012/10/23/google-adsense/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","path":"HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/02/18/everything-about-2014/index.html","path":"HTML/2015/02/18/everything-about-2014/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","path":"HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/06/chrome-https-connection/index.html","path":"HTML/2012/11/06/chrome-https-connection/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/13/fedora-13-opengl/index.html","path":"HTML/2012/11/13/fedora-13-opengl/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","path":"HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","path":"HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","path":"HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/03/first-linux-module-lvm/index.html","path":"HTML/2012/12/03/first-linux-module-lvm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/03/08/github-blog-math-expression-support/index.html","path":"HTML/2015/03/08/github-blog-math-expression-support/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","path":"HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","path":"HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","path":"HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/28/vi-basic-command/index.html","path":"HTML/2012/12/28/vi-basic-command/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","path":"HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/07/16/a-brief-view-of-storm/index.html","path":"HTML/2015/07/16/a-brief-view-of-storm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/07/17/experiment-of-storm-grouping/index.html","path":"HTML/2015/07/17/experiment-of-storm-grouping/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","path":"HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/05/display-views-count-without-plugin/index.html","path":"HTML/2012/11/05/display-views-count-without-plugin/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/06/21/linux-command-shell-scripts-3/index.html","path":"HTML/2013/06/21/linux-command-shell-scripts-3/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/01/03/algorithm-series/index.html","path":"HTML/2015/01/03/algorithm-series/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/01/17/recursion/index.html","path":"HTML/2015/01/17/recursion/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/03/26/some-easy-math-problems/index.html","path":"HTML/2013/03/26/some-easy-math-problems/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","path":"HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/03/07/matlab-2012-libsvm/index.html","path":"HTML/2013/03/07/matlab-2012-libsvm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","path":"HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","path":"HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/05/25/linux-command-shell-script-2/index.html","path":"HTML/2013/05/25/linux-command-shell-script-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/05/24/linux-command-shell-script/index.html","path":"HTML/2013/05/24/linux-command-shell-script/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/09/11/algorithms-chapter-5/index.html","path":"HTML/2013/09/11/algorithms-chapter-5/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/11/23/nonviolent-communication/index.html","path":"HTML/2013/11/23/nonviolent-communication/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/07/26/redis-pqsort-c/index.html","path":"HTML/2015/07/26/redis-pqsort-c/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","path":"HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","path":"HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","path":"HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/12/22/spiral-matrix/index.html","path":"HTML/2013/12/22/spiral-matrix/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","path":"HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/12/20/level-order-of-a-tree/index.html","path":"HTML/2013/12/20/level-order-of-a-tree/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/01/05/dynamic-programming/index.html","path":"HTML/2015/01/05/dynamic-programming/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/12/25/string-to-integer-atoi/index.html","path":"HTML/2013/12/25/string-to-integer-atoi/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/01/04/reverse-linked-list/index.html","path":"HTML/2014/01/04/reverse-linked-list/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/17/srm-620-randomgraph/index.html","path":"HTML/2014/05/17/srm-620-randomgraph/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/02/linux-daemon/index.html","path":"HTML/2014/05/02/linux-daemon/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/09/linux-dbm/index.html","path":"HTML/2014/05/09/linux-dbm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/07/08/select-and-poll/index.html","path":"HTML/2014/07/08/select-and-poll/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","path":"HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","path":"HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","path":"HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/10/01/2014-code-interview/index.html","path":"HTML/2014/10/01/2014-code-interview/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/11/02/least-recently-used-algorithm/index.html","path":"HTML/2014/11/02/least-recently-used-algorithm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/12/29/show-me-the-code/index.html","path":"HTML/2014/12/29/show-me-the-code/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","path":"HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","path":"HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","path":"HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","path":"HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","path":"HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","path":"HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","path":"HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","path":"HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/04/15/从现在开始写作/index.html","path":"HTML/2017/04/15/从现在开始写作/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/heap.png","path":"HTML/2017/09/17/GC-标记-清除算法/heap.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/index.html","path":"HTML/2017/09/17/GC-标记-清除算法/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","path":"HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","path":"HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/09/django-configuration-in-action/index.html","path":"HTML/2017/11/09/django-configuration-in-action/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/index.html","path":"HTML/2017/07/14/tmux-简单使用指南/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","path":"HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/first_version.png","path":"HTML/2017/11/20/git-inside/first_version.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/file_tree.png","path":"HTML/2017/11/20/git-inside/file_tree.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/index.html","path":"HTML/2017/11/20/git-inside/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/second_version.png","path":"HTML/2017/11/20/git-inside/second_version.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/project.png","path":"HTML/2017/11/20/git-inside/project.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/third_version.png","path":"HTML/2017/11/20/git-inside/third_version.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/27/TaskScheduler/index.html","path":"HTML/2017/11/27/TaskScheduler/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/procesure.jpg","path":"HTML/2017/10/16/spark-dagscheduler/procesure.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/index.html","path":"HTML/2017/10/16/spark-dagscheduler/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/stage.jpg","path":"HTML/2017/10/16/spark-dagscheduler/stage.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/10/Python-代码实践小结/index.html","path":"HTML/2017/05/10/Python-代码实践小结/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","path":"HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/03/tasksetmanager/index.html","path":"HTML/2017/12/03/tasksetmanager/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/01/06/线程堆栈分析/dead_lock.png","path":"HTML/2018/01/06/线程堆栈分析/dead_lock.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/01/06/线程堆栈分析/index.html","path":"HTML/2018/01/06/线程堆栈分析/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/01/06/线程堆栈分析/wait_sleep.png","path":"HTML/2018/01/06/线程堆栈分析/wait_sleep.png","modified":0,"renderable":0},{"_id":"source/HTML/2014/09/26/epoll-and-select/index.html","path":"HTML/2014/09/26/epoll-and-select/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","path":"HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure12_transaction.jpg","path":"HTML/2017/12/22/millwheel/figure12_transaction.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","path":"HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure13_latency.jpg","path":"HTML/2017/12/22/millwheel/figure13_latency.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","path":"HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure16_cache.jpg","path":"HTML/2017/12/22/millwheel/figure16_cache.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/index.html","path":"HTML/2017/12/22/millwheel/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","path":"HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/06/20/nginx-http-filter-module/index.html","path":"HTML/2014/06/20/nginx-http-filter-module/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","path":"HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","path":"HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","path":"HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/20/hello-world/index.html","path":"HTML/2017/05/20/hello-world/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","path":"HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","path":"HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","path":"HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","path":"HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","path":"HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","path":"HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/06/11/asking-the-right-questions/index.html","path":"HTML/2016/06/11/asking-the-right-questions/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","path":"HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","path":"HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/01/20/how-to-read-a-book/index.html","path":"HTML/2016/01/20/how-to-read-a-book/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","path":"HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","path":"HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/04/06/Flink-State/index.html","path":"HTML/2018/04/06/Flink-State/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/04/06/Flink-State/state-hierarchy.png","path":"HTML/2018/04/06/Flink-State/state-hierarchy.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/04/06/Flink-State/state-rescale.png","path":"HTML/2018/04/06/Flink-State/state-rescale.png","modified":0,"renderable":0},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","path":"HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","modified":0,"renderable":0},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","path":"HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","modified":0,"renderable":0},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","path":"HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","path":"HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","modified":0,"renderable":0},{"_id":"source/HTML/index.html","path":"HTML/index.html","modified":0,"renderable":0},{"_id":"themes/freemind/source/css/comment.css","path":"css/comment.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/google-fonts.css","path":"css/google-fonts.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/highlight-default.min.css","path":"css/highlight-default.min.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/responsive.css","path":"css/responsive.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/comment.js","path":"js/comment.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/marked.js","path":"js/marked.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/spin.min.js","path":"js/spin.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/timeago.min.js","path":"js/timeago.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/github-sprite.png","path":"img/github-sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","path":"img/glyphicons-halflings-white.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","path":"img/glyphicons-halflings.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/grid-18px-masked.png","path":"img/grid-18px-masked.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/grid-baseline-20px.png","path":"img/grid-baseline-20px.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/bootstrap.css","path":"css/themes/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/cerulean.css","path":"css/themes/cerulean.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/common.css","path":"css/themes/common.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/cosmo.css","path":"css/themes/cosmo.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/cyborg.css","path":"css/themes/cyborg.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/darkly.css","path":"css/themes/darkly.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/default.css","path":"css/themes/default.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/flatly.css","path":"css/themes/flatly.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/journal.css","path":"css/themes/journal.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/lumen.css","path":"css/themes/lumen.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/paper.css","path":"css/themes/paper.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/readable.css","path":"css/themes/readable.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/sandstone.css","path":"css/themes/sandstone.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/simplex.css","path":"css/themes/simplex.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/slate.css","path":"css/themes/slate.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/spacelab.css","path":"css/themes/spacelab.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/superhero.css","path":"css/themes/superhero.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/united.css","path":"css/themes/united.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/yeti.css","path":"css/themes/yeti.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"themes/freemind/source/css/themes/common.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1684294058224},{"_id":"themes/freemind/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1714964121908},{"_id":"themes/freemind/_config.yml","hash":"25c6730dc22111606f9bcdedde01fcfa4473ac43","modified":1714965110025},{"_id":"themes/freemind/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1714964121917},{"_id":"themes/freemind/README.md","hash":"9b80c245e49f602739c05038fea18186432d0ad9","modified":1714964121909},{"_id":"themes/freemind/layout/page.ejs","hash":"781887eec7ac7b9812c529baccb564a77061d687","modified":1714964121916},{"_id":"themes/freemind/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1684294058217},{"_id":"themes/freemind/LICENSE","hash":"a708d11fd1944ab4b94b39a8c83c75f362a170d7","modified":1714964121908},{"_id":"themes/freemind/layout/categories.ejs","hash":"9864e02b4c08678910d0be3f0f16cfcaa26232dc","modified":1714964121916},{"_id":"themes/freemind/layout/layout.ejs","hash":"6d1b7b626a2b2d994ff6fff4eaad60dd9fd42aeb","modified":1714964121916},{"_id":"themes/freemind/layout/index.ejs","hash":"2beec802d9dadb9369ffc7511304b1cc1feb96b0","modified":1714964121916},{"_id":"themes/freemind/languages/default.yml","hash":"6ea300b240139d3f363c66e105feed4113629c86","modified":1714964121909},{"_id":"themes/freemind/layout/post.ejs","hash":"06a110a121af15c00921b8cb4b99fe736d4e17c7","modified":1714964121916},{"_id":"themes/freemind/layout/tags.ejs","hash":"6f36ab68d9998177a92bb85b438dc7954e659356","modified":1714964121916},{"_id":"themes/freemind/languages/zh-CN.yml","hash":"9a5392c125c20d1b64f7fdc8c22e1d30b4a8fbe4","modified":1714964121909},{"_id":"themes/freemind/languages/pt-BR.yml","hash":"5909ce04246e958746c2d75a0dfd47076f8d0132","modified":1714964121909},{"_id":"themes/freemind/languages/zh-TW.yml","hash":"44f8887b925454e7144c8c1bb9c8ca194cec969c","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/after_footer.ejs","hash":"464732987cb5d1e47e52559b7a278880083b3819","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/archive.ejs","hash":"0fb21f2ee54bd049edfd6426195d88231df6568b","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/article.ejs","hash":"21463a6393a1468778dbb49d0eb61c556bf4e869","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/footer.ejs","hash":"b4b55c57c4172931af355565ba404dc7dd367c21","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/navigation.ejs","hash":"5b690ac12661e296329c1371d3d87ee74a6f4239","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/index.ejs","hash":"e20fe55bfb46e9e7e0191c6639268ef66583084a","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/head.ejs","hash":"e1adfc2be16a7869d2295771fd239c73a37596b3","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/index_pagination.ejs","hash":"fa818b1c87cd3b1df94b17587fe998c54a35976e","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/search.ejs","hash":"a7c526c07a8af040ba285dc63f267004ce211dce","modified":1714964121914},{"_id":"themes/freemind/layout/_partial/sidebar.ejs","hash":"862ff700568ec5a00f222131b353475d0a3f2a9c","modified":1714964121914},{"_id":"themes/freemind/layout/_widget/recent_posts.ejs","hash":"8ef64298ff7d5576cbbc5d353f7cd026ce5dcbd5","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/category.ejs","hash":"8f3b0aa1fa02ebdbacc23bc3bc26f90f96dbad5b","modified":1714964121914},{"_id":"themes/freemind/layout/_widget/links.ejs","hash":"c0452a56e4513efe03867734f5fbcb6715f9a852","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/recent_comments.ejs","hash":"b7f35a28bfafc858921f9065965ebbfb034ba781","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/rss.ejs","hash":"7e24b248e4b9992ef5237ec28767aea50577bae7","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/search.ejs","hash":"620dd8a93a9f0fca63f6f0b520cf192ce7b5a645","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/tagcloud.ejs","hash":"7ee4fefcd60c3b5ca918d4044ec4c60dd702673d","modified":1714964121915},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1684294058245},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1684294058249},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1684294058244},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1714964121940},{"_id":"themes/freemind/source/css/highlight.css","hash":"98a031dd0991929ec23098db9dfde15ae662f031","modified":1714964121918},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1714964121940},{"_id":"themes/freemind/source/css/comment.css","hash":"acbef2bb5327b74fb68036ae238bc03514e4b4d8","modified":1714964121917},{"_id":"themes/freemind/source/css/responsive.css","hash":"25136a75af5957a669d5c4782da8b8fa95f8fc55","modified":1714964121918},{"_id":"themes/freemind/source/img/github-sprite.png","hash":"4d7ee33beaaebf002ba57a172d159e46194ae481","modified":1684294058253},{"_id":"themes/freemind/source/css/style.css","hash":"1c6958e4fa8ab11aca518b9a556fe2fad4976675","modified":1714964121918},{"_id":"themes/freemind/source/img/grid-18px-masked.png","hash":"1379b689836f9fcccd88aa729c4034d6b36e1f3c","modified":1684294058254},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","hash":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1684294058254},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","hash":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1684294058254},{"_id":"themes/freemind/source/img/grid-baseline-20px.png","hash":"43b8d0c9b39f5ce07ecfde036fd13f835c129238","modified":1684294058254},{"_id":"themes/freemind/source/css/google-fonts.css","hash":"91e629d0a0a531e920252788ed8863c26608c2b2","modified":1714964121917},{"_id":"themes/freemind/source/css/highlight-default.min.css","hash":"6ad10fd07f492660d5c8c8eaec6e74a94d277b4a","modified":1684294058220},{"_id":"themes/freemind/source/js/bootstrap.min.js","hash":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1714964121954},{"_id":"themes/freemind/source/js/comment.js","hash":"5cdafe054baa2ef66670ed46e6f862718e77bfcb","modified":1714964121956},{"_id":"themes/freemind/source/js/gallery.js","hash":"d19f1b1cc5b75e21ca1d643b6dae9490ead28b55","modified":1714964121957},{"_id":"themes/freemind/source/css/font-awesome.css","hash":"6df51eee1e75e450cb9cd71e925e6aa9ac2d6a9d","modified":1714964121917},{"_id":"themes/freemind/source/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1714964121957},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1684294058257},{"_id":"themes/freemind/source/js/main.js","hash":"d78290344d95646172e488e0af2dade9740288f8","modified":1714964121958},{"_id":"themes/freemind/source/js/marked.js","hash":"b1d4ef560ea01a5fe3a391a5933be5e7016f1d6a","modified":1714964121958},{"_id":"themes/freemind/layout/_partial/post/analytics.ejs","hash":"31a0a3e5bc616b847c1ed82293fb3a3fc97054be","modified":1714964121912},{"_id":"themes/freemind/source/js/search.js","hash":"6197e425941f107761d3cbfb0f06ad4a3f5f7427","modified":1714964121959},{"_id":"themes/freemind/layout/_partial/post/bdshare.ejs","hash":"24c91ac17714ea39120a18633c3611b15464e5ab","modified":1684294058213},{"_id":"themes/freemind/layout/_partial/post/category.ejs","hash":"6ea00603f6a93b68aa2ca1cab9f459902ec95e1a","modified":1714964121912},{"_id":"themes/freemind/layout/_partial/post/comment.ejs","hash":"884ea68df119de6d731665b981ccc0a5a746449c","modified":1714964121912},{"_id":"themes/freemind/layout/_partial/post/jiathis.ejs","hash":"6fbf47f67e6f18fe4fea7fff6b564d29512469b5","modified":1684294058214},{"_id":"themes/freemind/layout/_partial/post/comment_footer.ejs","hash":"fefc355eb4d61d08ffca7f6439fecb146696265e","modified":1714964121912},{"_id":"themes/freemind/source/js/spin.min.js","hash":"f91e2b661f4feb976b5e260bdc2366763ad13562","modified":1714964121959},{"_id":"themes/freemind/source/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1684294058258},{"_id":"themes/freemind/layout/_partial/post/pagination.ejs","hash":"68ea473404ec0606f7855c06eb1cd4fb3dafe550","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/meta.ejs","hash":"70b3b1dc3b039db3ef6f5e88709d0d4d5a8034a5","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/entry.ejs","hash":"4d152fc69ba6042b652aa70584564e20ef070e9b","modified":1714964121912},{"_id":"themes/freemind/layout/_partial/post/recommended_posts.ejs","hash":"68c27c333534a23d1037a2bfd136bef1468389cb","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/tag.ejs","hash":"db79c3d2b77c64c354f48f2eb6b648108e986857","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/slogan.ejs","hash":"99b66f7b36f1bf1707c5ce5156c79359799539eb","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/title_top.ejs","hash":"b8558cf461df2211a072180bdf8b709eb7d135c4","modified":1714964121914},{"_id":"themes/freemind/layout/_partial/post/title.ejs","hash":"a22fb024c8aaefdc04eee8587a184309e17e9232","modified":1714964121914},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1684294058250},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1684294058251},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1684294058250},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1684294058252},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1684294058252},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1684294058253},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1684294058252},{"_id":"themes/freemind/source/css/themes/default.css","hash":"32f758d295c7037f247d300f2481b5d7d4f3b100","modified":1714964121923},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1684294058251},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1684294058245},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1684294058249},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1714964121957},{"_id":"themes/freemind/source/css/themes/bootstrap.css","hash":"11197c2fc2925b34cc98a3f4ec67ffdd9f36a760","modified":1714964121919},{"_id":"themes/freemind/source/css/themes/cosmo.css","hash":"bcb36ab2b547571fa4125e05e1074abba6bd5670","modified":1714964121921},{"_id":"themes/freemind/source/css/themes/cyborg.css","hash":"4320dbfd9543f6ef1cc703d83d85c6652f9272d0","modified":1714964121922},{"_id":"themes/freemind/source/css/themes/cerulean.css","hash":"7fee0903cce12483ae3f37d330ef693826a5a61f","modified":1714964121921},{"_id":"themes/freemind/source/css/themes/journal.css","hash":"b77cda6baedc3852c64f5664206356b3057b4781","modified":1714964121925},{"_id":"themes/freemind/source/css/themes/paper.css","hash":"1ae57ddb500a85b8ca8e7d2897e55cb2ba4cf1bc","modified":1714964121926},{"_id":"themes/freemind/source/css/themes/flatly.css","hash":"a95865761e69d0daf75660e24d9f5f316482ea55","modified":1714964121924},{"_id":"themes/freemind/source/css/themes/readable.css","hash":"af59c50f83bba69a4fef7d0ac32e309c903b4511","modified":1714964121928},{"_id":"themes/freemind/source/css/themes/sandstone.css","hash":"5878440ffa7e1656214bafd8b7f39d736219807a","modified":1714964121929},{"_id":"themes/freemind/source/css/themes/simplex.css","hash":"b8165c48cf72e54c1f8ae1a550a04a64e6ce1929","modified":1714964121931},{"_id":"themes/freemind/source/css/themes/slate.css","hash":"3859265e9fcdb579f40a2ef7a5bd8dbead2d13ca","modified":1714964121934},{"_id":"themes/freemind/source/css/themes/spacelab.css","hash":"fa4efbf50ca392c25e9b6395d6221696ec6573b6","modified":1714964121935},{"_id":"themes/freemind/source/css/themes/superhero.css","hash":"cc4ce979e1def77b7c9b250d97d0baf3e0a3f845","modified":1714964121935},{"_id":"themes/freemind/source/css/themes/united.css","hash":"857151fa534842d0f8e862b2067f22905a1b3382","modified":1714964121936},{"_id":"themes/freemind/source/css/themes/lumen.css","hash":"5c23c4a98aec86b8483040e0ca602d3a4574f32c","modified":1714964121925},{"_id":"themes/freemind/source/css/themes/darkly.css","hash":"581ff4339a616fe26b4dc1b6c1d1ad7946b83de6","modified":1714964121923},{"_id":"themes/freemind/source/css/themes/yeti.css","hash":"7cb64c45bed521321e0a4a57e05e3d1c87721f16","modified":1714964121937},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1684294058248},{"_id":"source/_posts/lsm-tree-1-2023-05-17.md","hash":"ecdafb4abc12597fba98eaa56f7b5fdcb6d92f0b","modified":1714963932101},{"_id":"source/.DS_Store","hash":"c68f028e70104f7ba0c1b4a2cd26a8adb79c50e7","modified":1743682277886},{"_id":"source/_drafts/lsm-tree-2-20230517.md","hash":"c0d0ca02a8471176e528b0e0ee8ed96fa6845de4","modified":1714963891126},{"_id":"source/HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","hash":"d00f26d86a9ed0f18217896e5ed67a877836d8ab","modified":1643724682008},{"_id":"source/_posts/big-data-paper-big-picture.md","hash":"ccbcf56371d1e5d3db66a4e80620bb5983f32569","modified":1714963932101},{"_id":"source/HTML/2010/12/09/hello-world-1/index.html","hash":"b7f672733e1544662e607889962dc7e2ff1dece4","modified":1643724682006},{"_id":"source/HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","hash":"0ebfa804c365dc70ea2e37a323fbc48e2963857d","modified":1643724682008},{"_id":"source/HTML/2010/12/14/red-hat9-command-messy-code/index.html","hash":"b8511a068efe0a825516424a6a807f518834fa50","modified":1643724682008},{"_id":"source/HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","hash":"a0b458ff43182267b6a0bb6d85d03ffa142b8f78","modified":1643724682007},{"_id":"source/HTML/2010/12/22/linux-shell-problem/index.html","hash":"4e01c5a3d4746a7e9f8cdeeb4d8a70009c62aeec","modified":1643724682009},{"_id":"source/HTML/2010/12/16/wordpress-link-order/index.html","hash":"4112ccf19e134969ef45dd6f982933f36bb8f093","modified":1643724682009},{"_id":"source/HTML/2010/12/14/linux-rename/index.html","hash":"9d612e51ee296c6ce0e9baaa750f72c49f99470d","modified":1643724682007},{"_id":"source/HTML/2010/12/30/linux-fork-test/index.html","hash":"d70a5871ad8b47faf6a41be054559ed2099699d8","modified":1643724682010},{"_id":"source/HTML/2010/12/23/linux-single-user-config/index.html","hash":"41a1c7ca16e86feba1e6bdc0cfc64e5a47668a44","modified":1643724682010},{"_id":"source/HTML/2010/12/31/linux-fork-2/index.html","hash":"9ddcf3b5ef334232628a464c054176ca39a325c5","modified":1643724682011},{"_id":"source/HTML/2010/12/30/wordpress-clickchar-plugin/index.html","hash":"f29d93933c20f5cbecbc332ed620e24481940de3","modified":1643724682011},{"_id":"source/HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","hash":"8792c869577319964af72d1e12680887faf5d65f","modified":1643724682012},{"_id":"source/HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","hash":"c7671d8d7bb5d368a426bd4dbb9d77bff2659754","modified":1643724682012},{"_id":"source/HTML/2011/02/10/networkflow-1-maximum-matching/index.html","hash":"bcdb2deb83feb707c0125e6c7430e5fab733cf25","modified":1643724682012},{"_id":"source/HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","hash":"103e1306fe629a15de363c25db4194d1c8aa0e61","modified":1643724682013},{"_id":"source/HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","hash":"9cbf3bd17f36d430e18187c241aae6377ad0da39","modified":1643724682014},{"_id":"source/HTML/2010/12/23/linux-grub-encrypt/index.html","hash":"4f414c75abba66766dfb58c1ba0f655d25dfc668","modified":1643724682010},{"_id":"source/HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","hash":"a6870b51f201fc9cc1f460a5f36bd87c3b96c13c","modified":1643724682014},{"_id":"source/HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","hash":"0bfc284b03ed350bb4227fe04396a5bd44a3cb1c","modified":1643724682015},{"_id":"source/HTML/2011/03/07/usaco-4-3-3-street-race/index.html","hash":"bf00799ad8ac89113d39464e8bf08dd6299f920e","modified":1643724682016},{"_id":"source/HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","hash":"42f2bcc74e794aa3757c92ca9c29ab8b9da8f5a9","modified":1643724682015},{"_id":"source/HTML/2011/02/27/networkflow-sap/index.html","hash":"72f316e2e41aaaa4fe89bb4dd98d4317d8cfae6d","modified":1643724682015},{"_id":"source/HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","hash":"367c0d2ebaaa6e7a348b3862e34358eba6490f68","modified":1643724682013},{"_id":"source/HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","hash":"036e41c9402c101a928cb8b8ca958dd1bf82c8c9","modified":1643724682018},{"_id":"source/HTML/2011/03/17/poj-1704-game/index.html","hash":"fddc4e2410614c3a7078395254ace1797cf5fc3a","modified":1643724682017},{"_id":"source/HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","hash":"c9c0874db9d75d18fea253724226f928cee1b29f","modified":1643724682016},{"_id":"source/HTML/2011/03/18/another-ux-strong-password/index.html","hash":"ce2d0804d9df70cce8a61d12d1306a8428dc10b4","modified":1643724682018},{"_id":"source/HTML/2011/03/22/c-cow-problem/index.html","hash":"9b6583d3037c8507c697d948de624b4ff1a2411f","modified":1643724682019},{"_id":"source/HTML/2011/03/15/hdu-1730-game/index.html","hash":"86d41ced94481000ffc8df4a012af2efe4e6f81a","modified":1643724682017},{"_id":"source/HTML/2011/03/19/networkflow-5-round-table/index.html","hash":"ea36968262bacdeb21939f52b2d38277f804753f","modified":1643724682019},{"_id":"source/HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","hash":"e3452f98ef670c2ed7444846a103a4c301eb60df","modified":1643724682020},{"_id":"source/HTML/2011/03/24/hdu-3389/index.html","hash":"1337e0432e89c41b226dde340a01e0ca699ba4e8","modified":1643724682020},{"_id":"source/HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","hash":"36c1fdb176ea126f01d21a9e1c53b375136e2869","modified":1643724682021},{"_id":"source/HTML/2011/03/29/pointers-on-c-8-array/index.html","hash":"d349f5f698b296af66067118a0705d4544f0548b","modified":1643724682022},{"_id":"source/HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","hash":"6ca3126283b597c9d5148ad698015cc407df8996","modified":1643724682017},{"_id":"source/HTML/2011/03/29/segment-tree-my-templete/index.html","hash":"355b3a7fa94eec5e5f478280f43fa8b6e3bc91e3","modified":1643724682022},{"_id":"source/HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","hash":"2949947bc26404766155bbaeacc5ef4dbe237632","modified":1643724682018},{"_id":"source/HTML/2011/03/30/pointers-on-c-9-string/index.html","hash":"424b0332899bd8e3c356f7cf5964b0fd6cdc1211","modified":1643724682024},{"_id":"source/HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","hash":"82579e26e984e553bb0f2adb471823c6bfebb75f","modified":1643724682021},{"_id":"source/HTML/2011/03/31/poj-2478-eular-function/index.html","hash":"fa99d98b10fd1e5db61489036eed11294b79b29d","modified":1643724682025},{"_id":"source/HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","hash":"524c4c732ec73544fd340fae7ee53a9b6d77b239","modified":1643724682023},{"_id":"source/HTML/2011/03/30/c-string-point-two-dimension/index.html","hash":"58708fcb8ffba3acaa38b9c882cbf959bb7b598d","modified":1643724682023},{"_id":"source/HTML/2011/05/02/ball-union-zoj-3350/index.html","hash":"8cbb82a3be70cc60a24e129b740a2012560b6d08","modified":1643724682034},{"_id":"source/HTML/2011/05/04/permalink-change/index.html","hash":"69b1c5b855b539e77084fc25a41dd73873f4ed2a","modified":1643724682034},{"_id":"source/HTML/2011/05/12/recent-life/index.html","hash":"883c2a340ed6bb52561b4e83725370b3958c9bfa","modified":1643724682035},{"_id":"source/HTML/2011/05/08/gcj-2011-klion26/index.html","hash":"ad887c11e2a3ed3d61d47ef1b98604658ddede50","modified":1643724682035},{"_id":"source/HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","hash":"5ab2c014286103dd584f13a3f550faa9799b5cb6","modified":1643724682024},{"_id":"source/HTML/2011/05/05/computational-geometry-hdu-2857/index.html","hash":"d1d7cbee12bc15dca86d0aa89774670aeb4a46e7","modified":1643724682034},{"_id":"source/HTML/2011/05/13/factor-num-hdu-1299/index.html","hash":"b9113a538cee1221fe008d3096fdf96ff31cbbad","modified":1643724682036},{"_id":"source/HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","hash":"18d3f7f49503c036f21edf5dd3c0fa81ff327f9e","modified":1643724682037},{"_id":"source/HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","hash":"addd4a410964b3e69498495ed082ade0a430c8f6","modified":1643724682020},{"_id":"source/HTML/2011/07/09/fedora13-h3c/index.html","hash":"59a8264b0c5cedc1e9bf67fb63015dc489dbb82d","modified":1643724682038},{"_id":"source/HTML/2011/05/16/sg-function-hdu-2873/index.html","hash":"cb57dc1f27fad14dd8acb0c0b80e7bd5731f55e5","modified":1643724682036},{"_id":"source/HTML/2011/07/19/cg-hdu-3834/index.html","hash":"39d047e463509a230b67c0edd776580fc5db4824","modified":1643724682039},{"_id":"source/HTML/2011/05/18/number-theory-hdu-2879/index.html","hash":"ef7ec4bd95b42f7ee4ec9e7bde96e1710c972d1a","modified":1643724682036},{"_id":"source/HTML/2011/07/25/half-plan-cross/index.html","hash":"fe71d156e99bc3c25b2cadf11c1cf658cd63f0bd","modified":1643724682039},{"_id":"source/HTML/2011/05/12/number-theory-poj-3358/index.html","hash":"7fb44db3ffb65ed728614dd429adc6c141c3c0bd","modified":1643724682035},{"_id":"source/HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","hash":"3908576594d237c6c804c1b8752446488abd9129","modified":1643724682025},{"_id":"source/HTML/2011/07/03/hdu-3074-bit-inver/index.html","hash":"f9f58fc223530af8f2b69f75c8f65ecfb5d8f17d","modified":1643724682038},{"_id":"source/HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","hash":"9fd5ba0ed21ee57515033fba964f0990d9dc4d62","modified":1643724682037},{"_id":"source/HTML/2011/04/06/pointers-on-c-link-list/index.html","hash":"8d9bff69889c75f147862cc0a01d8cd43005803d","modified":1643724682025},{"_id":"source/HTML/2011/04/09/pointers-on-c-advanced-point/index.html","hash":"2f4367843a73a7bd90426a48ef7a09094397db9e","modified":1643724682028},{"_id":"source/HTML/2011/04/08/why-am-i-cancer/index.html","hash":"ce0296801768a68ba57cfb69a860e2298d61ae2b","modified":1643724682027},{"_id":"source/HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","hash":"ce65978cdce22f4dffa5d2c29660edec522a1376","modified":1643724682026},{"_id":"source/HTML/2011/04/10/usaco-5-3-4big-barn/index.html","hash":"8860de52be4ed4ea9b0765ab2d3bbdac5fa5362e","modified":1643724682028},{"_id":"source/HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","hash":"e6095a0851aa63f8819f3b3154ebe1229c2bf651","modified":1643724682028},{"_id":"source/HTML/2011/04/18/poj-2480/index.html","hash":"4143146c12ad472ca5c32d1c178061f1e556d715","modified":1643724682031},{"_id":"source/HTML/2011/04/12/pointers-on-c-preprocessor/index.html","hash":"1e915680cefc0d37eb7fc9057f73f80640f3c361","modified":1643724682029},{"_id":"source/HTML/2011/04/15/eular-function-2/index.html","hash":"1c77fb3ed96cc13efd55da70f9fa5898fb274c88","modified":1643724682030},{"_id":"source/HTML/2011/04/20/math-education/index.html","hash":"c9ee2a68ccf1e2e110b841dcaac6df9a079fcf10","modified":1643724682032},{"_id":"source/HTML/2011/04/11/drab-queue-poj-2823/index.html","hash":"7f2834f5709489d837e70785b3dc8d81909a125c","modified":1643724682029},{"_id":"source/HTML/2011/04/19/eular-function-hdu-3307/index.html","hash":"85eadd67b4e3e79aa3dd45a864a293ab1fffccb4","modified":1643724682031},{"_id":"source/HTML/2011/04/23/5th-csu-acm-competition/index.html","hash":"c5f5f1dfafb7a0b2c88532cdc766e4a05924723e","modified":1643724682032},{"_id":"source/HTML/2011/08/03/csu-summer-training-team-1/index.html","hash":"a9146de61bc23003df5ed8803d90f9c5a913c8e0","modified":1643724682040},{"_id":"source/HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","hash":"741a65ff9e2f723f6f73f15297eae911addf20e9","modified":1643724682041},{"_id":"source/HTML/2011/12/13/windows-mpi/index.html","hash":"1e17e6ae682e6bda42f3d29175152a13262ee133","modified":1643724682041},{"_id":"source/HTML/2012/03/26/replay-email/index.html","hash":"b62467076fd17850deceaf7ecbcc45b589c17f7f","modified":1643724682044},{"_id":"source/HTML/2011/08/20/reverse-poj-3761/index.html","hash":"eaa188dc8535815d7ce9bffa1a1d0f6ab832a747","modified":1643724682040},{"_id":"source/HTML/2011/12/22/fuck-csdn/index.html","hash":"85bf2255512e61dce31cc6b814a16bb1a06b9e50","modified":1643724682042},{"_id":"source/HTML/2012/03/29/game-theory-prove/index.html","hash":"359138454377c3be0c1b56514c52ca5b3c92fda5","modified":1643724682044},{"_id":"source/HTML/2011/06/22/xp-fedora-double-os/index.html","hash":"6201f0b3b333237c1bae23a2ddac8772eeec2fb6","modified":1643724682037},{"_id":"source/HTML/2012/03/29/github-create-project/index.html","hash":"0dfe30c40e5eb7844774431c3a2f23198c3aa98e","modified":1643724682045},{"_id":"source/HTML/2012/03/29/user-chrome-cross-gfw/index.html","hash":"4513b37b2fa4274bf23f3d26d416ff6e3789059e","modified":1643724682045},{"_id":"source/HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","hash":"9b9fb81db0fda767d55b5e78a4f2fa6e757edd76","modified":1643724682044},{"_id":"source/HTML/2012/04/19/vmware-ubuntu-fedora/index.html","hash":"8311e538ee43fc48dc8336f1e8aeea5c6331718b","modified":1643724682046},{"_id":"source/HTML/2011/08/29/usaco-5-4-5-5/index.html","hash":"769be6d46db0548217c05c07e4860129033f79aa","modified":1643724682041},{"_id":"source/HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","hash":"e157551e80201ba43816db752149292b8652428f","modified":1643724682045},{"_id":"source/HTML/2011/04/30/primitive-root-poj-1284/index.html","hash":"3677d61cb738099c66dfb5b5b236b8121b0e7166","modified":1643724682033},{"_id":"source/HTML/2012/10/08/scheme-and-the-little-scheme/index.html","hash":"56664152df6cf144b1975769db42c2b981d15bfc","modified":1643724682047},{"_id":"source/HTML/2012/02/12/xp-office-2010-error-1406/index.html","hash":"309a061c7eb2f3112632e8bf7490d189503990b7","modified":1643724682043},{"_id":"source/HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","hash":"85984e0025114e68467f589991a06c8ffaa4d51b","modified":1643724682048},{"_id":"source/HTML/2012/02/12/2011-2012-plan/index.html","hash":"71634c372770d753da885f58a7bf60878ab33cd1","modified":1643724682042},{"_id":"source/HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","hash":"debdbac50dc17fd3c5b614f03bb21a00ecca4546","modified":1643724682048},{"_id":"source/HTML/2012/09/21/wordpress-fatal-error/index.html","hash":"2a442a68173b4fce7e336794c2ff3838c549681c","modified":1643724682046},{"_id":"source/HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","hash":"76ad45bbf89459b45a081ab691182a4f0a39e2fd","modified":1643724682049},{"_id":"source/HTML/2012/10/23/google-adsense/index.html","hash":"7f28cdd569711be433560f1e31463818286911d4","modified":1643724682048},{"_id":"source/HTML/2015/02/18/everything-about-2014/index.html","hash":"2f493ee0acf299b62fb842834a40b0b20ab74501","modified":1643724682071},{"_id":"source/HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","hash":"ff019f186e2020408b4af8aac5da3ce078a2b3ed","modified":1643724682046},{"_id":"source/HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","hash":"4ebd787ed4427933d25ba086df66812dc3ca969e","modified":1643724682047},{"_id":"source/HTML/2012/11/06/chrome-https-connection/index.html","hash":"8817e0e1990c6271d34c574b496746e1fdaf9e96","modified":1643724682049},{"_id":"source/HTML/2012/11/13/fedora-13-opengl/index.html","hash":"223fe001ae8c8eaad09243692c58f39797a1d3a1","modified":1643724682050},{"_id":"source/HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","hash":"e6dcd1b34818b59331bd5421e68807b8375e7cbc","modified":1643724682051},{"_id":"source/HTML/2012/12/03/first-linux-module-lvm/index.html","hash":"50363b09aab678ec614add1999e312fc028eccab","modified":1643724682052},{"_id":"source/HTML/2015/03/08/github-blog-math-expression-support/index.html","hash":"b3707a34d281f86d99634603ad6c86682022f539","modified":1643724682071},{"_id":"source/HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","hash":"c779ecf5bb840156602d4e4a9b75f854270e798a","modified":1643724682053},{"_id":"source/HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","hash":"d1514c712d734a68cc4a21a7b262b54338d6c68f","modified":1643724682052},{"_id":"source/HTML/2012/12/28/vi-basic-command/index.html","hash":"c1fd2538f7ed5779741cca84cb53c47747de1080","modified":1643724682054},{"_id":"source/HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","hash":"d76f0134014c6008e0bf5627769a3808f9c196d9","modified":1643724682054},{"_id":"source/HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","hash":"eae4508b0e08848cc07061a2edf65136c047f367","modified":1643724682050},{"_id":"source/HTML/2012/11/05/display-views-count-without-plugin/index.html","hash":"170455239edd0b92cb00f015c71c534caa6f239f","modified":1643724682049},{"_id":"source/HTML/2015/07/16/a-brief-view-of-storm/index.html","hash":"18ad2ee494e1e375be7cf151bcf560e25b380597","modified":1643724682072},{"_id":"source/HTML/2015/07/17/experiment-of-storm-grouping/index.html","hash":"ceba78b47c4b939eaa92f10b2a60d863dff64927","modified":1643724682072},{"_id":"source/HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","hash":"959eb55f92a0557fadc1cf98d8077aa616a16943","modified":1643724682053},{"_id":"source/HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","hash":"b0fc82a4eb3e6dabce657dd181d82f9b4579c767","modified":1643724682050},{"_id":"source/HTML/2013/06/21/linux-command-shell-scripts-3/index.html","hash":"cc02b67fe6b334d3cdb5a591f2c6a3ff6ddc1c2d","modified":1643724682057},{"_id":"source/HTML/2015/01/03/algorithm-series/index.html","hash":"ed92e0310f87d3c364dcd78c774400e6903920d5","modified":1643724682070},{"_id":"source/HTML/2013/03/26/some-easy-math-problems/index.html","hash":"bd52608dc88b955289ab0b83fcbb70f6a28ba3a9","modified":1643724682056},{"_id":"source/HTML/2015/01/17/recursion/index.html","hash":"dc0b244273f32538a38fcfab2c5b21a3f17bcad1","modified":1643724682071},{"_id":"source/HTML/2013/03/07/matlab-2012-libsvm/index.html","hash":"1ecbc0ff571a3ff77a0a2f173803cd0058537506","modified":1643724682055},{"_id":"source/HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","hash":"9dd9d42dddcd5cc12c3eabf6c3221957269072f8","modified":1643724682054},{"_id":"source/HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","hash":"88b9e5845a51380275b92d7f946b3d6c648d0317","modified":1643724682055},{"_id":"source/HTML/2013/05/24/linux-command-shell-script/index.html","hash":"e4f74909181a7993d7a169db1bbf5bc91f13a7dc","modified":1643724682056},{"_id":"source/HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","hash":"9b581bf973ffb69fb6ef3876abf189df2f270d24","modified":1643724682055},{"_id":"source/HTML/2013/05/25/linux-command-shell-script-2/index.html","hash":"660de3bdba29ae879081204cbeb700fe6c0dd592","modified":1643724682057},{"_id":"source/HTML/2013/09/11/algorithms-chapter-5/index.html","hash":"c564bc5386b16a1d705a34a56050844c3a994a78","modified":1643724682059},{"_id":"source/HTML/2015/07/26/redis-pqsort-c/index.html","hash":"bba306f57d736b57d049aafa8ed46c2065888575","modified":1643724682073},{"_id":"source/HTML/2013/11/23/nonviolent-communication/index.html","hash":"d406c0c3172245f6a82cf5deee6ce166eae38dca","modified":1643724682060},{"_id":"source/HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","hash":"82d36c8517042ef23e2d8332c1597e64d5fcb7a3","modified":1643724682051},{"_id":"source/HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","hash":"9257cd557d24b0bcf7e9507aade7661b45550c14","modified":1643724682058},{"_id":"source/HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","hash":"6ead7918a944d417397e5868072fdf1fab346114","modified":1643724682060},{"_id":"source/HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","hash":"c2bcf4368c7f66803db18f0bdca992b62589ce13","modified":1643724682059},{"_id":"source/HTML/2013/12/22/spiral-matrix/index.html","hash":"8e60f7d0cd3aa07bce75d7ccc2429f48f297c40f","modified":1643724682061},{"_id":"source/HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","hash":"653cc7e6134f408d2bf6ef5b4baef2ff6a9a5213","modified":1643724682058},{"_id":"source/HTML/2015/01/05/dynamic-programming/index.html","hash":"5c2b33b12f3678d29b218f7dd9156aa0f4837382","modified":1643724682070},{"_id":"source/HTML/2013/12/20/level-order-of-a-tree/index.html","hash":"285fb2b9009dc7a3e669606966f6397a15a8f359","modified":1643724682061},{"_id":"source/HTML/2013/12/25/string-to-integer-atoi/index.html","hash":"22bb768145b16cfcb5d0aa8d3f53d68620955fa9","modified":1643724682062},{"_id":"source/HTML/2014/01/04/reverse-linked-list/index.html","hash":"83f47b7831e6bac426b97c0b5e702a34b9d8fe32","modified":1643724682062},{"_id":"source/HTML/2014/05/17/srm-620-randomgraph/index.html","hash":"8d270188239744e368be7712f76434b660733e99","modified":1643724682065},{"_id":"source/HTML/2014/05/02/linux-daemon/index.html","hash":"abc0023d724844942b9e18c817a9834c672d2180","modified":1643724682063},{"_id":"source/HTML/2014/07/08/select-and-poll/index.html","hash":"7a14b906892095d57df1a2bca4ebfa373c7b8ff4","modified":1643724682067},{"_id":"source/HTML/2014/05/09/linux-dbm/index.html","hash":"55ed02163c72f206e8f6c161da26d8f95829d1c0","modified":1643724682064},{"_id":"source/HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","hash":"db9ef606df87803f8aa1f03cfac9d420b836815b","modified":1643724682065},{"_id":"source/HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","hash":"b998856c1cd03791f9871e29a3fb67f0419ee31f","modified":1643724682066},{"_id":"source/HTML/2014/12/29/show-me-the-code/index.html","hash":"33839380a5fc0bfd350b37984d773fd03bca4e08","modified":1643724682069},{"_id":"source/HTML/2014/10/01/2014-code-interview/index.html","hash":"e96908acaf4524dc8212a525462d3692c1247f44","modified":1643724682068},{"_id":"source/HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","hash":"f8cd2064c6e5e8a86fab6eac020c68047f3a1763","modified":1643724682067},{"_id":"source/HTML/2014/11/02/least-recently-used-algorithm/index.html","hash":"96ef6699657a2ba1ad3c0ca82d31f731ab76061b","modified":1643724682068},{"_id":"source/HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","hash":"8daaf24f274afa5f0327662a71b2613b1fab1783","modified":1643724682086},{"_id":"source/HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","hash":"d882f309c5f1a39ae7ca429a961f532ea8b8882a","modified":1643724682079},{"_id":"source/HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","hash":"ec31779b528ed09f506877e2bcf6adfa7383649f","modified":1643724682063},{"_id":"source/HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","hash":"2d9da928131019bf15c6744f60bc02c07b0d8c33","modified":1643724682079},{"_id":"source/HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","hash":"f4f7fec1b22bccabe1bd7a79bb6352f3e489b922","modified":1643724682088},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","hash":"7699406d15851ad17f951a1f7660d4deb92c36c5","modified":1643724682086},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","hash":"aff0e9812ba29b116f0f96926f0e33a3836f3859","modified":1643724682088},{"_id":"source/HTML/2017/04/15/从现在开始写作/index.html","hash":"87050076f545bf2bbb92e5671c77cf5acb5d7df8","modified":1643724682080},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/heap.png","hash":"0c1fef5a8029ad0b014accabb99643d379fe9728","modified":1643724682102},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","hash":"803ccaa5a84e2038a71c241c8f0c20cec8fc92b8","modified":1643724682102},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","hash":"93df46d81b75a432d96f265ea284f7ebe6b618bd","modified":1643724682101},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","hash":"619be4d8137910edeb88a0b15244bb6b98cf149d","modified":1643724682103},{"_id":"source/HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","hash":"b8933906174963a6adcf1bc2f8dcd6780028647c","modified":1643724682063},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","hash":"80a4c4addd3d2a14b5b3962b3ddf8bbff05ba94a","modified":1643724682104},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/index.html","hash":"0139042152839a6f409b95cc265f43458ef5b085","modified":1643724682102},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/index.html","hash":"d8549ae2fa5ff6b5b5158f9aacc76e7cf52f6ef9","modified":1643724682088},{"_id":"source/HTML/2017/11/09/django-configuration-in-action/index.html","hash":"8b251415b5c8b8baffe7dbb2d559f6250b404493","modified":1643724682111},{"_id":"source/HTML/2017/11/20/git-inside/index.html","hash":"6b66a98b48161b57054a387c0f08ddc62ca80482","modified":1643724682125},{"_id":"source/HTML/2017/11/20/git-inside/second_version.png","hash":"e59d7a09b90276cf2b4e5549d536e6eb4baec1e3","modified":1643724682125},{"_id":"source/HTML/2017/11/20/git-inside/third_version.png","hash":"9709165c96e8819d43a4883c6e298a3bb0880b2b","modified":1643724682126},{"_id":"source/HTML/2017/11/27/TaskScheduler/index.html","hash":"8e038fa63a5d4b94e100333bf8725d5c20707246","modified":1643724682126},{"_id":"source/HTML/2017/11/20/git-inside/project.png","hash":"5d67e33edc164fba66bad512494a9150a5f30a43","modified":1643724682125},{"_id":"source/HTML/2017/11/20/git-inside/first_version.png","hash":"54e8ea80ea1cb233d004ac59187bef668760a5a5","modified":1643724682124},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/index.html","hash":"a0af3351a38a4b7d5c56335a70b46a5f96f849a0","modified":1643724682104},{"_id":"source/HTML/2017/05/10/Python-代码实践小结/index.html","hash":"2401c3b0b3d81a6cfa7f6f32c5f3e09808e9e10f","modified":1643724682080},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","hash":"417ed4955c04a665047a8c1d4a047c2e319ffb7d","modified":1643724682085},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","hash":"1854eb10195cf3c7d8bee5af081cf6c366c0d081","modified":1643724682085},{"_id":"source/HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","hash":"ae0679f95981e1d47528d18577fceeace85a6789","modified":1643724682086},{"_id":"source/HTML/2017/12/03/tasksetmanager/index.html","hash":"6cb3f510289f2ba55cbafebf54a991d3c184b761","modified":1643724682126},{"_id":"source/HTML/2018/01/06/线程堆栈分析/dead_lock.png","hash":"1907d024bd977bd2cdcd4fd7087a570f85cd03f1","modified":1643724682133},{"_id":"source/HTML/2014/09/26/epoll-and-select/index.html","hash":"5780e77e5115af9153c6c9e853b8c16e2ba53d99","modified":1643724682068},{"_id":"source/HTML/2017/12/22/millwheel/index.html","hash":"465f898abc9391335f0077756166b6b5fdc38c02","modified":1643724682132},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","hash":"64d49ecfd0dfa44aa5e190d1a1ba95cefa05a4bf","modified":1643724682136},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","hash":"1b6baef088696107131a6d42f7e276a6e7f31b54","modified":1643724682135},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","hash":"542074b5807114f4b5826beb68959eb739fdc307","modified":1643724682136},{"_id":"source/HTML/2014/06/20/nginx-http-filter-module/index.html","hash":"c711dde8d5e3be8ec04d31067b5e7c6ec76d10ad","modified":1643724682066},{"_id":"source/HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","hash":"692e03184900637b7403d0c5971fb16623f96507","modified":1643724682052},{"_id":"source/HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","hash":"ca3ca02c20f8241a56ce39e201b0cfe3be05a05e","modified":1643724682074},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","hash":"28bd4bf7dc6e99e099e3ab4a2f7d52c496ccee2e","modified":1643724682135},{"_id":"source/HTML/2017/05/20/hello-world/index.html","hash":"145a865036933138f693a8cdfb9f33b13b335227","modified":1643724682085},{"_id":"source/HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","hash":"82d39cc63cd0c81393792642c85ac32a3d6f8fa3","modified":1643724682073},{"_id":"source/HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","hash":"39e325676157faa1b7e3ec20d904269061e91563","modified":1643724682074},{"_id":"source/HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","hash":"d767079446a5a30613f66ac1675fed2efb49ec25","modified":1643724682143},{"_id":"source/HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","hash":"e49d498bcee312ae53d3d169fb74ded91cbe40ae","modified":1643724682075},{"_id":"source/HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","hash":"bdea1f44fa837be7018ce252df06f7e2deee7d62","modified":1643724682075},{"_id":"source/HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","hash":"95986ac60590773d6f13c7c52d51b1f661f6b8c3","modified":1643724682076},{"_id":"source/HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","hash":"d434e15f34b66346cd8103aba9d995b06b1138d0","modified":1643724682077},{"_id":"source/HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","hash":"01defd7cefffce8fdb83c051a7e04b2b36aac52d","modified":1643724682076},{"_id":"source/HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","hash":"7b43c9caf380a235e3e5cdac32b2fc80ee7408da","modified":1643724682076},{"_id":"source/HTML/2016/01/20/how-to-read-a-book/index.html","hash":"81753186b230d3ff472bdace328e8d00216cb942","modified":1643724682073},{"_id":"source/HTML/2016/06/11/asking-the-right-questions/index.html","hash":"0e6c9eb110ffb864faba87efb79df9d073278ff0","modified":1643724682074},{"_id":"source/HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","hash":"c695ff41752a3b2d3fd5ffcfda5badfd1e068947","modified":1643724682078},{"_id":"source/HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","hash":"a25ebfb11f7eb8afdedbb23d518bbd680747a0c9","modified":1643724682077},{"_id":"source/HTML/2018/04/06/Flink-State/index.html","hash":"b8572bef962a1ca47403498c2ec6e006c23a5075","modified":1643724682138},{"_id":"source/HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","hash":"517f6d0ca1bc55b7055756a884089c4738eeaae5","modified":1643724682078},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","hash":"1bcc9daeeb35f814bd11bd85b928d40121dccec2","modified":1643724682144},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","hash":"9cd11ba354c60652df9db5e8ed5286b423403ea0","modified":1643724682144},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","hash":"e7aa6ff7dc089ca8dad134e8ac2eebbdbb79ab46","modified":1643724682144},{"_id":"source/HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","hash":"703c859e1cfd53f019ea18d4d3f6231a7226b09c","modified":1643724682078},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","hash":"3f226ad5ca9b70a361a8bca470a3c004a0d1df52","modified":1643724682137},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","hash":"f7af32b296824e12591be667d703c9ed1a1a2131","modified":1643724682138},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","hash":"e472be0e0f5bd1b3277fa70e36237f5dd08125ce","modified":1643724682137},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","hash":"2d64e51ba17035c65a910b37307ddb86b24715ad","modified":1643724682137},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","hash":"acb23a5745277e2ce339293d305b344c1b8341f4","modified":1643724682137},{"_id":"source/HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","hash":"4eb8b29c028144121b843ba6f0bf4ef58ad8cab1","modified":1643724682021},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/stage.jpg","hash":"4367aad746772f13fcd5deea7e5d447227ec733f","modified":1643724682110},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","hash":"976cca190ae3cb79be8723d653b16827cd14b079","modified":1643724682084},{"_id":"source/HTML/2018/01/06/线程堆栈分析/index.html","hash":"0fd08b6223e764cd3e473a258587b21761c3c2a0","modified":1643724682133},{"_id":"source/HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","hash":"6e8f4af4b02a6ad9237f8351b6b112db17fb4ae3","modified":1643724682130},{"_id":"source/HTML/2017/12/22/millwheel/figure13_latency.jpg","hash":"e342fda0902b5f6f1078834d0e24f8edc83ba6e7","modified":1643724682129},{"_id":"source/HTML/2017/12/22/millwheel/figure16_cache.jpg","hash":"00dd49d86f87be1213470c27b2ccec755c3bc824","modified":1643724682131},{"_id":"source/HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","hash":"85afa904c53280fa8b872da8425d517c5985203c","modified":1643724682131},{"_id":"source/HTML/2018/04/06/Flink-State/state-hierarchy.png","hash":"03bafd829b1f6e57121911ad584a0e12407593ae","modified":1643724682139},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","hash":"ab3352884e349d7418c3ad3a5492526adf21eec5","modified":1643724682087},{"_id":"source/HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","hash":"cb2a883863b50fc6daa50edddfccdd4233a758d0","modified":1643724682128},{"_id":"source/HTML/2017/12/22/millwheel/figure12_transaction.jpg","hash":"70a5993db631cfaec318db3736ac22aae312b434","modified":1643724682129},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","hash":"a2db1790b8cde62c95d1842364764743a4fe4fea","modified":1643724682090},{"_id":"source/HTML/2018/01/06/线程堆栈分析/wait_sleep.png","hash":"9a1ddf0166cd279ff294d08436c5cd0be9c89dd6","modified":1643724682134},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","hash":"f77ee44c9974e019b0682db58ddb8bc3292a6f71","modified":1643724682083},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/procesure.jpg","hash":"3a9919b0782b34a3814109f78d01c2a1d90d7322","modified":1643724682108},{"_id":"source/HTML/2018/04/06/Flink-State/state-rescale.png","hash":"82c7ba867236708d14bd489ecafd20b57e39b392","modified":1643724682143},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","hash":"8a0149f4a702fc3cd3beb85019a2668a4aa7ac1d","modified":1643724682099},{"_id":"source/HTML/2017/11/20/git-inside/file_tree.png","hash":"5febfd253e17c6678e82659af7546d77ef7b0a82","modified":1643724682122},{"_id":"public/search.xml","hash":"ac35f31d5a9f2c8f01a741b3043706ee9f7e2ff7","modified":1744453640639},{"_id":"public/2022/04/16/big-data-paper-big-picture/index.html","hash":"e454693d36aa3d70a6c17bcfb6b741cd3ccd6d1c","modified":1735806225965},{"_id":"public/archives/index.html","hash":"718e2fb1eac9ad3fb9e7e1f0702f80c31f557aa6","modified":1744453640639},{"_id":"public/archives/2022/index.html","hash":"3859378943f10360652f78cecdf2bd3b13f996d0","modified":1735806330138},{"_id":"public/archives/2022/04/index.html","hash":"9d72852094c96fa2e86a2be23c5bc0324f839852","modified":1735806330138},{"_id":"public/archives/2023/index.html","hash":"c30563279db985c6415cbcc6d20afc80e984741a","modified":1744453640639},{"_id":"public/archives/2023/04/index.html","hash":"2f5b4825ef7707097215d81a6e1577c6ef5bb989","modified":1744453640639},{"_id":"public/index.html","hash":"10acf070e7212a981f5707fdcdaf1ccf8766049f","modified":1744453640639},{"_id":"public/tags/大数据-全局认识-偏见-论文-系统/index.html","hash":"538ffa2b12e3026efb8fa750341daa42379ed76f","modified":1735806330138},{"_id":"public/tags/lsm/index.html","hash":"fe0023835d1c63ed8a24a49ba51571efa9130199","modified":1744453640639},{"_id":"public/tags/lsm-tree/index.html","hash":"dd2a7350add9ebc0ae93cbc567bd085cdbaaaa7c","modified":1744453640639},{"_id":"public/tags/minimum-global-awareness/index.html","hash":"375f4abea7b31627d5b12d2d0fc3969ca00aa317","modified":1744453640639},{"_id":"public/tags/paper/index.html","hash":"b4f7a1e1294588fcf246bde502fc3e069c778c1b","modified":1744453640639},{"_id":"public/2023/04/24/lsm-tree-1-2023-05-17/index.html","hash":"279d1fcc1af8c697b775a838fe67f565764ddac2","modified":1742709767261},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1684381410492},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1684381410492},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1684381410492},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1684381410492},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1684381410492},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1684381410492},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1684381410492},{"_id":"public/img/github-sprite.png","hash":"4d7ee33beaaebf002ba57a172d159e46194ae481","modified":1684381410492},{"_id":"public/img/glyphicons-halflings-white.png","hash":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1684381410492},{"_id":"public/img/glyphicons-halflings.png","hash":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1684381410492},{"_id":"public/img/grid-18px-masked.png","hash":"1379b689836f9fcccd88aa729c4034d6b36e1f3c","modified":1684381410492},{"_id":"public/img/grid-baseline-20px.png","hash":"43b8d0c9b39f5ce07ecfde036fd13f835c129238","modified":1684381410492},{"_id":"public/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1684381410492},{"_id":"public/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1684381410492},{"_id":"public/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1684381410492},{"_id":"public/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1684381410492},{"_id":"public/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1684381410492},{"_id":"public/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1684381410492},{"_id":"public/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1684381410492},{"_id":"public/HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","hash":"a0b458ff43182267b6a0bb6d85d03ffa142b8f78","modified":1684381410492},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1684381410492},{"_id":"public/HTML/2010/12/09/hello-world-1/index.html","hash":"b7f672733e1544662e607889962dc7e2ff1dece4","modified":1684381410492},{"_id":"public/HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","hash":"d00f26d86a9ed0f18217896e5ed67a877836d8ab","modified":1684381410492},{"_id":"public/HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","hash":"0ebfa804c365dc70ea2e37a323fbc48e2963857d","modified":1684381410492},{"_id":"public/HTML/2010/12/14/red-hat9-command-messy-code/index.html","hash":"b8511a068efe0a825516424a6a807f518834fa50","modified":1684381410492},{"_id":"public/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1684381410492},{"_id":"public/HTML/2010/12/16/wordpress-link-order/index.html","hash":"4112ccf19e134969ef45dd6f982933f36bb8f093","modified":1684381410492},{"_id":"public/HTML/2010/12/22/linux-shell-problem/index.html","hash":"4e01c5a3d4746a7e9f8cdeeb4d8a70009c62aeec","modified":1684381410492},{"_id":"public/HTML/2010/12/30/linux-fork-test/index.html","hash":"d70a5871ad8b47faf6a41be054559ed2099699d8","modified":1684381410492},{"_id":"public/HTML/2010/12/31/linux-fork-2/index.html","hash":"9ddcf3b5ef334232628a464c054176ca39a325c5","modified":1684381410492},{"_id":"public/HTML/2010/12/14/linux-rename/index.html","hash":"9d612e51ee296c6ce0e9baaa750f72c49f99470d","modified":1684381410492},{"_id":"public/HTML/2010/12/23/linux-single-user-config/index.html","hash":"41a1c7ca16e86feba1e6bdc0cfc64e5a47668a44","modified":1684381410492},{"_id":"public/HTML/2010/12/23/linux-grub-encrypt/index.html","hash":"4f414c75abba66766dfb58c1ba0f655d25dfc668","modified":1684381410492},{"_id":"public/HTML/2010/12/30/wordpress-clickchar-plugin/index.html","hash":"f29d93933c20f5cbecbc332ed620e24481940de3","modified":1684381410492},{"_id":"public/HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","hash":"8792c869577319964af72d1e12680887faf5d65f","modified":1684381410492},{"_id":"public/HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","hash":"103e1306fe629a15de363c25db4194d1c8aa0e61","modified":1684381410492},{"_id":"public/HTML/2011/02/10/networkflow-1-maximum-matching/index.html","hash":"bcdb2deb83feb707c0125e6c7430e5fab733cf25","modified":1684381410492},{"_id":"public/HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","hash":"c7671d8d7bb5d368a426bd4dbb9d77bff2659754","modified":1684381410492},{"_id":"public/HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","hash":"9cbf3bd17f36d430e18187c241aae6377ad0da39","modified":1684381410492},{"_id":"public/HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","hash":"a6870b51f201fc9cc1f460a5f36bd87c3b96c13c","modified":1684381410492},{"_id":"public/HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","hash":"367c0d2ebaaa6e7a348b3862e34358eba6490f68","modified":1684381410492},{"_id":"public/HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","hash":"0bfc284b03ed350bb4227fe04396a5bd44a3cb1c","modified":1684381410492},{"_id":"public/HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","hash":"c9c0874db9d75d18fea253724226f928cee1b29f","modified":1684381410492},{"_id":"public/HTML/2011/03/07/usaco-4-3-3-street-race/index.html","hash":"bf00799ad8ac89113d39464e8bf08dd6299f920e","modified":1684381410492},{"_id":"public/HTML/2011/02/27/networkflow-sap/index.html","hash":"72f316e2e41aaaa4fe89bb4dd98d4317d8cfae6d","modified":1684381410492},{"_id":"public/HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","hash":"42f2bcc74e794aa3757c92ca9c29ab8b9da8f5a9","modified":1684381410492},{"_id":"public/HTML/2011/03/17/poj-1704-game/index.html","hash":"fddc4e2410614c3a7078395254ace1797cf5fc3a","modified":1684381410492},{"_id":"public/HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","hash":"036e41c9402c101a928cb8b8ca958dd1bf82c8c9","modified":1684381410492},{"_id":"public/HTML/2011/03/22/c-cow-problem/index.html","hash":"9b6583d3037c8507c697d948de624b4ff1a2411f","modified":1684381410492},{"_id":"public/HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","hash":"e3452f98ef670c2ed7444846a103a4c301eb60df","modified":1684381410492},{"_id":"public/HTML/2011/03/18/another-ux-strong-password/index.html","hash":"ce2d0804d9df70cce8a61d12d1306a8428dc10b4","modified":1684381410492},{"_id":"public/HTML/2011/03/15/hdu-1730-game/index.html","hash":"86d41ced94481000ffc8df4a012af2efe4e6f81a","modified":1684381410492},{"_id":"public/HTML/2011/03/19/networkflow-5-round-table/index.html","hash":"ea36968262bacdeb21939f52b2d38277f804753f","modified":1684381410492},{"_id":"public/HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","hash":"6ca3126283b597c9d5148ad698015cc407df8996","modified":1684381410492},{"_id":"public/HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","hash":"36c1fdb176ea126f01d21a9e1c53b375136e2869","modified":1684381410492},{"_id":"public/HTML/2011/03/24/hdu-3389/index.html","hash":"1337e0432e89c41b226dde340a01e0ca699ba4e8","modified":1684381410492},{"_id":"public/HTML/2011/03/29/pointers-on-c-8-array/index.html","hash":"d349f5f698b296af66067118a0705d4544f0548b","modified":1684381410492},{"_id":"public/HTML/2011/03/29/segment-tree-my-templete/index.html","hash":"355b3a7fa94eec5e5f478280f43fa8b6e3bc91e3","modified":1684381410492},{"_id":"public/HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","hash":"524c4c732ec73544fd340fae7ee53a9b6d77b239","modified":1684381410492},{"_id":"public/HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","hash":"2949947bc26404766155bbaeacc5ef4dbe237632","modified":1684381410492},{"_id":"public/HTML/2011/03/30/c-string-point-two-dimension/index.html","hash":"58708fcb8ffba3acaa38b9c882cbf959bb7b598d","modified":1684381410492},{"_id":"public/HTML/2011/03/30/pointers-on-c-9-string/index.html","hash":"424b0332899bd8e3c356f7cf5964b0fd6cdc1211","modified":1684381410492},{"_id":"public/HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","hash":"82579e26e984e553bb0f2adb471823c6bfebb75f","modified":1684381410492},{"_id":"public/HTML/2011/05/04/permalink-change/index.html","hash":"69b1c5b855b539e77084fc25a41dd73873f4ed2a","modified":1684381410492},{"_id":"public/HTML/2011/03/31/poj-2478-eular-function/index.html","hash":"fa99d98b10fd1e5db61489036eed11294b79b29d","modified":1684381410492},{"_id":"public/HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","hash":"5ab2c014286103dd584f13a3f550faa9799b5cb6","modified":1684381410492},{"_id":"public/HTML/2011/05/02/ball-union-zoj-3350/index.html","hash":"8cbb82a3be70cc60a24e129b740a2012560b6d08","modified":1684381410492},{"_id":"public/HTML/2011/05/05/computational-geometry-hdu-2857/index.html","hash":"d1d7cbee12bc15dca86d0aa89774670aeb4a46e7","modified":1684381410492},{"_id":"public/HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","hash":"addd4a410964b3e69498495ed082ade0a430c8f6","modified":1684381410492},{"_id":"public/HTML/2011/05/12/recent-life/index.html","hash":"883c2a340ed6bb52561b4e83725370b3958c9bfa","modified":1684381410492},{"_id":"public/HTML/2011/05/08/gcj-2011-klion26/index.html","hash":"ad887c11e2a3ed3d61d47ef1b98604658ddede50","modified":1684381410492},{"_id":"public/HTML/2011/05/16/sg-function-hdu-2873/index.html","hash":"cb57dc1f27fad14dd8acb0c0b80e7bd5731f55e5","modified":1684381410492},{"_id":"public/HTML/2011/05/13/factor-num-hdu-1299/index.html","hash":"b9113a538cee1221fe008d3096fdf96ff31cbbad","modified":1684381410492},{"_id":"public/HTML/2011/07/09/fedora13-h3c/index.html","hash":"59a8264b0c5cedc1e9bf67fb63015dc489dbb82d","modified":1684381410492},{"_id":"public/HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","hash":"18d3f7f49503c036f21edf5dd3c0fa81ff327f9e","modified":1684381410492},{"_id":"public/HTML/2011/07/19/cg-hdu-3834/index.html","hash":"39d047e463509a230b67c0edd776580fc5db4824","modified":1684381410492},{"_id":"public/HTML/2011/05/18/number-theory-hdu-2879/index.html","hash":"ef7ec4bd95b42f7ee4ec9e7bde96e1710c972d1a","modified":1684381410492},{"_id":"public/HTML/2011/05/12/number-theory-poj-3358/index.html","hash":"7fb44db3ffb65ed728614dd429adc6c141c3c0bd","modified":1684381410492},{"_id":"public/HTML/2011/07/03/hdu-3074-bit-inver/index.html","hash":"f9f58fc223530af8f2b69f75c8f65ecfb5d8f17d","modified":1684381410492},{"_id":"public/HTML/2011/04/06/pointers-on-c-link-list/index.html","hash":"8d9bff69889c75f147862cc0a01d8cd43005803d","modified":1684381410492},{"_id":"public/HTML/2011/07/25/half-plan-cross/index.html","hash":"fe71d156e99bc3c25b2cadf11c1cf658cd63f0bd","modified":1684381410492},{"_id":"public/HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","hash":"9fd5ba0ed21ee57515033fba964f0990d9dc4d62","modified":1684381410492},{"_id":"public/HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","hash":"3908576594d237c6c804c1b8752446488abd9129","modified":1684381410492},{"_id":"public/HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","hash":"ce65978cdce22f4dffa5d2c29660edec522a1376","modified":1684381410492},{"_id":"public/HTML/2011/04/09/pointers-on-c-advanced-point/index.html","hash":"2f4367843a73a7bd90426a48ef7a09094397db9e","modified":1684381410492},{"_id":"public/HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","hash":"e6095a0851aa63f8819f3b3154ebe1229c2bf651","modified":1684381410492},{"_id":"public/HTML/2011/04/08/why-am-i-cancer/index.html","hash":"ce0296801768a68ba57cfb69a860e2298d61ae2b","modified":1684381410492},{"_id":"public/HTML/2011/04/10/usaco-5-3-4big-barn/index.html","hash":"8860de52be4ed4ea9b0765ab2d3bbdac5fa5362e","modified":1684381410492},{"_id":"public/HTML/2011/04/12/pointers-on-c-preprocessor/index.html","hash":"1e915680cefc0d37eb7fc9057f73f80640f3c361","modified":1684381410492},{"_id":"public/HTML/2011/04/18/poj-2480/index.html","hash":"4143146c12ad472ca5c32d1c178061f1e556d715","modified":1684381410492},{"_id":"public/HTML/2011/04/15/eular-function-2/index.html","hash":"1c77fb3ed96cc13efd55da70f9fa5898fb274c88","modified":1684381410492},{"_id":"public/HTML/2011/04/11/drab-queue-poj-2823/index.html","hash":"7f2834f5709489d837e70785b3dc8d81909a125c","modified":1684381410492},{"_id":"public/HTML/2011/04/19/eular-function-hdu-3307/index.html","hash":"85eadd67b4e3e79aa3dd45a864a293ab1fffccb4","modified":1684381410492},{"_id":"public/HTML/2011/04/20/math-education/index.html","hash":"c9ee2a68ccf1e2e110b841dcaac6df9a079fcf10","modified":1684381410492},{"_id":"public/HTML/2011/08/03/csu-summer-training-team-1/index.html","hash":"a9146de61bc23003df5ed8803d90f9c5a913c8e0","modified":1684381410492},{"_id":"public/HTML/2011/08/20/reverse-poj-3761/index.html","hash":"eaa188dc8535815d7ce9bffa1a1d0f6ab832a747","modified":1684381410492},{"_id":"public/HTML/2011/04/23/5th-csu-acm-competition/index.html","hash":"c5f5f1dfafb7a0b2c88532cdc766e4a05924723e","modified":1684381410492},{"_id":"public/HTML/2011/08/29/usaco-5-4-5-5/index.html","hash":"769be6d46db0548217c05c07e4860129033f79aa","modified":1684381410492},{"_id":"public/HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","hash":"741a65ff9e2f723f6f73f15297eae911addf20e9","modified":1684381410492},{"_id":"public/HTML/2011/12/13/windows-mpi/index.html","hash":"1e17e6ae682e6bda42f3d29175152a13262ee133","modified":1684381410492},{"_id":"public/HTML/2012/03/26/replay-email/index.html","hash":"b62467076fd17850deceaf7ecbcc45b589c17f7f","modified":1684381410492},{"_id":"public/HTML/2011/06/22/xp-fedora-double-os/index.html","hash":"6201f0b3b333237c1bae23a2ddac8772eeec2fb6","modified":1684381410492},{"_id":"public/HTML/2011/12/22/fuck-csdn/index.html","hash":"85bf2255512e61dce31cc6b814a16bb1a06b9e50","modified":1684381410492},{"_id":"public/HTML/2012/03/29/github-create-project/index.html","hash":"0dfe30c40e5eb7844774431c3a2f23198c3aa98e","modified":1684381410492},{"_id":"public/HTML/2012/03/29/game-theory-prove/index.html","hash":"359138454377c3be0c1b56514c52ca5b3c92fda5","modified":1684381410492},{"_id":"public/HTML/2012/03/29/user-chrome-cross-gfw/index.html","hash":"4513b37b2fa4274bf23f3d26d416ff6e3789059e","modified":1684381410492},{"_id":"public/HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","hash":"e157551e80201ba43816db752149292b8652428f","modified":1684381410492},{"_id":"public/HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","hash":"9b9fb81db0fda767d55b5e78a4f2fa6e757edd76","modified":1684381410492},{"_id":"public/HTML/2011/04/30/primitive-root-poj-1284/index.html","hash":"3677d61cb738099c66dfb5b5b236b8121b0e7166","modified":1684381410492},{"_id":"public/HTML/2012/04/19/vmware-ubuntu-fedora/index.html","hash":"8311e538ee43fc48dc8336f1e8aeea5c6331718b","modified":1684381410492},{"_id":"public/HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","hash":"85984e0025114e68467f589991a06c8ffaa4d51b","modified":1684381410492},{"_id":"public/HTML/2012/10/08/scheme-and-the-little-scheme/index.html","hash":"56664152df6cf144b1975769db42c2b981d15bfc","modified":1684381410492},{"_id":"public/HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","hash":"debdbac50dc17fd3c5b614f03bb21a00ecca4546","modified":1684381410492},{"_id":"public/HTML/2012/02/12/xp-office-2010-error-1406/index.html","hash":"309a061c7eb2f3112632e8bf7490d189503990b7","modified":1684381410492},{"_id":"public/HTML/2012/02/12/2011-2012-plan/index.html","hash":"71634c372770d753da885f58a7bf60878ab33cd1","modified":1684381410492},{"_id":"public/HTML/2012/10/23/google-adsense/index.html","hash":"7f28cdd569711be433560f1e31463818286911d4","modified":1684381410492},{"_id":"public/HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","hash":"4ebd787ed4427933d25ba086df66812dc3ca969e","modified":1684381410492},{"_id":"public/HTML/2012/09/21/wordpress-fatal-error/index.html","hash":"2a442a68173b4fce7e336794c2ff3838c549681c","modified":1684381410492},{"_id":"public/HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","hash":"76ad45bbf89459b45a081ab691182a4f0a39e2fd","modified":1684381410492},{"_id":"public/HTML/2015/02/18/everything-about-2014/index.html","hash":"2f493ee0acf299b62fb842834a40b0b20ab74501","modified":1684381410492},{"_id":"public/HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","hash":"ff019f186e2020408b4af8aac5da3ce078a2b3ed","modified":1684381410492},{"_id":"public/HTML/2012/11/06/chrome-https-connection/index.html","hash":"8817e0e1990c6271d34c574b496746e1fdaf9e96","modified":1684381410492},{"_id":"public/HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","hash":"e6dcd1b34818b59331bd5421e68807b8375e7cbc","modified":1684381410492},{"_id":"public/HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","hash":"b0fc82a4eb3e6dabce657dd181d82f9b4579c767","modified":1684381410492},{"_id":"public/HTML/2012/11/13/fedora-13-opengl/index.html","hash":"223fe001ae8c8eaad09243692c58f39797a1d3a1","modified":1684381410492},{"_id":"public/HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","hash":"82d36c8517042ef23e2d8332c1597e64d5fcb7a3","modified":1684381410492},{"_id":"public/HTML/2015/03/08/github-blog-math-expression-support/index.html","hash":"b3707a34d281f86d99634603ad6c86682022f539","modified":1684381410492},{"_id":"public/HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","hash":"c779ecf5bb840156602d4e4a9b75f854270e798a","modified":1684381410492},{"_id":"public/HTML/2012/12/03/first-linux-module-lvm/index.html","hash":"50363b09aab678ec614add1999e312fc028eccab","modified":1684381410492},{"_id":"public/HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","hash":"d1514c712d734a68cc4a21a7b262b54338d6c68f","modified":1684381410492},{"_id":"public/HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","hash":"d76f0134014c6008e0bf5627769a3808f9c196d9","modified":1684381410492},{"_id":"public/HTML/2012/12/28/vi-basic-command/index.html","hash":"c1fd2538f7ed5779741cca84cb53c47747de1080","modified":1684381410492},{"_id":"public/HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","hash":"959eb55f92a0557fadc1cf98d8077aa616a16943","modified":1684381410492},{"_id":"public/HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","hash":"eae4508b0e08848cc07061a2edf65136c047f367","modified":1684381410492},{"_id":"public/HTML/2015/07/17/experiment-of-storm-grouping/index.html","hash":"ceba78b47c4b939eaa92f10b2a60d863dff64927","modified":1684381410492},{"_id":"public/HTML/2015/07/16/a-brief-view-of-storm/index.html","hash":"18ad2ee494e1e375be7cf151bcf560e25b380597","modified":1684381410492},{"_id":"public/HTML/2012/11/05/display-views-count-without-plugin/index.html","hash":"170455239edd0b92cb00f015c71c534caa6f239f","modified":1684381410492},{"_id":"public/HTML/2013/06/21/linux-command-shell-scripts-3/index.html","hash":"cc02b67fe6b334d3cdb5a591f2c6a3ff6ddc1c2d","modified":1684381410492},{"_id":"public/HTML/2013/03/26/some-easy-math-problems/index.html","hash":"bd52608dc88b955289ab0b83fcbb70f6a28ba3a9","modified":1684381410492},{"_id":"public/HTML/2015/01/17/recursion/index.html","hash":"dc0b244273f32538a38fcfab2c5b21a3f17bcad1","modified":1684381410492},{"_id":"public/HTML/2015/01/03/algorithm-series/index.html","hash":"ed92e0310f87d3c364dcd78c774400e6903920d5","modified":1684381410492},{"_id":"public/HTML/2013/03/07/matlab-2012-libsvm/index.html","hash":"1ecbc0ff571a3ff77a0a2f173803cd0058537506","modified":1684381410492},{"_id":"public/HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","hash":"9dd9d42dddcd5cc12c3eabf6c3221957269072f8","modified":1684381410492},{"_id":"public/HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","hash":"88b9e5845a51380275b92d7f946b3d6c648d0317","modified":1684381410492},{"_id":"public/HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","hash":"9b581bf973ffb69fb6ef3876abf189df2f270d24","modified":1684381410492},{"_id":"public/HTML/2013/05/25/linux-command-shell-script-2/index.html","hash":"660de3bdba29ae879081204cbeb700fe6c0dd592","modified":1684381410492},{"_id":"public/HTML/2013/05/24/linux-command-shell-script/index.html","hash":"e4f74909181a7993d7a169db1bbf5bc91f13a7dc","modified":1684381410492},{"_id":"public/HTML/2013/11/23/nonviolent-communication/index.html","hash":"d406c0c3172245f6a82cf5deee6ce166eae38dca","modified":1684381410492},{"_id":"public/HTML/2013/09/11/algorithms-chapter-5/index.html","hash":"c564bc5386b16a1d705a34a56050844c3a994a78","modified":1684381410492},{"_id":"public/HTML/2015/07/26/redis-pqsort-c/index.html","hash":"bba306f57d736b57d049aafa8ed46c2065888575","modified":1684381410492},{"_id":"public/HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","hash":"6ead7918a944d417397e5868072fdf1fab346114","modified":1684381410492},{"_id":"public/HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","hash":"9257cd557d24b0bcf7e9507aade7661b45550c14","modified":1684381410492},{"_id":"public/HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","hash":"c2bcf4368c7f66803db18f0bdca992b62589ce13","modified":1684381410492},{"_id":"public/HTML/2013/12/22/spiral-matrix/index.html","hash":"8e60f7d0cd3aa07bce75d7ccc2429f48f297c40f","modified":1684381410492},{"_id":"public/HTML/2013/12/20/level-order-of-a-tree/index.html","hash":"285fb2b9009dc7a3e669606966f6397a15a8f359","modified":1684381410492},{"_id":"public/HTML/2013/12/25/string-to-integer-atoi/index.html","hash":"22bb768145b16cfcb5d0aa8d3f53d68620955fa9","modified":1684381410492},{"_id":"public/HTML/2015/01/05/dynamic-programming/index.html","hash":"5c2b33b12f3678d29b218f7dd9156aa0f4837382","modified":1684381410492},{"_id":"public/HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","hash":"653cc7e6134f408d2bf6ef5b4baef2ff6a9a5213","modified":1684381410492},{"_id":"public/HTML/2014/05/17/srm-620-randomgraph/index.html","hash":"8d270188239744e368be7712f76434b660733e99","modified":1684381410492},{"_id":"public/HTML/2014/01/04/reverse-linked-list/index.html","hash":"83f47b7831e6bac426b97c0b5e702a34b9d8fe32","modified":1684381410492},{"_id":"public/HTML/2014/05/02/linux-daemon/index.html","hash":"abc0023d724844942b9e18c817a9834c672d2180","modified":1684381410492},{"_id":"public/HTML/2014/05/09/linux-dbm/index.html","hash":"55ed02163c72f206e8f6c161da26d8f95829d1c0","modified":1684381410492},{"_id":"public/HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","hash":"db9ef606df87803f8aa1f03cfac9d420b836815b","modified":1684381410492},{"_id":"public/HTML/2014/07/08/select-and-poll/index.html","hash":"7a14b906892095d57df1a2bca4ebfa373c7b8ff4","modified":1684381410492},{"_id":"public/HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","hash":"b998856c1cd03791f9871e29a3fb67f0419ee31f","modified":1684381410492},{"_id":"public/HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","hash":"f8cd2064c6e5e8a86fab6eac020c68047f3a1763","modified":1684381410492},{"_id":"public/HTML/2014/11/02/least-recently-used-algorithm/index.html","hash":"96ef6699657a2ba1ad3c0ca82d31f731ab76061b","modified":1684381410492},{"_id":"public/HTML/2014/10/01/2014-code-interview/index.html","hash":"e96908acaf4524dc8212a525462d3692c1247f44","modified":1684381410492},{"_id":"public/HTML/2014/12/29/show-me-the-code/index.html","hash":"33839380a5fc0bfd350b37984d773fd03bca4e08","modified":1684381410492},{"_id":"public/HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","hash":"2d9da928131019bf15c6744f60bc02c07b0d8c33","modified":1684381410492},{"_id":"public/HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","hash":"8daaf24f274afa5f0327662a71b2613b1fab1783","modified":1684381410492},{"_id":"public/HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","hash":"d882f309c5f1a39ae7ca429a961f532ea8b8882a","modified":1684381410492},{"_id":"public/HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","hash":"ec31779b528ed09f506877e2bcf6adfa7383649f","modified":1684381410492},{"_id":"public/HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","hash":"f4f7fec1b22bccabe1bd7a79bb6352f3e489b922","modified":1684381410492},{"_id":"public/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","hash":"aff0e9812ba29b116f0f96926f0e33a3836f3859","modified":1684381410492},{"_id":"public/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","hash":"7699406d15851ad17f951a1f7660d4deb92c36c5","modified":1684381410492},{"_id":"public/HTML/2017/04/15/从现在开始写作/index.html","hash":"87050076f545bf2bbb92e5671c77cf5acb5d7df8","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","hash":"803ccaa5a84e2038a71c241c8f0c20cec8fc92b8","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/heap.png","hash":"0c1fef5a8029ad0b014accabb99643d379fe9728","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/index.html","hash":"0139042152839a6f409b95cc265f43458ef5b085","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","hash":"93df46d81b75a432d96f265ea284f7ebe6b618bd","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","hash":"619be4d8137910edeb88a0b15244bb6b98cf149d","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","hash":"80a4c4addd3d2a14b5b3962b3ddf8bbff05ba94a","modified":1684381410492},{"_id":"public/HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","hash":"b8933906174963a6adcf1bc2f8dcd6780028647c","modified":1684381410492},{"_id":"public/HTML/2017/11/09/django-configuration-in-action/index.html","hash":"8b251415b5c8b8baffe7dbb2d559f6250b404493","modified":1684381410492},{"_id":"public/HTML/2017/07/14/tmux-简单使用指南/index.html","hash":"d8549ae2fa5ff6b5b5158f9aacc76e7cf52f6ef9","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/second_version.png","hash":"e59d7a09b90276cf2b4e5549d536e6eb4baec1e3","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/project.png","hash":"5d67e33edc164fba66bad512494a9150a5f30a43","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/index.html","hash":"6b66a98b48161b57054a387c0f08ddc62ca80482","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/third_version.png","hash":"9709165c96e8819d43a4883c6e298a3bb0880b2b","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/first_version.png","hash":"54e8ea80ea1cb233d004ac59187bef668760a5a5","modified":1684381410492},{"_id":"public/HTML/2017/11/27/TaskScheduler/index.html","hash":"8e038fa63a5d4b94e100333bf8725d5c20707246","modified":1684381410492},{"_id":"public/HTML/2017/10/16/spark-dagscheduler/index.html","hash":"a0af3351a38a4b7d5c56335a70b46a5f96f849a0","modified":1684381410492},{"_id":"public/HTML/2017/05/10/Python-代码实践小结/index.html","hash":"2401c3b0b3d81a6cfa7f6f32c5f3e09808e9e10f","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","hash":"1854eb10195cf3c7d8bee5af081cf6c366c0d081","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","hash":"417ed4955c04a665047a8c1d4a047c2e319ffb7d","modified":1684381410492},{"_id":"public/HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","hash":"ae0679f95981e1d47528d18577fceeace85a6789","modified":1684381410492},{"_id":"public/HTML/2017/12/03/tasksetmanager/index.html","hash":"6cb3f510289f2ba55cbafebf54a991d3c184b761","modified":1684381410492},{"_id":"public/HTML/2018/01/06/线程堆栈分析/dead_lock.png","hash":"1907d024bd977bd2cdcd4fd7087a570f85cd03f1","modified":1684381410492},{"_id":"public/HTML/2014/09/26/epoll-and-select/index.html","hash":"5780e77e5115af9153c6c9e853b8c16e2ba53d99","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","hash":"28bd4bf7dc6e99e099e3ab4a2f7d52c496ccee2e","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","hash":"1b6baef088696107131a6d42f7e276a6e7f31b54","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","hash":"542074b5807114f4b5826beb68959eb739fdc307","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","hash":"64d49ecfd0dfa44aa5e190d1a1ba95cefa05a4bf","modified":1684381410492},{"_id":"public/HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","hash":"d767079446a5a30613f66ac1675fed2efb49ec25","modified":1684381410492},{"_id":"public/HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","hash":"82d39cc63cd0c81393792642c85ac32a3d6f8fa3","modified":1684381410492},{"_id":"public/HTML/2014/06/20/nginx-http-filter-module/index.html","hash":"c711dde8d5e3be8ec04d31067b5e7c6ec76d10ad","modified":1684381410492},{"_id":"public/HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","hash":"ca3ca02c20f8241a56ce39e201b0cfe3be05a05e","modified":1684381410492},{"_id":"public/HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","hash":"692e03184900637b7403d0c5971fb16623f96507","modified":1684381410492},{"_id":"public/HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","hash":"39e325676157faa1b7e3ec20d904269061e91563","modified":1684381410492},{"_id":"public/HTML/2017/05/20/hello-world/index.html","hash":"145a865036933138f693a8cdfb9f33b13b335227","modified":1684381410492},{"_id":"public/HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","hash":"e49d498bcee312ae53d3d169fb74ded91cbe40ae","modified":1684381410492},{"_id":"public/HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","hash":"bdea1f44fa837be7018ce252df06f7e2deee7d62","modified":1684381410492},{"_id":"public/HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","hash":"d434e15f34b66346cd8103aba9d995b06b1138d0","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/index.html","hash":"465f898abc9391335f0077756166b6b5fdc38c02","modified":1684381410492},{"_id":"public/HTML/2016/06/11/asking-the-right-questions/index.html","hash":"0e6c9eb110ffb864faba87efb79df9d073278ff0","modified":1684381410492},{"_id":"public/HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","hash":"01defd7cefffce8fdb83c051a7e04b2b36aac52d","modified":1684381410492},{"_id":"public/HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","hash":"95986ac60590773d6f13c7c52d51b1f661f6b8c3","modified":1684381410492},{"_id":"public/HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","hash":"7b43c9caf380a235e3e5cdac32b2fc80ee7408da","modified":1684381410492},{"_id":"public/HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","hash":"a25ebfb11f7eb8afdedbb23d518bbd680747a0c9","modified":1684381410492},{"_id":"public/HTML/2016/01/20/how-to-read-a-book/index.html","hash":"81753186b230d3ff472bdace328e8d00216cb942","modified":1684381410492},{"_id":"public/HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","hash":"c695ff41752a3b2d3fd5ffcfda5badfd1e068947","modified":1684381410492},{"_id":"public/HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","hash":"517f6d0ca1bc55b7055756a884089c4738eeaae5","modified":1684381410492},{"_id":"public/HTML/2018/04/06/Flink-State/index.html","hash":"b8572bef962a1ca47403498c2ec6e006c23a5075","modified":1684381410492},{"_id":"public/HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","hash":"1bcc9daeeb35f814bd11bd85b928d40121dccec2","modified":1684381410492},{"_id":"public/HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","hash":"9cd11ba354c60652df9db5e8ed5286b423403ea0","modified":1684381410492},{"_id":"public/HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","hash":"e7aa6ff7dc089ca8dad134e8ac2eebbdbb79ab46","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","hash":"e472be0e0f5bd1b3277fa70e36237f5dd08125ce","modified":1684381410492},{"_id":"public/HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","hash":"703c859e1cfd53f019ea18d4d3f6231a7226b09c","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","hash":"3f226ad5ca9b70a361a8bca470a3c004a0d1df52","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","hash":"acb23a5745277e2ce339293d305b344c1b8341f4","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","hash":"f7af32b296824e12591be667d703c9ed1a1a2131","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","hash":"2d64e51ba17035c65a910b37307ddb86b24715ad","modified":1684381410492},{"_id":"public/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1684381410492},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1684381410492},{"_id":"public/HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","hash":"4eb8b29c028144121b843ba6f0bf4ef58ad8cab1","modified":1684381410492},{"_id":"public/HTML/2017/10/16/spark-dagscheduler/stage.jpg","hash":"4367aad746772f13fcd5deea7e5d447227ec733f","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","hash":"976cca190ae3cb79be8723d653b16827cd14b079","modified":1684381410492},{"_id":"public/HTML/2018/01/06/线程堆栈分析/index.html","hash":"0fd08b6223e764cd3e473a258587b21761c3c2a0","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","hash":"6e8f4af4b02a6ad9237f8351b6b112db17fb4ae3","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure13_latency.jpg","hash":"e342fda0902b5f6f1078834d0e24f8edc83ba6e7","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure16_cache.jpg","hash":"00dd49d86f87be1213470c27b2ccec755c3bc824","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","hash":"85afa904c53280fa8b872da8425d517c5985203c","modified":1684381410492},{"_id":"public/HTML/2018/04/06/Flink-State/state-hierarchy.png","hash":"03bafd829b1f6e57121911ad584a0e12407593ae","modified":1684381410492},{"_id":"public/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1684381410492},{"_id":"public/css/comment.css","hash":"acbef2bb5327b74fb68036ae238bc03514e4b4d8","modified":1684381410492},{"_id":"public/css/highlight-default.min.css","hash":"6ad10fd07f492660d5c8c8eaec6e74a94d277b4a","modified":1684381410492},{"_id":"public/css/google-fonts.css","hash":"91e629d0a0a531e920252788ed8863c26608c2b2","modified":1684381410492},{"_id":"public/css/highlight.css","hash":"98a031dd0991929ec23098db9dfde15ae662f031","modified":1684381410492},{"_id":"public/css/responsive.css","hash":"25136a75af5957a669d5c4782da8b8fa95f8fc55","modified":1684381410492},{"_id":"public/css/style.css","hash":"1c6958e4fa8ab11aca518b9a556fe2fad4976675","modified":1684381410492},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1684381410492},{"_id":"public/js/gallery.js","hash":"d19f1b1cc5b75e21ca1d643b6dae9490ead28b55","modified":1684381410492},{"_id":"public/js/spin.min.js","hash":"f91e2b661f4feb976b5e260bdc2366763ad13562","modified":1684381410492},{"_id":"public/js/search.js","hash":"6197e425941f107761d3cbfb0f06ad4a3f5f7427","modified":1684381410492},{"_id":"public/js/main.js","hash":"d78290344d95646172e488e0af2dade9740288f8","modified":1684381410492},{"_id":"public/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1684381410492},{"_id":"public/css/themes/common.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1684381410492},{"_id":"public/css/themes/default.css","hash":"32f758d295c7037f247d300f2481b5d7d4f3b100","modified":1684381410492},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1684381410492},{"_id":"public/css/font-awesome.css","hash":"6df51eee1e75e450cb9cd71e925e6aa9ac2d6a9d","modified":1684381410492},{"_id":"public/js/bootstrap.min.js","hash":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1684381410492},{"_id":"public/js/comment.js","hash":"5cdafe054baa2ef66670ed46e6f862718e77bfcb","modified":1684381410492},{"_id":"public/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1684381410492},{"_id":"public/js/marked.js","hash":"b1d4ef560ea01a5fe3a391a5933be5e7016f1d6a","modified":1684381410492},{"_id":"public/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1684381410492},{"_id":"public/css/themes/bootstrap.css","hash":"11197c2fc2925b34cc98a3f4ec67ffdd9f36a760","modified":1684381410492},{"_id":"public/css/themes/cyborg.css","hash":"4320dbfd9543f6ef1cc703d83d85c6652f9272d0","modified":1684381410492},{"_id":"public/css/themes/cosmo.css","hash":"bcb36ab2b547571fa4125e05e1074abba6bd5670","modified":1684381410492},{"_id":"public/css/themes/darkly.css","hash":"581ff4339a616fe26b4dc1b6c1d1ad7946b83de6","modified":1684381410492},{"_id":"public/css/themes/journal.css","hash":"b77cda6baedc3852c64f5664206356b3057b4781","modified":1684381410492},{"_id":"public/css/themes/cerulean.css","hash":"7fee0903cce12483ae3f37d330ef693826a5a61f","modified":1684381410492},{"_id":"public/css/themes/flatly.css","hash":"a95865761e69d0daf75660e24d9f5f316482ea55","modified":1684381410492},{"_id":"public/css/themes/paper.css","hash":"1ae57ddb500a85b8ca8e7d2897e55cb2ba4cf1bc","modified":1684381410492},{"_id":"public/css/themes/sandstone.css","hash":"5878440ffa7e1656214bafd8b7f39d736219807a","modified":1684381410492},{"_id":"public/css/themes/readable.css","hash":"af59c50f83bba69a4fef7d0ac32e309c903b4511","modified":1684381410492},{"_id":"public/css/themes/slate.css","hash":"3859265e9fcdb579f40a2ef7a5bd8dbead2d13ca","modified":1684381410492},{"_id":"public/css/themes/united.css","hash":"857151fa534842d0f8e862b2067f22905a1b3382","modified":1684381410492},{"_id":"public/css/themes/spacelab.css","hash":"fa4efbf50ca392c25e9b6395d6221696ec6573b6","modified":1684381410492},{"_id":"public/css/themes/superhero.css","hash":"cc4ce979e1def77b7c9b250d97d0baf3e0a3f845","modified":1684381410492},{"_id":"public/css/themes/simplex.css","hash":"b8165c48cf72e54c1f8ae1a550a04a64e6ce1929","modified":1684381410492},{"_id":"public/css/themes/lumen.css","hash":"5c23c4a98aec86b8483040e0ca602d3a4574f32c","modified":1684381410492},{"_id":"public/css/themes/yeti.css","hash":"7cb64c45bed521321e0a4a57e05e3d1c87721f16","modified":1684381410492},{"_id":"public/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","hash":"ab3352884e349d7418c3ad3a5492526adf21eec5","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","hash":"cb2a883863b50fc6daa50edddfccdd4233a758d0","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure12_transaction.jpg","hash":"70a5993db631cfaec318db3736ac22aae312b434","modified":1684381410492},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1684381410492},{"_id":"public/HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","hash":"a2db1790b8cde62c95d1842364764743a4fe4fea","modified":1684381410492},{"_id":"public/HTML/2018/01/06/线程堆栈分析/wait_sleep.png","hash":"9a1ddf0166cd279ff294d08436c5cd0be9c89dd6","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","hash":"f77ee44c9974e019b0682db58ddb8bc3292a6f71","modified":1684381410492},{"_id":"public/HTML/2017/10/16/spark-dagscheduler/procesure.jpg","hash":"3a9919b0782b34a3814109f78d01c2a1d90d7322","modified":1684381410492},{"_id":"public/HTML/2018/04/06/Flink-State/state-rescale.png","hash":"82c7ba867236708d14bd489ecafd20b57e39b392","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","hash":"8a0149f4a702fc3cd3beb85019a2668a4aa7ac1d","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/file_tree.png","hash":"5febfd253e17c6678e82659af7546d77ef7b0a82","modified":1684381410492},{"_id":"source/HTML/index.html","hash":"8745060c44b14b220875c178d8847406a85d5d93","modified":1684389826803},{"_id":"source/CNAME","hash":"eb7b0e24dca15e45f872f668a9aaa07f7af695f3","modified":1735806128524},{"_id":"public/CNAME","hash":"eb7b0e24dca15e45f872f668a9aaa07f7af695f3","modified":1735806225965},{"_id":"source/_drafts/big-data-paper-big-picture.md","hash":"ccbcf56371d1e5d3db66a4e80620bb5983f32569","modified":1735806049866},{"_id":"source/_posts/maotai-basic-2025-02-08.md","hash":"ed1e6bf5cbb9c4dbf053969f13a0e1fffc00c212","modified":1740213214890},{"_id":"source/_posts/.maotai-basic-2025-02-08.md.swp","hash":"4ef745ceeaa8a8bb7a674ea4b4b6b92648ea73a5","modified":1739968238244},{"_id":"public/2025/02/22/maotai-basic-2025-02-08/index.html","hash":"645eb27c0bee09ce1f4f04f9a91e7b1b5d405342","modified":1744453640639},{"_id":"public/archives/2025/index.html","hash":"eb9cc461f0a7eb523d29730a48c37f64f7d9db86","modified":1744453640639},{"_id":"public/archives/2025/02/index.html","hash":"ed0777e7afb92966af0bc5f5ef44d6a51c968bd7","modified":1744453640639},{"_id":"public/tags/stock/index.html","hash":"3da1dbb3fe94945b8393e21a2c4f8b9d544be722","modified":1744453640639},{"_id":"public/tags/maotai/index.html","hash":"7aafa6bc5052906639e70b6336c8db45d7ef89fe","modified":1744453640639},{"_id":"public/tags/company-analysis/index.html","hash":"f7b816ee3194f816eb16e9eb051cbefa86b749a1","modified":1744453640639},{"_id":"public/tags/wine/index.html","hash":"8c68648ae9e67489a0c910b06c557d3af1396269","modified":1744453640639},{"_id":"source/_posts/40-questions-2024.md","hash":"c1279193c4a45fc88629aae89c26f43b5c91415e","modified":1741863605295},{"_id":"source/_posts/maotai-input-output.md","hash":"108953825c7c6847f2e2fd185a4b730c0585b6ae","modified":1743643089647},{"_id":"source/_drafts/sync-data-without-lock.md","hash":"02493f8ef9792eba9007740e080243131515bc65","modified":1742108963094},{"_id":"source/_drafts/40-questions-2024.md","hash":"c1279193c4a45fc88629aae89c26f43b5c91415e","modified":1741863605295},{"_id":"source/_posts/.maotai-input-output.md.swp","hash":"941a3045dc03b47dfdaee23af6f893a7b1fa3d38","modified":1743643100537},{"_id":"public/2025/03/16/maotai-input-output/index.html","hash":"75a0ad46f5944285fd405300d477904fa10e3f61","modified":1744453640639},{"_id":"public/archives/2025/03/index.html","hash":"aaab3538b7d440cfe855aea938a214d0f3eaaa31","modified":1744453640639},{"_id":"public/tags/profit/index.html","hash":"77e184d3a76c94cb120613f9ee52875be550c19c","modified":1744453640639},{"_id":"public/tags/cost/index.html","hash":"338b09287712e6f046c89f92230ac3673b4af899","modified":1744453640639},{"_id":"source/_posts/invest-compond.md","hash":"6372c9e01286b33f051d2d5b2fdc0e350160e8ec","modified":1744453558542},{"_id":"source/_posts/.invest-compond.md.swp","hash":"a111aac69ac66fecff0a19b848d8251203795085","modified":1744248096610},{"_id":"public/2025/04/09/invest-compond/index.html","hash":"ed145aafcbc9aceaca5a492e85c4083a3bb56a00","modified":1744453640639},{"_id":"public/archives/2025/04/index.html","hash":"b77a6727e520a7cc7aec4d41e174db728245bd4c","modified":1744453640639},{"_id":"public/tags/investment/index.html","hash":"b392ce35cdfc65a1ab313f888eda970162b68c53","modified":1744453640639},{"_id":"public/tags/分红/index.html","hash":"21588f8a6968577347195f553ff8f318e1e9c75c","modified":1744453640639},{"_id":"public/tags/compond/index.html","hash":"7513528cbcaf972cf2ad1da0d3e20e2934308beb","modified":1744453640639},{"_id":"source/_posts/compare-opportunity-cost-and-ratio.md","hash":"6e6c7db914d0ba7a55d4a7515ff413210eb872dc","modified":1745073585796},{"_id":"source/_posts/differentiation.md","hash":"dad4917e9353e407ef744b83e2217e30737b83c1","modified":1745669917450},{"_id":"source/_drafts/clear-thinking.md","hash":"13696f531905a84b45300fb1cd49ce1062f9d93b","modified":1745283802697},{"_id":"source/_posts/.clear-thinking.md.swp","hash":"1ac37581f9953f581e52e45bcfe83bc2fb87447a","modified":1745283807012}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"# 现在的研究\n\n主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》\n\n1 LSM 现在的现状，以及可能的优化方向，不同优化的收益\n\n# 开源实现\n都有哪些开源的实现\n在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现\n\n现在 OceanBase 中的 L0 使用 B-Treee & Hash 的结构实现。\n\nOceanBase 中有多种 compaction，且作用都不一样\n","source":"_drafts/lsm-tree-2-20230517.md","raw":"# 现在的研究\n\n主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》\n\n1 LSM 现在的现状，以及可能的优化方向，不同优化的收益\n\n# 开源实现\n都有哪些开源的实现\n在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现\n\n现在 OceanBase 中的 L0 使用 B-Treee & Hash 的结构实现。\n\nOceanBase 中有多种 compaction，且作用都不一样\n","slug":"lsm-tree-2-20230517","published":0,"date":"2024-05-06T02:51:31.126Z","updated":"2024-05-06T02:51:31.126Z","_id":"clhsl7av800002uv95nyq507i","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"现在的研究\"><a href=\"#现在的研究\" class=\"headerlink\" title=\"现在的研究\"></a>现在的研究</h1><p>主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》</p>\n<p>1 LSM 现在的现状，以及可能的优化方向，不同优化的收益</p>\n<h1 id=\"开源实现\"><a href=\"#开源实现\" class=\"headerlink\" title=\"开源实现\"></a>开源实现</h1><p>都有哪些开源的实现<br>在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现</p>\n<p>现在 OceanBase 中的 L0 使用 B-Treee &amp; Hash 的结构实现。</p>\n<p>OceanBase 中有多种 compaction，且作用都不一样</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"现在的研究\"><a href=\"#现在的研究\" class=\"headerlink\" title=\"现在的研究\"></a>现在的研究</h1><p>主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》</p>\n<p>1 LSM 现在的现状，以及可能的优化方向，不同优化的收益</p>\n<h1 id=\"开源实现\"><a href=\"#开源实现\" class=\"headerlink\" title=\"开源实现\"></a>开源实现</h1><p>都有哪些开源的实现<br>在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现</p>\n<p>现在 OceanBase 中的 L0 使用 B-Treee &amp; Hash 的结构实现。</p>\n<p>OceanBase 中有多种 compaction，且作用都不一样</p>\n"},{"title":"lsm-tree","date":"2023-04-24T08:53:32.000Z","toc":true,"_content":"\n> 文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。\n\nLSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。\n\n<!-- more -->\n\n# 起始\n## 1 LSM-Tree 的缘起\n\nLSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。\n\n在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。\n\n由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。\n\n## 2 LSM-Tree 的结构，以及主要流程\nLSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。\n\n两层 LSM-Tree 的结构如下所示：\n\n![tow-component-lsm](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png)\n\n上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。\n\n对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:\n\n- insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。\n- get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。\n- delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i & L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。\n- update：update 可以看作是 delete&insert 的组合\n\nLSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： \n\n![rolling-merge](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png)\n\n## 3 LSM-Tree 相关的定量分析\n上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。\n\n### 双层 LSM-Tree 的 IO 定量分析\n本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。\n\n以下对比内容基于 1995 年的硬件架构：\n\n- 1MByte 内存需要 100$\n- 1MByte 磁盘的存储需要 1$\n- 随机访问 I/O 成本是 25$\n- 顺序访问的 I/O 成本是 2.5$\n\n同时为了后面描述方便，定义变量如下:\n\n- $COST_d$ 表示磁盘存储 1MByte 所需要的成本\n- $COST_m $ 表示内存中存储 1MByte 所需要的成本\n- $ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）\n- $ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）\n\n内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。\n\n假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S * COST_d, H * COST_P $，其中 $ S*COST_d $ 表示存储所需成本，$ H * COST_P $ 则表示随机 I/O 访问的成本。\n\n当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S * COST_m + S*COST_d $ 其中， $ S*COST_M $ 表示内存的成本，$ S*COST_d $ 表示磁盘的存储所需成本。\n\n综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：\n\n$ COST-TOT = min(max(S*COST_d, H*COST_P), S*COST_m + S*COST_d) $\n\n通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义\n\n- $ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点\n- $ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点\n\n> 对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。\n\n根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。\n\n根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），-- 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。\n\n\n我们使用[3] 中的给的结论来计算 \"五分钟规则\" 的参考区间 --  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式\n\n- $ \\frac{1}{ \\tau } * COST_P = pagesize * COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）\n\n那么 $ \\tau = (\\frac{1}{pagesize} * \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize * T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 `$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO`。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。\n\n### B-Tree 和 LSM-Tree 的定量分析对比\n在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。\n\n#### B-Tree 的定量分析\n> 假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。\n\n根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示\n\n$ COST_{B-ins} = COST_P * (D_e + 1) $\n\n#### LSM 的定量分析\n\n由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。\n\n首先定义一些变量如下\n\n- $ S_e $ 表示 entry（index entry） 的大小（byte 为单位）\n- $ S_p $ 表示 page size 的大小（byte 为单位）\n- $ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）\n- $ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）\n- M 表示 rolling merge 的过程中平均有多少个 entry 插入到 __每个__ C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into __each__ single page leaf node of the C1 tree during the rolling merge)\n\n每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。\n\n根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）\n\n$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）\n\n#### 对比\n\n观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式\n\n$ COST_{LSM-ins} / COST_{B-ins} = K1 * (COST_{\\pi}/COST_{P}) * (1 / M) $  \n\n其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数\n\n上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。\n\n在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。\n\n### 多 component LSM-Tree 的分析\n上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。\n\n> 为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。\n\n上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M <= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M < K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。\n\n为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。\n\n在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。\n\n下图是一个多层 LSM-Tree 的结构\n\n![multi-component-lsm-tree](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png)\n\n对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, ... C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。\n\n接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。\n\n首先定义一些在定量分析中需要的参数与假设\n- $ S(C_i) $ -- 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）\n- $ S_i $ -- 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$\n- $ r_i = S_i / S_{i-1} $  -- 表示相邻两层中的总大小比例\n- S -- 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$\n- R -- C0 接受到的插入速度（假设速度相对稳定），单位 byte/s\n- 每层的中数据量保持稳定，且接近该层的阈值\n- 每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry\n- C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除\n\n\n假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定\n问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。\n\n证明过程如下：\n1. 由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。\n2. 如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i * R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) * R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) * ((2 * r_1 + 1) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 2) + (2*r_K + 1)). 其中 $ (2 * r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i * R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)*R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)\n6. 简化 H 后得到 $ H + (R / S_P) * ((2 * r_1 + 2) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $\n7. 需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $\n8. 也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。\n9. 通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。\n9. 在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）\n\n> 其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $。\n\n根据已知条件与上述证明可得\n- $ S = S_0 + r * S_0 + r^2 * S_0 + ... + r^K * S_0 $\n- $ H = (2R / S_p)*(K * (1 + r) - 1/ 2) -- 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小\n\n也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。\n\n\n可以使用两层 LSM-Tree 进行具体的推演\n```\n两层的 LSM-Tree 中\n- K = 1， r = S_1 / S_0\n- H  = \\frac{2R}{S_P}(K*(1+r) - \\frac{1}{2})\n- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)\n- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data\n- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)\n- C = COST_tot / (COST_d * S_1)\n\n当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) \n```\n\n其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。\n\n最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。\n\n> 个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。\n\n对于 t < 1 的情况，s = t 的成本是最小的，但是 t > 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2}（通过 C = 2*t^{1/2} 以及 C = COST_tot / (COST_d * S_1) 然后换算得到），也就是说当 t > 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）\n\n对于 t <= 1 的情况来说，C = s + 1 = t + 1 <= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)\n\n### 具体例子计算 B-Tree 和 LSM-Tree 的成本分析\n上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。\n\n\n1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本\n- R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）\n- 总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days\n\n如果使用 B-Tree 的话，成本如下\n\n- 由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 * 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 * 25$ = 50,000$\n- 然后非叶子节点需要缓存，具体的缓存成本计算如下\n\t- 假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间\n\t- 64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $\n\t- 忽略其他一些细小的成本开销\n- B-Tree 的总成本 = 50000$ + 6400$ = 56400 $\n\n两层 LSM-Tree 的话，成本如下\n- 首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$\n- 根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s\n- 假设单 page 大小 4K 的情况下，根据 H 以及 H = (2*R/S_P)*(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb\n- 20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$\n- 总成本是 9200 + 2200 = 11400$\n\n大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右\n\n2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本\n- R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）\n- 576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days\n\nB-Tree 的情况下\n- 需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 * (160000 / 16)) * 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）\n- buffer 非叶子节点的成本不变，也就是 6400$\n- 总成本 = 500,000$ + 6400$ = 506400$\n\n两层 LSM-Tree 的情况\n- 首先通过 t 的公式计算得到 t = 2*((R/S_p)/S_1)*(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 > 1\n- 通过公式得到最低成本 = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存\n- 额外增加 2M 的内存用于 merge，200$ \n- 总成本 ~ 27329$\n\n对于三层 LSM-Tree 的情况\n- C_2 需要 9.2G 存储，总成本 9.2*1000*1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700\n- 根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23\n- C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$\n- C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）\n- 另外增加 4MB 用于 rolling merge，也就是 400$\n- 总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$\n\n对比可知 三层 LSM 的成本（11700$） < 两层 LSM 的成本（27329$） < B-Tree 的成本（506400$）\n\n## 4 未来可能的优化\n- 为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）\n- 插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。\n\n\n# Ref\n[1] [The Log-Structured Merge-Tree (LSM-Tree)](https://www.cs.umb.edu/~poneil/lsmtree.pdf)  \n[2] [The Five Minute Rule](https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf)  \n[3] [Database Buffer and Disk Configuring and the Battle of the Bottlenecks]()  \n[4] [GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989]()  \n","source":"_posts/lsm-tree-1-2023-05-17.md","raw":"---\ntitle: lsm-tree\ndate: 2023-04-24 16:53:32\ntags: \n    - lsm\n    - lsm-tree\n    - minimum-global-awareness\n    - paper\ntoc: true\n---\n\n> 文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。\n\nLSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。\n\n<!-- more -->\n\n# 起始\n## 1 LSM-Tree 的缘起\n\nLSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。\n\n在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。\n\n由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。\n\n## 2 LSM-Tree 的结构，以及主要流程\nLSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。\n\n两层 LSM-Tree 的结构如下所示：\n\n![tow-component-lsm](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png)\n\n上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。\n\n对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:\n\n- insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。\n- get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。\n- delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i & L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。\n- update：update 可以看作是 delete&insert 的组合\n\nLSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： \n\n![rolling-merge](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png)\n\n## 3 LSM-Tree 相关的定量分析\n上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。\n\n### 双层 LSM-Tree 的 IO 定量分析\n本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。\n\n以下对比内容基于 1995 年的硬件架构：\n\n- 1MByte 内存需要 100$\n- 1MByte 磁盘的存储需要 1$\n- 随机访问 I/O 成本是 25$\n- 顺序访问的 I/O 成本是 2.5$\n\n同时为了后面描述方便，定义变量如下:\n\n- $COST_d$ 表示磁盘存储 1MByte 所需要的成本\n- $COST_m $ 表示内存中存储 1MByte 所需要的成本\n- $ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）\n- $ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）\n\n内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。\n\n假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S * COST_d, H * COST_P $，其中 $ S*COST_d $ 表示存储所需成本，$ H * COST_P $ 则表示随机 I/O 访问的成本。\n\n当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S * COST_m + S*COST_d $ 其中， $ S*COST_M $ 表示内存的成本，$ S*COST_d $ 表示磁盘的存储所需成本。\n\n综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：\n\n$ COST-TOT = min(max(S*COST_d, H*COST_P), S*COST_m + S*COST_d) $\n\n通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义\n\n- $ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点\n- $ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点\n\n> 对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。\n\n根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。\n\n根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），-- 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。\n\n\n我们使用[3] 中的给的结论来计算 \"五分钟规则\" 的参考区间 --  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式\n\n- $ \\frac{1}{ \\tau } * COST_P = pagesize * COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）\n\n那么 $ \\tau = (\\frac{1}{pagesize} * \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize * T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 `$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO`。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。\n\n### B-Tree 和 LSM-Tree 的定量分析对比\n在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。\n\n#### B-Tree 的定量分析\n> 假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。\n\n根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示\n\n$ COST_{B-ins} = COST_P * (D_e + 1) $\n\n#### LSM 的定量分析\n\n由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。\n\n首先定义一些变量如下\n\n- $ S_e $ 表示 entry（index entry） 的大小（byte 为单位）\n- $ S_p $ 表示 page size 的大小（byte 为单位）\n- $ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）\n- $ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）\n- M 表示 rolling merge 的过程中平均有多少个 entry 插入到 __每个__ C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into __each__ single page leaf node of the C1 tree during the rolling merge)\n\n每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。\n\n根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）\n\n$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）\n\n#### 对比\n\n观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式\n\n$ COST_{LSM-ins} / COST_{B-ins} = K1 * (COST_{\\pi}/COST_{P}) * (1 / M) $  \n\n其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数\n\n上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。\n\n在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。\n\n### 多 component LSM-Tree 的分析\n上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。\n\n> 为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。\n\n上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M <= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M < K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。\n\n为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。\n\n在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。\n\n下图是一个多层 LSM-Tree 的结构\n\n![multi-component-lsm-tree](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png)\n\n对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, ... C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。\n\n接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。\n\n首先定义一些在定量分析中需要的参数与假设\n- $ S(C_i) $ -- 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）\n- $ S_i $ -- 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$\n- $ r_i = S_i / S_{i-1} $  -- 表示相邻两层中的总大小比例\n- S -- 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$\n- R -- C0 接受到的插入速度（假设速度相对稳定），单位 byte/s\n- 每层的中数据量保持稳定，且接近该层的阈值\n- 每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry\n- C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除\n\n\n假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定\n问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。\n\n证明过程如下：\n1. 由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。\n2. 如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i * R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) * R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) * ((2 * r_1 + 1) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 2) + (2*r_K + 1)). 其中 $ (2 * r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i * R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)*R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)\n6. 简化 H 后得到 $ H + (R / S_P) * ((2 * r_1 + 2) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $\n7. 需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $\n8. 也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。\n9. 通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。\n9. 在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）\n\n> 其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $。\n\n根据已知条件与上述证明可得\n- $ S = S_0 + r * S_0 + r^2 * S_0 + ... + r^K * S_0 $\n- $ H = (2R / S_p)*(K * (1 + r) - 1/ 2) -- 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小\n\n也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。\n\n\n可以使用两层 LSM-Tree 进行具体的推演\n```\n两层的 LSM-Tree 中\n- K = 1， r = S_1 / S_0\n- H  = \\frac{2R}{S_P}(K*(1+r) - \\frac{1}{2})\n- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)\n- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data\n- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)\n- C = COST_tot / (COST_d * S_1)\n\n当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) \n```\n\n其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。\n\n最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。\n\n> 个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。\n\n对于 t < 1 的情况，s = t 的成本是最小的，但是 t > 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2}（通过 C = 2*t^{1/2} 以及 C = COST_tot / (COST_d * S_1) 然后换算得到），也就是说当 t > 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）\n\n对于 t <= 1 的情况来说，C = s + 1 = t + 1 <= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)\n\n### 具体例子计算 B-Tree 和 LSM-Tree 的成本分析\n上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。\n\n\n1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本\n- R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）\n- 总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days\n\n如果使用 B-Tree 的话，成本如下\n\n- 由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 * 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 * 25$ = 50,000$\n- 然后非叶子节点需要缓存，具体的缓存成本计算如下\n\t- 假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间\n\t- 64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $\n\t- 忽略其他一些细小的成本开销\n- B-Tree 的总成本 = 50000$ + 6400$ = 56400 $\n\n两层 LSM-Tree 的话，成本如下\n- 首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$\n- 根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s\n- 假设单 page 大小 4K 的情况下，根据 H 以及 H = (2*R/S_P)*(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb\n- 20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$\n- 总成本是 9200 + 2200 = 11400$\n\n大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右\n\n2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本\n- R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）\n- 576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days\n\nB-Tree 的情况下\n- 需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 * (160000 / 16)) * 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）\n- buffer 非叶子节点的成本不变，也就是 6400$\n- 总成本 = 500,000$ + 6400$ = 506400$\n\n两层 LSM-Tree 的情况\n- 首先通过 t 的公式计算得到 t = 2*((R/S_p)/S_1)*(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 > 1\n- 通过公式得到最低成本 = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存\n- 额外增加 2M 的内存用于 merge，200$ \n- 总成本 ~ 27329$\n\n对于三层 LSM-Tree 的情况\n- C_2 需要 9.2G 存储，总成本 9.2*1000*1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700\n- 根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23\n- C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$\n- C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）\n- 另外增加 4MB 用于 rolling merge，也就是 400$\n- 总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$\n\n对比可知 三层 LSM 的成本（11700$） < 两层 LSM 的成本（27329$） < B-Tree 的成本（506400$）\n\n## 4 未来可能的优化\n- 为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）\n- 插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。\n\n\n# Ref\n[1] [The Log-Structured Merge-Tree (LSM-Tree)](https://www.cs.umb.edu/~poneil/lsmtree.pdf)  \n[2] [The Five Minute Rule](https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf)  \n[3] [Database Buffer and Disk Configuring and the Battle of the Bottlenecks]()  \n[4] [GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989]()  \n","slug":"lsm-tree-1-2023-05-17","published":1,"updated":"2024-05-06T02:52:12.101Z","_id":"clhsl7avl00042uv91n8t5gkt","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。</p>\n</blockquote>\n<p>LSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。</p>\n<span id=\"more\"></span>\n<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><h2 id=\"1-LSM-Tree-的缘起\"><a href=\"#1-LSM-Tree-的缘起\" class=\"headerlink\" title=\"1 LSM-Tree 的缘起\"></a>1 LSM-Tree 的缘起</h2><p>LSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。</p>\n<p>在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。</p>\n<p>由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。</p>\n<h2 id=\"2-LSM-Tree-的结构，以及主要流程\"><a href=\"#2-LSM-Tree-的结构，以及主要流程\" class=\"headerlink\" title=\"2 LSM-Tree 的结构，以及主要流程\"></a>2 LSM-Tree 的结构，以及主要流程</h2><p>LSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。</p>\n<p>两层 LSM-Tree 的结构如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png\" alt=\"tow-component-lsm\"></p>\n<p>上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。</p>\n<p>对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:</p>\n<ul>\n<li>insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。</li>\n<li>get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。</li>\n<li>delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i &amp; L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。</li>\n<li>update：update 可以看作是 delete&amp;insert 的组合</li>\n</ul>\n<p>LSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： </p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png\" alt=\"rolling-merge\"></p>\n<h2 id=\"3-LSM-Tree-相关的定量分析\"><a href=\"#3-LSM-Tree-相关的定量分析\" class=\"headerlink\" title=\"3 LSM-Tree 相关的定量分析\"></a>3 LSM-Tree 相关的定量分析</h2><p>上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。</p>\n<h3 id=\"双层-LSM-Tree-的-IO-定量分析\"><a href=\"#双层-LSM-Tree-的-IO-定量分析\" class=\"headerlink\" title=\"双层 LSM-Tree 的 IO 定量分析\"></a>双层 LSM-Tree 的 IO 定量分析</h3><p>本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。</p>\n<p>以下对比内容基于 1995 年的硬件架构：</p>\n<ul>\n<li>1MByte 内存需要 100$</li>\n<li>1MByte 磁盘的存储需要 1$</li>\n<li>随机访问 I/O 成本是 25$</li>\n<li>顺序访问的 I/O 成本是 2.5$</li>\n</ul>\n<p>同时为了后面描述方便，定义变量如下:</p>\n<ul>\n<li>$COST_d$ 表示磁盘存储 1MByte 所需要的成本</li>\n<li>$COST_m $ 表示内存中存储 1MByte 所需要的成本</li>\n<li>$ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）</li>\n<li>$ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）</li>\n</ul>\n<p>内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。</p>\n<p>假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S <em> COST_d, H </em> COST_P $，其中 $ S<em>COST_d $ 表示存储所需成本，$ H </em> COST_P $ 则表示随机 I/O 访问的成本。</p>\n<p>当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S <em> COST_m + S</em>COST_d $ 其中， $ S<em>COST_M $ 表示内存的成本，$ S</em>COST_d $ 表示磁盘的存储所需成本。</p>\n<p>综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：</p>\n<p>$ COST-TOT = min(max(S<em>COST_d, H</em>COST_P), S<em>COST_m + S</em>COST_d) $</p>\n<p>通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线</p>\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n<p>通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义</p>\n<ul>\n<li>$ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点</li>\n<li>$ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点</li>\n</ul>\n<blockquote>\n<p>对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。</p>\n</blockquote>\n<p>根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。</p>\n<p>根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），— 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。</p>\n<p>我们使用[3] 中的给的结论来计算 “五分钟规则” 的参考区间 —  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式</p>\n<ul>\n<li>$ \\frac{1}{ \\tau } <em> COST_P = pagesize </em> COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）</li>\n</ul>\n<p>那么 $ \\tau = (\\frac{1}{pagesize} <em> \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize </em> T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 <code>$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO</code>。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。</p>\n<h3 id=\"B-Tree-和-LSM-Tree-的定量分析对比\"><a href=\"#B-Tree-和-LSM-Tree-的定量分析对比\" class=\"headerlink\" title=\"B-Tree 和 LSM-Tree 的定量分析对比\"></a>B-Tree 和 LSM-Tree 的定量分析对比</h3><p>在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。</p>\n<h4 id=\"B-Tree-的定量分析\"><a href=\"#B-Tree-的定量分析\" class=\"headerlink\" title=\"B-Tree 的定量分析\"></a>B-Tree 的定量分析</h4><blockquote>\n<p>假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。</p>\n</blockquote>\n<p>根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示</p>\n<p>$ COST_{B-ins} = COST_P * (D_e + 1) $</p>\n<h4 id=\"LSM-的定量分析\"><a href=\"#LSM-的定量分析\" class=\"headerlink\" title=\"LSM 的定量分析\"></a>LSM 的定量分析</h4><p>由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。</p>\n<p>首先定义一些变量如下</p>\n<ul>\n<li>$ S_e $ 表示 entry（index entry） 的大小（byte 为单位）</li>\n<li>$ S_p $ 表示 page size 的大小（byte 为单位）</li>\n<li>$ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）</li>\n<li>$ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）</li>\n<li>M 表示 rolling merge 的过程中平均有多少个 entry 插入到 <strong>每个</strong> C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into <strong>each</strong> single page leaf node of the C1 tree during the rolling merge)</li>\n</ul>\n<p>每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。</p>\n<p>根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）</p>\n<p>$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）</p>\n<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><p>观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式</p>\n<p>$ COST_{LSM-ins} / COST_{B-ins} = K1 <em> (COST_{\\pi}/COST_{P}) </em> (1 / M) $  </p>\n<p>其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数</p>\n<p>上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。</p>\n<p>在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。</p>\n<h3 id=\"多-component-LSM-Tree-的分析\"><a href=\"#多-component-LSM-Tree-的分析\" class=\"headerlink\" title=\"多 component LSM-Tree 的分析\"></a>多 component LSM-Tree 的分析</h3><p>上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。</p>\n<blockquote>\n<p>为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。</p>\n</blockquote>\n<p>上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M &lt;= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M &lt; K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。</p>\n<p>为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。</p>\n<p>在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。</p>\n<p>下图是一个多层 LSM-Tree 的结构</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png\" alt=\"multi-component-lsm-tree\"></p>\n<p>对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, … C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。</p>\n<p>接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。</p>\n<p>首先定义一些在定量分析中需要的参数与假设</p>\n<ul>\n<li>$ S(C_i) $ — 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）</li>\n<li>$ S_i $ — 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$</li>\n<li>$ r_i = S_i / S_{i-1} $  — 表示相邻两层中的总大小比例</li>\n<li>S — 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$</li>\n<li>R — C0 接受到的插入速度（假设速度相对稳定），单位 byte/s</li>\n<li>每层的中数据量保持稳定，且接近该层的阈值</li>\n<li>每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry</li>\n<li>C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除</li>\n</ul>\n<p>假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定<br>问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。</p>\n<p>证明过程如下：</p>\n<ol>\n<li>由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。</li>\n<li>如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i <em> R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) </em> R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) <em> ((2 </em> r_1 + 1) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 2) + (2<em>r_K + 1)). 其中 $ (2 </em> r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i <em> R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)</em>R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)</li>\n<li>简化 H 后得到 $ H + (R / S_P) <em> ((2 </em> r_1 + 2) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $</li>\n<li>需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $</li>\n<li>也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。</li>\n<li>通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。</li>\n<li>在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）</li>\n</ol>\n<blockquote>\n<p>其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $。</p>\n</blockquote>\n<p>根据已知条件与上述证明可得</p>\n<ul>\n<li>$ S = S_0 + r <em> S_0 + r^2 </em> S_0 + … + r^K * S_0 $</li>\n<li>$ H = (2R / S_p)<em>(K </em> (1 + r) - 1/ 2) — 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小</li>\n</ul>\n<p>也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。</p>\n<p>可以使用两层 LSM-Tree 进行具体的推演<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两层的 LSM-Tree 中</span><br><span class=\"line\">- K = 1， r = S_1 / S_0</span><br><span class=\"line\">- H  = \\frac&#123;2R&#125;&#123;S_P&#125;(K*(1+r) - \\frac&#123;1&#125;&#123;2&#125;)</span><br><span class=\"line\">- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)</span><br><span class=\"line\">- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data</span><br><span class=\"line\">- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)</span><br><span class=\"line\">- C = COST_tot / (COST_d * S_1)</span><br><span class=\"line\"></span><br><span class=\"line\">当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) </span><br></pre></td></tr></table></figure></p>\n<p>其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。</p>\n<p>最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。</p>\n<blockquote>\n<p>个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。</p>\n</blockquote>\n<p>对于 t &lt; 1 的情况，s = t 的成本是最小的，但是 t &gt; 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2}（通过 C = 2<em>t^{1/2} 以及 C = COST_tot / (COST_d </em> S_1) 然后换算得到），也就是说当 t &gt; 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）</p>\n<p>对于 t &lt;= 1 的情况来说，C = s + 1 = t + 1 &lt;= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)</p>\n<h3 id=\"具体例子计算-B-Tree-和-LSM-Tree-的成本分析\"><a href=\"#具体例子计算-B-Tree-和-LSM-Tree-的成本分析\" class=\"headerlink\" title=\"具体例子计算 B-Tree 和 LSM-Tree 的成本分析\"></a>具体例子计算 B-Tree 和 LSM-Tree 的成本分析</h3><p>上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。</p>\n<p>1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）</li>\n<li>总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>如果使用 B-Tree 的话，成本如下</p>\n<ul>\n<li>由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 <em> 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 </em> 25$ = 50,000$</li>\n<li>然后非叶子节点需要缓存，具体的缓存成本计算如下<ul>\n<li>假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间</li>\n<li>64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $</li>\n<li>忽略其他一些细小的成本开销</li>\n</ul>\n</li>\n<li>B-Tree 的总成本 = 50000$ + 6400$ = 56400 $</li>\n</ul>\n<p>两层 LSM-Tree 的话，成本如下</p>\n<ul>\n<li>首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$</li>\n<li>根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s</li>\n<li>假设单 page 大小 4K 的情况下，根据 H 以及 H = (2<em>R/S_P)</em>(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb</li>\n<li>20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$</li>\n<li>总成本是 9200 + 2200 = 11400$</li>\n</ul>\n<p>大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右</p>\n<p>2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）</li>\n<li>576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>B-Tree 的情况下</p>\n<ul>\n<li>需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 <em> (160000 / 16)) </em> 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）</li>\n<li>buffer 非叶子节点的成本不变，也就是 6400$</li>\n<li>总成本 = 500,000$ + 6400$ = 506400$</li>\n</ul>\n<p>两层 LSM-Tree 的情况</p>\n<ul>\n<li>首先通过 t 的公式计算得到 t = 2<em>((R/S_p)/S_1)</em>(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 &gt; 1</li>\n<li>通过公式得到最低成本 = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存</li>\n<li>额外增加 2M 的内存用于 merge，200$ </li>\n<li>总成本 ~ 27329$</li>\n</ul>\n<p>对于三层 LSM-Tree 的情况</p>\n<ul>\n<li>C_2 需要 9.2G 存储，总成本 9.2<em>1000</em>1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700</li>\n<li>根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23</li>\n<li>C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$</li>\n<li>C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）</li>\n<li>另外增加 4MB 用于 rolling merge，也就是 400$</li>\n<li>总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$</li>\n</ul>\n<p>对比可知 三层 LSM 的成本（11700$） &lt; 两层 LSM 的成本（27329$） &lt; B-Tree 的成本（506400$）</p>\n<h2 id=\"4-未来可能的优化\"><a href=\"#4-未来可能的优化\" class=\"headerlink\" title=\"4 未来可能的优化\"></a>4 未来可能的优化</h2><ul>\n<li>为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）</li>\n<li>插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。</li>\n</ul>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.cs.umb.edu/~poneil/lsmtree.pdf\">The Log-Structured Merge-Tree (LSM-Tree)</a><br>[2] <a href=\"https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf\">The Five Minute Rule</a><br>[3] <a href=\"\">Database Buffer and Disk Configuring and the Battle of the Bottlenecks</a><br>[4] <a href=\"\">GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989</a>  </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。</p>\n</blockquote>\n<p>LSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。</p>","more":"<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><h2 id=\"1-LSM-Tree-的缘起\"><a href=\"#1-LSM-Tree-的缘起\" class=\"headerlink\" title=\"1 LSM-Tree 的缘起\"></a>1 LSM-Tree 的缘起</h2><p>LSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。</p>\n<p>在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。</p>\n<p>由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。</p>\n<h2 id=\"2-LSM-Tree-的结构，以及主要流程\"><a href=\"#2-LSM-Tree-的结构，以及主要流程\" class=\"headerlink\" title=\"2 LSM-Tree 的结构，以及主要流程\"></a>2 LSM-Tree 的结构，以及主要流程</h2><p>LSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。</p>\n<p>两层 LSM-Tree 的结构如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png\" alt=\"tow-component-lsm\"></p>\n<p>上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。</p>\n<p>对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:</p>\n<ul>\n<li>insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。</li>\n<li>get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。</li>\n<li>delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i &amp; L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。</li>\n<li>update：update 可以看作是 delete&amp;insert 的组合</li>\n</ul>\n<p>LSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： </p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png\" alt=\"rolling-merge\"></p>\n<h2 id=\"3-LSM-Tree-相关的定量分析\"><a href=\"#3-LSM-Tree-相关的定量分析\" class=\"headerlink\" title=\"3 LSM-Tree 相关的定量分析\"></a>3 LSM-Tree 相关的定量分析</h2><p>上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。</p>\n<h3 id=\"双层-LSM-Tree-的-IO-定量分析\"><a href=\"#双层-LSM-Tree-的-IO-定量分析\" class=\"headerlink\" title=\"双层 LSM-Tree 的 IO 定量分析\"></a>双层 LSM-Tree 的 IO 定量分析</h3><p>本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。</p>\n<p>以下对比内容基于 1995 年的硬件架构：</p>\n<ul>\n<li>1MByte 内存需要 100$</li>\n<li>1MByte 磁盘的存储需要 1$</li>\n<li>随机访问 I/O 成本是 25$</li>\n<li>顺序访问的 I/O 成本是 2.5$</li>\n</ul>\n<p>同时为了后面描述方便，定义变量如下:</p>\n<ul>\n<li>$COST_d$ 表示磁盘存储 1MByte 所需要的成本</li>\n<li>$COST_m $ 表示内存中存储 1MByte 所需要的成本</li>\n<li>$ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）</li>\n<li>$ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）</li>\n</ul>\n<p>内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。</p>\n<p>假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S <em> COST_d, H </em> COST_P $，其中 $ S<em>COST_d $ 表示存储所需成本，$ H </em> COST_P $ 则表示随机 I/O 访问的成本。</p>\n<p>当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S <em> COST_m + S</em>COST_d $ 其中， $ S<em>COST_M $ 表示内存的成本，$ S</em>COST_d $ 表示磁盘的存储所需成本。</p>\n<p>综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：</p>\n<p>$ COST-TOT = min(max(S<em>COST_d, H</em>COST_P), S<em>COST_m + S</em>COST_d) $</p>\n<p>通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线</p>\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n<p>通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义</p>\n<ul>\n<li>$ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点</li>\n<li>$ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点</li>\n</ul>\n<blockquote>\n<p>对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。</p>\n</blockquote>\n<p>根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。</p>\n<p>根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），— 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。</p>\n<p>我们使用[3] 中的给的结论来计算 “五分钟规则” 的参考区间 —  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式</p>\n<ul>\n<li>$ \\frac{1}{ \\tau } <em> COST_P = pagesize </em> COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）</li>\n</ul>\n<p>那么 $ \\tau = (\\frac{1}{pagesize} <em> \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize </em> T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 <code>$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO</code>。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。</p>\n<h3 id=\"B-Tree-和-LSM-Tree-的定量分析对比\"><a href=\"#B-Tree-和-LSM-Tree-的定量分析对比\" class=\"headerlink\" title=\"B-Tree 和 LSM-Tree 的定量分析对比\"></a>B-Tree 和 LSM-Tree 的定量分析对比</h3><p>在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。</p>\n<h4 id=\"B-Tree-的定量分析\"><a href=\"#B-Tree-的定量分析\" class=\"headerlink\" title=\"B-Tree 的定量分析\"></a>B-Tree 的定量分析</h4><blockquote>\n<p>假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。</p>\n</blockquote>\n<p>根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示</p>\n<p>$ COST_{B-ins} = COST_P * (D_e + 1) $</p>\n<h4 id=\"LSM-的定量分析\"><a href=\"#LSM-的定量分析\" class=\"headerlink\" title=\"LSM 的定量分析\"></a>LSM 的定量分析</h4><p>由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。</p>\n<p>首先定义一些变量如下</p>\n<ul>\n<li>$ S_e $ 表示 entry（index entry） 的大小（byte 为单位）</li>\n<li>$ S_p $ 表示 page size 的大小（byte 为单位）</li>\n<li>$ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）</li>\n<li>$ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）</li>\n<li>M 表示 rolling merge 的过程中平均有多少个 entry 插入到 <strong>每个</strong> C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into <strong>each</strong> single page leaf node of the C1 tree during the rolling merge)</li>\n</ul>\n<p>每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。</p>\n<p>根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）</p>\n<p>$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）</p>\n<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><p>观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式</p>\n<p>$ COST_{LSM-ins} / COST_{B-ins} = K1 <em> (COST_{\\pi}/COST_{P}) </em> (1 / M) $  </p>\n<p>其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数</p>\n<p>上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。</p>\n<p>在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。</p>\n<h3 id=\"多-component-LSM-Tree-的分析\"><a href=\"#多-component-LSM-Tree-的分析\" class=\"headerlink\" title=\"多 component LSM-Tree 的分析\"></a>多 component LSM-Tree 的分析</h3><p>上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。</p>\n<blockquote>\n<p>为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。</p>\n</blockquote>\n<p>上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M &lt;= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M &lt; K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。</p>\n<p>为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。</p>\n<p>在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。</p>\n<p>下图是一个多层 LSM-Tree 的结构</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png\" alt=\"multi-component-lsm-tree\"></p>\n<p>对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, … C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。</p>\n<p>接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。</p>\n<p>首先定义一些在定量分析中需要的参数与假设</p>\n<ul>\n<li>$ S(C_i) $ — 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）</li>\n<li>$ S_i $ — 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$</li>\n<li>$ r_i = S_i / S_{i-1} $  — 表示相邻两层中的总大小比例</li>\n<li>S — 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$</li>\n<li>R — C0 接受到的插入速度（假设速度相对稳定），单位 byte/s</li>\n<li>每层的中数据量保持稳定，且接近该层的阈值</li>\n<li>每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry</li>\n<li>C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除</li>\n</ul>\n<p>假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定<br>问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。</p>\n<p>证明过程如下：</p>\n<ol>\n<li>由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。</li>\n<li>如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i <em> R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) </em> R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) <em> ((2 </em> r_1 + 1) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 2) + (2<em>r_K + 1)). 其中 $ (2 </em> r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i <em> R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)</em>R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)</li>\n<li>简化 H 后得到 $ H + (R / S_P) <em> ((2 </em> r_1 + 2) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $</li>\n<li>需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $</li>\n<li>也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。</li>\n<li>通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。</li>\n<li>在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）</li>\n</ol>\n<blockquote>\n<p>其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $。</p>\n</blockquote>\n<p>根据已知条件与上述证明可得</p>\n<ul>\n<li>$ S = S_0 + r <em> S_0 + r^2 </em> S_0 + … + r^K * S_0 $</li>\n<li>$ H = (2R / S_p)<em>(K </em> (1 + r) - 1/ 2) — 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小</li>\n</ul>\n<p>也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。</p>\n<p>可以使用两层 LSM-Tree 进行具体的推演<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两层的 LSM-Tree 中</span><br><span class=\"line\">- K = 1， r = S_1 / S_0</span><br><span class=\"line\">- H  = \\frac&#123;2R&#125;&#123;S_P&#125;(K*(1+r) - \\frac&#123;1&#125;&#123;2&#125;)</span><br><span class=\"line\">- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)</span><br><span class=\"line\">- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data</span><br><span class=\"line\">- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)</span><br><span class=\"line\">- C = COST_tot / (COST_d * S_1)</span><br><span class=\"line\"></span><br><span class=\"line\">当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) </span><br></pre></td></tr></table></figure></p>\n<p>其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。</p>\n<p>最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。</p>\n<blockquote>\n<p>个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。</p>\n</blockquote>\n<p>对于 t &lt; 1 的情况，s = t 的成本是最小的，但是 t &gt; 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2}（通过 C = 2<em>t^{1/2} 以及 C = COST_tot / (COST_d </em> S_1) 然后换算得到），也就是说当 t &gt; 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）</p>\n<p>对于 t &lt;= 1 的情况来说，C = s + 1 = t + 1 &lt;= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)</p>\n<h3 id=\"具体例子计算-B-Tree-和-LSM-Tree-的成本分析\"><a href=\"#具体例子计算-B-Tree-和-LSM-Tree-的成本分析\" class=\"headerlink\" title=\"具体例子计算 B-Tree 和 LSM-Tree 的成本分析\"></a>具体例子计算 B-Tree 和 LSM-Tree 的成本分析</h3><p>上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。</p>\n<p>1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）</li>\n<li>总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>如果使用 B-Tree 的话，成本如下</p>\n<ul>\n<li>由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 <em> 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 </em> 25$ = 50,000$</li>\n<li>然后非叶子节点需要缓存，具体的缓存成本计算如下<ul>\n<li>假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间</li>\n<li>64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $</li>\n<li>忽略其他一些细小的成本开销</li>\n</ul>\n</li>\n<li>B-Tree 的总成本 = 50000$ + 6400$ = 56400 $</li>\n</ul>\n<p>两层 LSM-Tree 的话，成本如下</p>\n<ul>\n<li>首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$</li>\n<li>根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s</li>\n<li>假设单 page 大小 4K 的情况下，根据 H 以及 H = (2<em>R/S_P)</em>(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb</li>\n<li>20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$</li>\n<li>总成本是 9200 + 2200 = 11400$</li>\n</ul>\n<p>大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右</p>\n<p>2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）</li>\n<li>576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>B-Tree 的情况下</p>\n<ul>\n<li>需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 <em> (160000 / 16)) </em> 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）</li>\n<li>buffer 非叶子节点的成本不变，也就是 6400$</li>\n<li>总成本 = 500,000$ + 6400$ = 506400$</li>\n</ul>\n<p>两层 LSM-Tree 的情况</p>\n<ul>\n<li>首先通过 t 的公式计算得到 t = 2<em>((R/S_p)/S_1)</em>(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 &gt; 1</li>\n<li>通过公式得到最低成本 = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存</li>\n<li>额外增加 2M 的内存用于 merge，200$ </li>\n<li>总成本 ~ 27329$</li>\n</ul>\n<p>对于三层 LSM-Tree 的情况</p>\n<ul>\n<li>C_2 需要 9.2G 存储，总成本 9.2<em>1000</em>1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700</li>\n<li>根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23</li>\n<li>C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$</li>\n<li>C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）</li>\n<li>另外增加 4MB 用于 rolling merge，也就是 400$</li>\n<li>总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$</li>\n</ul>\n<p>对比可知 三层 LSM 的成本（11700$） &lt; 两层 LSM 的成本（27329$） &lt; B-Tree 的成本（506400$）</p>\n<h2 id=\"4-未来可能的优化\"><a href=\"#4-未来可能的优化\" class=\"headerlink\" title=\"4 未来可能的优化\"></a>4 未来可能的优化</h2><ul>\n<li>为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）</li>\n<li>插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。</li>\n</ul>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.cs.umb.edu/~poneil/lsmtree.pdf\">The Log-Structured Merge-Tree (LSM-Tree)</a><br>[2] <a href=\"https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf\">The Five Minute Rule</a><br>[3] <a href=\"\">Database Buffer and Disk Configuring and the Battle of the Bottlenecks</a><br>[4] <a href=\"\">GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989</a>  </p>"},{"title":"big_data_paper_big_picture","date":"2022-04-16T04:40:34.000Z","_content":"\n\n# 大数据全局认识：回到过去，展望未来\n\n\n大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。\n\n全局认识的数据集以及\n论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；\n插入一张自动分析得到的图片\n\n人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的\n\n阅读论文摘要的过程，有几个特别深刻\n\n论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择\n\n\n\n[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）","source":"_drafts/big-data-paper-big-picture.md","raw":"---\ntitle: big_data_paper_big_picture\ndate: 2022-04-16 12:40:34\ntags: 大数据, 全局认识, 偏见, 论文, 系统\n---\n\n\n# 大数据全局认识：回到过去，展望未来\n\n\n大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。\n\n全局认识的数据集以及\n论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；\n插入一张自动分析得到的图片\n\n人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的\n\n阅读论文摘要的过程，有几个特别深刻\n\n论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择\n\n\n\n[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）","slug":"big-data-paper-big-picture","published":0,"updated":"2025-01-02T08:20:49.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5f2gbxw0000y8mk40oneky3","content":"<h1 id=\"大数据全局认识：回到过去，展望未来\"><a href=\"#大数据全局认识：回到过去，展望未来\" class=\"headerlink\" title=\"大数据全局认识：回到过去，展望未来\"></a>大数据全局认识：回到过去，展望未来</h1><p>大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。</p>\n<p>全局认识的数据集以及<br>论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；<br>插入一张自动分析得到的图片</p>\n<p>人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的</p>\n<p>阅读论文摘要的过程，有几个特别深刻</p>\n<p>论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择</p>\n<p>[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"大数据全局认识：回到过去，展望未来\"><a href=\"#大数据全局认识：回到过去，展望未来\" class=\"headerlink\" title=\"大数据全局认识：回到过去，展望未来\"></a>大数据全局认识：回到过去，展望未来</h1><p>大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。</p>\n<p>全局认识的数据集以及<br>论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；<br>插入一张自动分析得到的图片</p>\n<p>人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的</p>\n<p>阅读论文摘要的过程，有几个特别深刻</p>\n<p>论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择</p>\n<p>[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）</p>\n"},{"title":"maotai-basic","toc":true,"_content":"\n> 本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。\n\n茅台的香型有三种典型体 -- 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]\n- 酱香体：具有酱香味，且味感优雅细腻\n- 窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。\n- 醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。\n\n<!-- more -->\n\n茅台酒有多个独特的作法：\n- 茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期\n- 茅台酒全年生产用料--高粱，要在两个月内两次投完。\n- 茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。\n- 茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。\n- 成熟了的曲药要经过 6 个月以上的贮存才能使用。\n- 茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。\n- 同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。\n- 生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。\n\n\n茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png)\n\n\n因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。\n\n陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。\n\n茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。\n\n堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。\n\n茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。\n\n制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：\n- 生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。\n- 制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。\n- 制曲温度高在 60 摄氏度以上，俗称高温大曲。\n在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。\n\n白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。\n\n茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。\n\n制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png)\n\n- 第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）\n- 由于基酒不好喝，因此需要陈酿。\n  - 基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）\n  - 盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）\n- 精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。\n\n\n茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。\n\n茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。\n\n\n系列酒\n- 2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。\n- 2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。\n- 系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935\n\n\n公司的经营模式：采购原料 -- 生产产品-- 销售产品。\n原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；\n产品生产工艺流程为：制曲 -- 制酒 -- 贮存 -- 勾兑 -- 包装\n销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。\n\n# Ref\n[1] https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\n","source":"_posts/maotai-basic-2025-02-08.md","raw":"---\ntitle: maotai-basic\ntags: \n    - stock\n    - maotai\n    - company-analysis\n    - wine\ntoc: true\n---\n\n> 本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。\n\n茅台的香型有三种典型体 -- 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]\n- 酱香体：具有酱香味，且味感优雅细腻\n- 窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。\n- 醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。\n\n<!-- more -->\n\n茅台酒有多个独特的作法：\n- 茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期\n- 茅台酒全年生产用料--高粱，要在两个月内两次投完。\n- 茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。\n- 茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。\n- 成熟了的曲药要经过 6 个月以上的贮存才能使用。\n- 茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。\n- 同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。\n- 生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。\n\n\n茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png)\n\n\n因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。\n\n陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。\n\n茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。\n\n堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。\n\n茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。\n\n制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：\n- 生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。\n- 制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。\n- 制曲温度高在 60 摄氏度以上，俗称高温大曲。\n在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。\n\n白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。\n\n茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。\n\n制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png)\n\n- 第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）\n- 由于基酒不好喝，因此需要陈酿。\n  - 基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）\n  - 盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）\n- 精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。\n\n\n茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。\n\n茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。\n\n\n系列酒\n- 2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。\n- 2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。\n- 系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935\n\n\n公司的经营模式：采购原料 -- 生产产品-- 销售产品。\n原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；\n产品生产工艺流程为：制曲 -- 制酒 -- 贮存 -- 勾兑 -- 包装\n销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。\n\n# Ref\n[1] https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\n","slug":"maotai-basic-2025-02-08","published":1,"date":"2025-02-22T08:33:34.889Z","updated":"2025-02-22T08:33:34.890Z","_id":"cm7esg5hw0000dhjo0zq785ir","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。</p>\n</blockquote>\n<p>茅台的香型有三种典型体 — 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]</p>\n<ul>\n<li>酱香体：具有酱香味，且味感优雅细腻</li>\n<li>窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。</li>\n<li>醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。</li>\n</ul>\n<span id=\"more\"></span>\n<p>茅台酒有多个独特的作法：</p>\n<ul>\n<li>茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期</li>\n<li>茅台酒全年生产用料—高粱，要在两个月内两次投完。</li>\n<li>茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。</li>\n<li>茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。</li>\n<li>成熟了的曲药要经过 6 个月以上的贮存才能使用。</li>\n<li>茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。</li>\n<li>同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。</li>\n<li>生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。</li>\n</ul>\n<p>茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png\" alt=\"\"></p>\n<p>因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。</p>\n<p>陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。</p>\n<p>茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。</p>\n<p>堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。</p>\n<p>茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。</p>\n<p>制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：</p>\n<ul>\n<li>生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。</li>\n<li>制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。</li>\n<li>制曲温度高在 60 摄氏度以上，俗称高温大曲。<br>在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。</li>\n</ul>\n<p>白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。</p>\n<p>茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。</p>\n<p>制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png\" alt=\"\"></p>\n<ul>\n<li>第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）</li>\n<li>由于基酒不好喝，因此需要陈酿。<ul>\n<li>基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）</li>\n<li>盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）</li>\n</ul>\n</li>\n<li>精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。</li>\n</ul>\n<p>茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。</p>\n<p>茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。</p>\n<p>系列酒</p>\n<ul>\n<li>2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。</li>\n<li>2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。</li>\n<li>系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935</li>\n</ul>\n<p>公司的经营模式：采购原料 — 生产产品— 销售产品。<br>原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；<br>产品生产工艺流程为：制曲 — 制酒 — 贮存 — 勾兑 — 包装<br>销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\">https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。</p>\n</blockquote>\n<p>茅台的香型有三种典型体 — 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]</p>\n<ul>\n<li>酱香体：具有酱香味，且味感优雅细腻</li>\n<li>窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。</li>\n<li>醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。</li>\n</ul>","more":"<p>茅台酒有多个独特的作法：</p>\n<ul>\n<li>茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期</li>\n<li>茅台酒全年生产用料—高粱，要在两个月内两次投完。</li>\n<li>茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。</li>\n<li>茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。</li>\n<li>成熟了的曲药要经过 6 个月以上的贮存才能使用。</li>\n<li>茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。</li>\n<li>同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。</li>\n<li>生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。</li>\n</ul>\n<p>茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png\" alt=\"\"></p>\n<p>因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。</p>\n<p>陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。</p>\n<p>茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。</p>\n<p>堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。</p>\n<p>茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。</p>\n<p>制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：</p>\n<ul>\n<li>生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。</li>\n<li>制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。</li>\n<li>制曲温度高在 60 摄氏度以上，俗称高温大曲。<br>在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。</li>\n</ul>\n<p>白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。</p>\n<p>茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。</p>\n<p>制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png\" alt=\"\"></p>\n<ul>\n<li>第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）</li>\n<li>由于基酒不好喝，因此需要陈酿。<ul>\n<li>基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）</li>\n<li>盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）</li>\n</ul>\n</li>\n<li>精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。</li>\n</ul>\n<p>茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。</p>\n<p>茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。</p>\n<p>系列酒</p>\n<ul>\n<li>2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。</li>\n<li>2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。</li>\n<li>系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935</li>\n</ul>\n<p>公司的经营模式：采购原料 — 生产产品— 销售产品。<br>原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；<br>产品生产工艺流程为：制曲 — 制酒 — 贮存 — 勾兑 — 包装<br>销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\">https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html</a></p>"},{"_content":"主要描述 dblog 和 flinkcdc 中的实现。\n\n怎么从 db 中无锁同步数据（无锁主要是不需要锁整个表）\n\n","source":"_drafts/sync-data-without-lock.md","raw":"主要描述 dblog 和 flinkcdc 中的实现。\n\n怎么从 db 中无锁同步数据（无锁主要是不需要锁整个表）\n\n","slug":"sync-data-without-lock","published":0,"date":"2025-03-16T07:09:23.093Z","updated":"2025-03-16T07:09:23.094Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cm8l8efli0000cjjl48dyc4fz","content":"<p>主要描述 dblog 和 flinkcdc 中的实现。</p>\n<p>怎么从 db 中无锁同步数据（无锁主要是不需要锁整个表）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主要描述 dblog 和 flinkcdc 中的实现。</p>\n<p>怎么从 db 中无锁同步数据（无锁主要是不需要锁整个表）</p>\n"},{"title":"40 questions to ask yourself every year","toc":true,"_content":"\n尝试从 2025 开始每年回答一下 40 个问题[1]，作为一年的回顾\n\n<!-- more -->\n\n# What did you do this year that you’d never done before?\n# Did you keep your new year’s resolutions?\n# Did anyone close to you give birth?\n\n# Did anyone close to you die?\n没有\n\n# What cities/states/countries did you visit?\n在北京周边（河北），去了一趟泰山\n\n# What would you like to have next year that you lacked this year?\n\n# What date(s) from this year will remain etched upon your memory, and why?\n# What was your biggest achievement of the year?\n- 职业相关的（title 变成副总监，成为 Apache Amoro PPMC member）\n- 陪家人的时间更多了一些\n# What was your biggest failure?\n- \n# What other hardships did you face?\n- 还是不够自由\n\n# Did you suffer illness or injury?\n身体暂时还行\n\n# What was the best thing you bought?\n# Whose behavior merited celebration?\n# Whose behavior made you appalled?\n# Where did most of your money go?\n- 投资（这个是消费还是？）\n\n# What did you get really, really, really excited about?\n- 对投资的理解上了一个台阶\n\n# What song will always remind you of this year?\n# Compared to this time last year, are you: happier or sadder? Thinner or fatter? Richer or poorer?\n- happier / fatter / richer\n\n# What do you wish you’d done more of?\n- 锻炼\n- 陪家人\n- 商业理解\n\n# What do you wish you’d done less of?\n# How are you spending the holidays?\n# Did you fall in love this year?\n\n# Do you hate anyone now that you didn’t hate this time last year?\n- 有不喜欢的，但不至于 hate\n\n# What was your favorite show?\n# What was the best book you read?\n- 段永平 投资相关的数据。让我了解了一部分商业模式：差异化 = 用户需要但是提供商暂未提供的\n\n# What was your greatest musical discovery of the year?\n# What was your favorite film?\n# What was your favorite meal?\n# What did you want and get?\n# What did you want and not get?\n# What did you do on your birthday?\n# What one thing would have made your year immeasurably more satisfying?\n# How would you describe your personal fashion this year?\n# What kept you sane?\n# Which celebrity/public figure did you admire the most?\n# What political issue stirred you the most?\n# Who did you miss?\n# Who was the best new person you met?\n# What valuable life lesson did you learn this year?\n# What is a quote that sums up your year?\n\n# Ref\n[1] https://stephango.com/40-questions\n","source":"_drafts/40-questions-2024.md","raw":"---\ntitle: 40 questions to ask yourself every year\ntags:\n    - review\n    - question\ntoc: true\n---\n\n尝试从 2025 开始每年回答一下 40 个问题[1]，作为一年的回顾\n\n<!-- more -->\n\n# What did you do this year that you’d never done before?\n# Did you keep your new year’s resolutions?\n# Did anyone close to you give birth?\n\n# Did anyone close to you die?\n没有\n\n# What cities/states/countries did you visit?\n在北京周边（河北），去了一趟泰山\n\n# What would you like to have next year that you lacked this year?\n\n# What date(s) from this year will remain etched upon your memory, and why?\n# What was your biggest achievement of the year?\n- 职业相关的（title 变成副总监，成为 Apache Amoro PPMC member）\n- 陪家人的时间更多了一些\n# What was your biggest failure?\n- \n# What other hardships did you face?\n- 还是不够自由\n\n# Did you suffer illness or injury?\n身体暂时还行\n\n# What was the best thing you bought?\n# Whose behavior merited celebration?\n# Whose behavior made you appalled?\n# Where did most of your money go?\n- 投资（这个是消费还是？）\n\n# What did you get really, really, really excited about?\n- 对投资的理解上了一个台阶\n\n# What song will always remind you of this year?\n# Compared to this time last year, are you: happier or sadder? Thinner or fatter? Richer or poorer?\n- happier / fatter / richer\n\n# What do you wish you’d done more of?\n- 锻炼\n- 陪家人\n- 商业理解\n\n# What do you wish you’d done less of?\n# How are you spending the holidays?\n# Did you fall in love this year?\n\n# Do you hate anyone now that you didn’t hate this time last year?\n- 有不喜欢的，但不至于 hate\n\n# What was your favorite show?\n# What was the best book you read?\n- 段永平 投资相关的数据。让我了解了一部分商业模式：差异化 = 用户需要但是提供商暂未提供的\n\n# What was your greatest musical discovery of the year?\n# What was your favorite film?\n# What was your favorite meal?\n# What did you want and get?\n# What did you want and not get?\n# What did you do on your birthday?\n# What one thing would have made your year immeasurably more satisfying?\n# How would you describe your personal fashion this year?\n# What kept you sane?\n# Which celebrity/public figure did you admire the most?\n# What political issue stirred you the most?\n# Who did you miss?\n# Who was the best new person you met?\n# What valuable life lesson did you learn this year?\n# What is a quote that sums up your year?\n\n# Ref\n[1] https://stephango.com/40-questions\n","slug":"40-questions-2024","published":0,"date":"2025-03-13T11:00:05.294Z","updated":"2025-03-13T11:00:05.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm8l8eflp0001cjjl80sl72n6","content":"<p>尝试从 2025 开始每年回答一下 40 个问题[1]，作为一年的回顾</p>\n<span id=\"more\"></span>\n<h1 id=\"What-did-you-do-this-year-that-you’d-never-done-before\"><a href=\"#What-did-you-do-this-year-that-you’d-never-done-before\" class=\"headerlink\" title=\"What did you do this year that you’d never done before?\"></a>What did you do this year that you’d never done before?</h1><h1 id=\"Did-you-keep-your-new-year’s-resolutions\"><a href=\"#Did-you-keep-your-new-year’s-resolutions\" class=\"headerlink\" title=\"Did you keep your new year’s resolutions?\"></a>Did you keep your new year’s resolutions?</h1><h1 id=\"Did-anyone-close-to-you-give-birth\"><a href=\"#Did-anyone-close-to-you-give-birth\" class=\"headerlink\" title=\"Did anyone close to you give birth?\"></a>Did anyone close to you give birth?</h1><h1 id=\"Did-anyone-close-to-you-die\"><a href=\"#Did-anyone-close-to-you-die\" class=\"headerlink\" title=\"Did anyone close to you die?\"></a>Did anyone close to you die?</h1><p>没有</p>\n<h1 id=\"What-cities-states-countries-did-you-visit\"><a href=\"#What-cities-states-countries-did-you-visit\" class=\"headerlink\" title=\"What cities/states/countries did you visit?\"></a>What cities/states/countries did you visit?</h1><p>在北京周边（河北），去了一趟泰山</p>\n<h1 id=\"What-would-you-like-to-have-next-year-that-you-lacked-this-year\"><a href=\"#What-would-you-like-to-have-next-year-that-you-lacked-this-year\" class=\"headerlink\" title=\"What would you like to have next year that you lacked this year?\"></a>What would you like to have next year that you lacked this year?</h1><h1 id=\"What-date-s-from-this-year-will-remain-etched-upon-your-memory-and-why\"><a href=\"#What-date-s-from-this-year-will-remain-etched-upon-your-memory-and-why\" class=\"headerlink\" title=\"What date(s) from this year will remain etched upon your memory, and why?\"></a>What date(s) from this year will remain etched upon your memory, and why?</h1><h1 id=\"What-was-your-biggest-achievement-of-the-year\"><a href=\"#What-was-your-biggest-achievement-of-the-year\" class=\"headerlink\" title=\"What was your biggest achievement of the year?\"></a>What was your biggest achievement of the year?</h1><ul>\n<li>职业相关的（title 变成副总监，成为 Apache Amoro PPMC member）</li>\n<li>陪家人的时间更多了一些<h1 id=\"What-was-your-biggest-failure\"><a href=\"#What-was-your-biggest-failure\" class=\"headerlink\" title=\"What was your biggest failure?\"></a>What was your biggest failure?</h1></li>\n<li><h1 id=\"What-other-hardships-did-you-face\"><a href=\"#What-other-hardships-did-you-face\" class=\"headerlink\" title=\"What other hardships did you face?\"></a>What other hardships did you face?</h1></li>\n<li>还是不够自由</li>\n</ul>\n<h1 id=\"Did-you-suffer-illness-or-injury\"><a href=\"#Did-you-suffer-illness-or-injury\" class=\"headerlink\" title=\"Did you suffer illness or injury?\"></a>Did you suffer illness or injury?</h1><p>身体暂时还行</p>\n<h1 id=\"What-was-the-best-thing-you-bought\"><a href=\"#What-was-the-best-thing-you-bought\" class=\"headerlink\" title=\"What was the best thing you bought?\"></a>What was the best thing you bought?</h1><h1 id=\"Whose-behavior-merited-celebration\"><a href=\"#Whose-behavior-merited-celebration\" class=\"headerlink\" title=\"Whose behavior merited celebration?\"></a>Whose behavior merited celebration?</h1><h1 id=\"Whose-behavior-made-you-appalled\"><a href=\"#Whose-behavior-made-you-appalled\" class=\"headerlink\" title=\"Whose behavior made you appalled?\"></a>Whose behavior made you appalled?</h1><h1 id=\"Where-did-most-of-your-money-go\"><a href=\"#Where-did-most-of-your-money-go\" class=\"headerlink\" title=\"Where did most of your money go?\"></a>Where did most of your money go?</h1><ul>\n<li>投资（这个是消费还是？）</li>\n</ul>\n<h1 id=\"What-did-you-get-really-really-really-excited-about\"><a href=\"#What-did-you-get-really-really-really-excited-about\" class=\"headerlink\" title=\"What did you get really, really, really excited about?\"></a>What did you get really, really, really excited about?</h1><ul>\n<li>对投资的理解上了一个台阶</li>\n</ul>\n<h1 id=\"What-song-will-always-remind-you-of-this-year\"><a href=\"#What-song-will-always-remind-you-of-this-year\" class=\"headerlink\" title=\"What song will always remind you of this year?\"></a>What song will always remind you of this year?</h1><h1 id=\"Compared-to-this-time-last-year-are-you-happier-or-sadder-Thinner-or-fatter-Richer-or-poorer\"><a href=\"#Compared-to-this-time-last-year-are-you-happier-or-sadder-Thinner-or-fatter-Richer-or-poorer\" class=\"headerlink\" title=\"Compared to this time last year, are you: happier or sadder? Thinner or fatter? Richer or poorer?\"></a>Compared to this time last year, are you: happier or sadder? Thinner or fatter? Richer or poorer?</h1><ul>\n<li>happier / fatter / richer</li>\n</ul>\n<h1 id=\"What-do-you-wish-you’d-done-more-of\"><a href=\"#What-do-you-wish-you’d-done-more-of\" class=\"headerlink\" title=\"What do you wish you’d done more of?\"></a>What do you wish you’d done more of?</h1><ul>\n<li>锻炼</li>\n<li>陪家人</li>\n<li>商业理解</li>\n</ul>\n<h1 id=\"What-do-you-wish-you’d-done-less-of\"><a href=\"#What-do-you-wish-you’d-done-less-of\" class=\"headerlink\" title=\"What do you wish you’d done less of?\"></a>What do you wish you’d done less of?</h1><h1 id=\"How-are-you-spending-the-holidays\"><a href=\"#How-are-you-spending-the-holidays\" class=\"headerlink\" title=\"How are you spending the holidays?\"></a>How are you spending the holidays?</h1><h1 id=\"Did-you-fall-in-love-this-year\"><a href=\"#Did-you-fall-in-love-this-year\" class=\"headerlink\" title=\"Did you fall in love this year?\"></a>Did you fall in love this year?</h1><h1 id=\"Do-you-hate-anyone-now-that-you-didn’t-hate-this-time-last-year\"><a href=\"#Do-you-hate-anyone-now-that-you-didn’t-hate-this-time-last-year\" class=\"headerlink\" title=\"Do you hate anyone now that you didn’t hate this time last year?\"></a>Do you hate anyone now that you didn’t hate this time last year?</h1><ul>\n<li>有不喜欢的，但不至于 hate</li>\n</ul>\n<h1 id=\"What-was-your-favorite-show\"><a href=\"#What-was-your-favorite-show\" class=\"headerlink\" title=\"What was your favorite show?\"></a>What was your favorite show?</h1><h1 id=\"What-was-the-best-book-you-read\"><a href=\"#What-was-the-best-book-you-read\" class=\"headerlink\" title=\"What was the best book you read?\"></a>What was the best book you read?</h1><ul>\n<li>段永平 投资相关的数据。让我了解了一部分商业模式：差异化 = 用户需要但是提供商暂未提供的</li>\n</ul>\n<h1 id=\"What-was-your-greatest-musical-discovery-of-the-year\"><a href=\"#What-was-your-greatest-musical-discovery-of-the-year\" class=\"headerlink\" title=\"What was your greatest musical discovery of the year?\"></a>What was your greatest musical discovery of the year?</h1><h1 id=\"What-was-your-favorite-film\"><a href=\"#What-was-your-favorite-film\" class=\"headerlink\" title=\"What was your favorite film?\"></a>What was your favorite film?</h1><h1 id=\"What-was-your-favorite-meal\"><a href=\"#What-was-your-favorite-meal\" class=\"headerlink\" title=\"What was your favorite meal?\"></a>What was your favorite meal?</h1><h1 id=\"What-did-you-want-and-get\"><a href=\"#What-did-you-want-and-get\" class=\"headerlink\" title=\"What did you want and get?\"></a>What did you want and get?</h1><h1 id=\"What-did-you-want-and-not-get\"><a href=\"#What-did-you-want-and-not-get\" class=\"headerlink\" title=\"What did you want and not get?\"></a>What did you want and not get?</h1><h1 id=\"What-did-you-do-on-your-birthday\"><a href=\"#What-did-you-do-on-your-birthday\" class=\"headerlink\" title=\"What did you do on your birthday?\"></a>What did you do on your birthday?</h1><h1 id=\"What-one-thing-would-have-made-your-year-immeasurably-more-satisfying\"><a href=\"#What-one-thing-would-have-made-your-year-immeasurably-more-satisfying\" class=\"headerlink\" title=\"What one thing would have made your year immeasurably more satisfying?\"></a>What one thing would have made your year immeasurably more satisfying?</h1><h1 id=\"How-would-you-describe-your-personal-fashion-this-year\"><a href=\"#How-would-you-describe-your-personal-fashion-this-year\" class=\"headerlink\" title=\"How would you describe your personal fashion this year?\"></a>How would you describe your personal fashion this year?</h1><h1 id=\"What-kept-you-sane\"><a href=\"#What-kept-you-sane\" class=\"headerlink\" title=\"What kept you sane?\"></a>What kept you sane?</h1><h1 id=\"Which-celebrity-public-figure-did-you-admire-the-most\"><a href=\"#Which-celebrity-public-figure-did-you-admire-the-most\" class=\"headerlink\" title=\"Which celebrity/public figure did you admire the most?\"></a>Which celebrity/public figure did you admire the most?</h1><h1 id=\"What-political-issue-stirred-you-the-most\"><a href=\"#What-political-issue-stirred-you-the-most\" class=\"headerlink\" title=\"What political issue stirred you the most?\"></a>What political issue stirred you the most?</h1><h1 id=\"Who-did-you-miss\"><a href=\"#Who-did-you-miss\" class=\"headerlink\" title=\"Who did you miss?\"></a>Who did you miss?</h1><h1 id=\"Who-was-the-best-new-person-you-met\"><a href=\"#Who-was-the-best-new-person-you-met\" class=\"headerlink\" title=\"Who was the best new person you met?\"></a>Who was the best new person you met?</h1><h1 id=\"What-valuable-life-lesson-did-you-learn-this-year\"><a href=\"#What-valuable-life-lesson-did-you-learn-this-year\" class=\"headerlink\" title=\"What valuable life lesson did you learn this year?\"></a>What valuable life lesson did you learn this year?</h1><h1 id=\"What-is-a-quote-that-sums-up-your-year\"><a href=\"#What-is-a-quote-that-sums-up-your-year\" class=\"headerlink\" title=\"What is a quote that sums up your year?\"></a>What is a quote that sums up your year?</h1><h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://stephango.com/40-questions\">https://stephango.com/40-questions</a></p>\n","site":{"data":{}},"excerpt":"<p>尝试从 2025 开始每年回答一下 40 个问题[1]，作为一年的回顾</p>","more":"<h1 id=\"What-did-you-do-this-year-that-you’d-never-done-before\"><a href=\"#What-did-you-do-this-year-that-you’d-never-done-before\" class=\"headerlink\" title=\"What did you do this year that you’d never done before?\"></a>What did you do this year that you’d never done before?</h1><h1 id=\"Did-you-keep-your-new-year’s-resolutions\"><a href=\"#Did-you-keep-your-new-year’s-resolutions\" class=\"headerlink\" title=\"Did you keep your new year’s resolutions?\"></a>Did you keep your new year’s resolutions?</h1><h1 id=\"Did-anyone-close-to-you-give-birth\"><a href=\"#Did-anyone-close-to-you-give-birth\" class=\"headerlink\" title=\"Did anyone close to you give birth?\"></a>Did anyone close to you give birth?</h1><h1 id=\"Did-anyone-close-to-you-die\"><a href=\"#Did-anyone-close-to-you-die\" class=\"headerlink\" title=\"Did anyone close to you die?\"></a>Did anyone close to you die?</h1><p>没有</p>\n<h1 id=\"What-cities-states-countries-did-you-visit\"><a href=\"#What-cities-states-countries-did-you-visit\" class=\"headerlink\" title=\"What cities/states/countries did you visit?\"></a>What cities/states/countries did you visit?</h1><p>在北京周边（河北），去了一趟泰山</p>\n<h1 id=\"What-would-you-like-to-have-next-year-that-you-lacked-this-year\"><a href=\"#What-would-you-like-to-have-next-year-that-you-lacked-this-year\" class=\"headerlink\" title=\"What would you like to have next year that you lacked this year?\"></a>What would you like to have next year that you lacked this year?</h1><h1 id=\"What-date-s-from-this-year-will-remain-etched-upon-your-memory-and-why\"><a href=\"#What-date-s-from-this-year-will-remain-etched-upon-your-memory-and-why\" class=\"headerlink\" title=\"What date(s) from this year will remain etched upon your memory, and why?\"></a>What date(s) from this year will remain etched upon your memory, and why?</h1><h1 id=\"What-was-your-biggest-achievement-of-the-year\"><a href=\"#What-was-your-biggest-achievement-of-the-year\" class=\"headerlink\" title=\"What was your biggest achievement of the year?\"></a>What was your biggest achievement of the year?</h1><ul>\n<li>职业相关的（title 变成副总监，成为 Apache Amoro PPMC member）</li>\n<li>陪家人的时间更多了一些<h1 id=\"What-was-your-biggest-failure\"><a href=\"#What-was-your-biggest-failure\" class=\"headerlink\" title=\"What was your biggest failure?\"></a>What was your biggest failure?</h1></li>\n<li><h1 id=\"What-other-hardships-did-you-face\"><a href=\"#What-other-hardships-did-you-face\" class=\"headerlink\" title=\"What other hardships did you face?\"></a>What other hardships did you face?</h1></li>\n<li>还是不够自由</li>\n</ul>\n<h1 id=\"Did-you-suffer-illness-or-injury\"><a href=\"#Did-you-suffer-illness-or-injury\" class=\"headerlink\" title=\"Did you suffer illness or injury?\"></a>Did you suffer illness or injury?</h1><p>身体暂时还行</p>\n<h1 id=\"What-was-the-best-thing-you-bought\"><a href=\"#What-was-the-best-thing-you-bought\" class=\"headerlink\" title=\"What was the best thing you bought?\"></a>What was the best thing you bought?</h1><h1 id=\"Whose-behavior-merited-celebration\"><a href=\"#Whose-behavior-merited-celebration\" class=\"headerlink\" title=\"Whose behavior merited celebration?\"></a>Whose behavior merited celebration?</h1><h1 id=\"Whose-behavior-made-you-appalled\"><a href=\"#Whose-behavior-made-you-appalled\" class=\"headerlink\" title=\"Whose behavior made you appalled?\"></a>Whose behavior made you appalled?</h1><h1 id=\"Where-did-most-of-your-money-go\"><a href=\"#Where-did-most-of-your-money-go\" class=\"headerlink\" title=\"Where did most of your money go?\"></a>Where did most of your money go?</h1><ul>\n<li>投资（这个是消费还是？）</li>\n</ul>\n<h1 id=\"What-did-you-get-really-really-really-excited-about\"><a href=\"#What-did-you-get-really-really-really-excited-about\" class=\"headerlink\" title=\"What did you get really, really, really excited about?\"></a>What did you get really, really, really excited about?</h1><ul>\n<li>对投资的理解上了一个台阶</li>\n</ul>\n<h1 id=\"What-song-will-always-remind-you-of-this-year\"><a href=\"#What-song-will-always-remind-you-of-this-year\" class=\"headerlink\" title=\"What song will always remind you of this year?\"></a>What song will always remind you of this year?</h1><h1 id=\"Compared-to-this-time-last-year-are-you-happier-or-sadder-Thinner-or-fatter-Richer-or-poorer\"><a href=\"#Compared-to-this-time-last-year-are-you-happier-or-sadder-Thinner-or-fatter-Richer-or-poorer\" class=\"headerlink\" title=\"Compared to this time last year, are you: happier or sadder? Thinner or fatter? Richer or poorer?\"></a>Compared to this time last year, are you: happier or sadder? Thinner or fatter? Richer or poorer?</h1><ul>\n<li>happier / fatter / richer</li>\n</ul>\n<h1 id=\"What-do-you-wish-you’d-done-more-of\"><a href=\"#What-do-you-wish-you’d-done-more-of\" class=\"headerlink\" title=\"What do you wish you’d done more of?\"></a>What do you wish you’d done more of?</h1><ul>\n<li>锻炼</li>\n<li>陪家人</li>\n<li>商业理解</li>\n</ul>\n<h1 id=\"What-do-you-wish-you’d-done-less-of\"><a href=\"#What-do-you-wish-you’d-done-less-of\" class=\"headerlink\" title=\"What do you wish you’d done less of?\"></a>What do you wish you’d done less of?</h1><h1 id=\"How-are-you-spending-the-holidays\"><a href=\"#How-are-you-spending-the-holidays\" class=\"headerlink\" title=\"How are you spending the holidays?\"></a>How are you spending the holidays?</h1><h1 id=\"Did-you-fall-in-love-this-year\"><a href=\"#Did-you-fall-in-love-this-year\" class=\"headerlink\" title=\"Did you fall in love this year?\"></a>Did you fall in love this year?</h1><h1 id=\"Do-you-hate-anyone-now-that-you-didn’t-hate-this-time-last-year\"><a href=\"#Do-you-hate-anyone-now-that-you-didn’t-hate-this-time-last-year\" class=\"headerlink\" title=\"Do you hate anyone now that you didn’t hate this time last year?\"></a>Do you hate anyone now that you didn’t hate this time last year?</h1><ul>\n<li>有不喜欢的，但不至于 hate</li>\n</ul>\n<h1 id=\"What-was-your-favorite-show\"><a href=\"#What-was-your-favorite-show\" class=\"headerlink\" title=\"What was your favorite show?\"></a>What was your favorite show?</h1><h1 id=\"What-was-the-best-book-you-read\"><a href=\"#What-was-the-best-book-you-read\" class=\"headerlink\" title=\"What was the best book you read?\"></a>What was the best book you read?</h1><ul>\n<li>段永平 投资相关的数据。让我了解了一部分商业模式：差异化 = 用户需要但是提供商暂未提供的</li>\n</ul>\n<h1 id=\"What-was-your-greatest-musical-discovery-of-the-year\"><a href=\"#What-was-your-greatest-musical-discovery-of-the-year\" class=\"headerlink\" title=\"What was your greatest musical discovery of the year?\"></a>What was your greatest musical discovery of the year?</h1><h1 id=\"What-was-your-favorite-film\"><a href=\"#What-was-your-favorite-film\" class=\"headerlink\" title=\"What was your favorite film?\"></a>What was your favorite film?</h1><h1 id=\"What-was-your-favorite-meal\"><a href=\"#What-was-your-favorite-meal\" class=\"headerlink\" title=\"What was your favorite meal?\"></a>What was your favorite meal?</h1><h1 id=\"What-did-you-want-and-get\"><a href=\"#What-did-you-want-and-get\" class=\"headerlink\" title=\"What did you want and get?\"></a>What did you want and get?</h1><h1 id=\"What-did-you-want-and-not-get\"><a href=\"#What-did-you-want-and-not-get\" class=\"headerlink\" title=\"What did you want and not get?\"></a>What did you want and not get?</h1><h1 id=\"What-did-you-do-on-your-birthday\"><a href=\"#What-did-you-do-on-your-birthday\" class=\"headerlink\" title=\"What did you do on your birthday?\"></a>What did you do on your birthday?</h1><h1 id=\"What-one-thing-would-have-made-your-year-immeasurably-more-satisfying\"><a href=\"#What-one-thing-would-have-made-your-year-immeasurably-more-satisfying\" class=\"headerlink\" title=\"What one thing would have made your year immeasurably more satisfying?\"></a>What one thing would have made your year immeasurably more satisfying?</h1><h1 id=\"How-would-you-describe-your-personal-fashion-this-year\"><a href=\"#How-would-you-describe-your-personal-fashion-this-year\" class=\"headerlink\" title=\"How would you describe your personal fashion this year?\"></a>How would you describe your personal fashion this year?</h1><h1 id=\"What-kept-you-sane\"><a href=\"#What-kept-you-sane\" class=\"headerlink\" title=\"What kept you sane?\"></a>What kept you sane?</h1><h1 id=\"Which-celebrity-public-figure-did-you-admire-the-most\"><a href=\"#Which-celebrity-public-figure-did-you-admire-the-most\" class=\"headerlink\" title=\"Which celebrity/public figure did you admire the most?\"></a>Which celebrity/public figure did you admire the most?</h1><h1 id=\"What-political-issue-stirred-you-the-most\"><a href=\"#What-political-issue-stirred-you-the-most\" class=\"headerlink\" title=\"What political issue stirred you the most?\"></a>What political issue stirred you the most?</h1><h1 id=\"Who-did-you-miss\"><a href=\"#Who-did-you-miss\" class=\"headerlink\" title=\"Who did you miss?\"></a>Who did you miss?</h1><h1 id=\"Who-was-the-best-new-person-you-met\"><a href=\"#Who-was-the-best-new-person-you-met\" class=\"headerlink\" title=\"Who was the best new person you met?\"></a>Who was the best new person you met?</h1><h1 id=\"What-valuable-life-lesson-did-you-learn-this-year\"><a href=\"#What-valuable-life-lesson-did-you-learn-this-year\" class=\"headerlink\" title=\"What valuable life lesson did you learn this year?\"></a>What valuable life lesson did you learn this year?</h1><h1 id=\"What-is-a-quote-that-sums-up-your-year\"><a href=\"#What-is-a-quote-that-sums-up-your-year\" class=\"headerlink\" title=\"What is a quote that sums up your year?\"></a>What is a quote that sums up your year?</h1><h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://stephango.com/40-questions\">https://stephango.com/40-questions</a></p>"},{"title":"maotai-input-output","date":"2025-03-16T08:53:32.000Z","toc":true,"_content":"\n本文尝试更详细的分析茅台以及所在行业的一些指标信息，希望对茅台是否赚钱，以及赚钱后是否能够归属小股东等有一个大体的认识，也希望能够更好的了解应该关注公司哪些指标以及信息。\n\n<!--more-->\n\n对于股东来说，主要关注一个公司两点\n1. 公司业务是否赚钱\n2. 公司业务赚钱之后，是否都归属于股份有限公司（股东所有)\n\n# 茅台的业务\n\n茅台的业务主要是卖酒，在茅台酒的整条链路中，大致如下所示\n\n[原材料提供商] --原材料--> [茅台股份有限公司]  --酒--> [直销/经销商] (--酒--> [终端销售]) --酒--> [终端客户]\n\n其中 [终端销售] 这一环节可能没有，比如在直销或者电商等渠道\n\n国信证券梳理[2]的销售渠道以及相关价格如下所示（2023 年出厂价涨价前）\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231410651.png)\n\n涨价后，大致修改如下所示\n- 原材料提供商\n  - 茅台股份有限公司\n    - [直销] i茅台/数字营销平台  <-- 零售指导价 1499\n    - 茅台销售公司\n      - [经销] 一级经销商  <-- 拿酒成本是 出厂价 1199\n        - 终端销售  <-- 一批价 按照[2] 大概 2300\n          - 客户    <-- 实际购买价  散装大概 2600[3]，会持续有变动\n    - 商超  <--  1399 参考国信证券数据[2]\n    - 电商  <--  1399 参考国信证券数据[2]\n    - 团购  <-- 零售指导价 1499\n\n其中出厂价是固定的(1199)，零售指导价是固定的(1499)，批价和终端价会随着市场需求的变动而变化。如果终端需求多，终端价会增加，从而会提高批价，反之则会导致终端价和批价下降。\n\n其中出厂价/建议零售价/商超/电商/团购的 基本固定（变动周期较长），经销商相关的的销售链路，其中 [终端价] 和 [批价] 的差异为终端销售的利润，[批价] 和 [出厂价] 的差异则是经销商的利润。如果这两个利润过低甚至变负，则会影响整条链路上的整体酒销售。\n\n下图展示了经销商在过去几年中的利润空间变化（其中灰色的区域是渠道利润，红色是出厂价，蓝色是批价）[2]\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504021431926.png)\n\n# 茅台是否赚钱\n茅台的整体业务比较简单，主要是卖酒，然后还有部分金融业务。\n\n首先看下最近几年的营收和成本，如下图所示\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231446109.png)\n\n上图中可以看出几点\n- 利润主要来自于营业收入 -- 也就是卖酒。\n- 营业收入最近几年逐年增加\n- 营业成本的增长率和营业收入的增长率差不多\n\n其中营业收入拆开来看的情况如下图所示\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231417076.png)\n\n从图中可以看到\n- 最多的成本是税及附加 -- 由于税率固定，这部分是卖的越多，税越多\n- 营业成本逐年增加，但是增加的没有税多\n- 管理费用/销售费用 逐年增加，但是增加不是很多，整体占比也不是很多\n\n另外从不同角度查看营业收入的情况。\n\n茅台酒和系列酒的情况（单位：百万）\n\n| 年份 | 茅台酒(占比/较上年涨幅) | 系列酒(占比/较上年涨幅) |\n| -- | -- | -- |\n| 2023 | 126589(85.9%/17.6%) | 20629(14.1%/29.4%) |\n| 2022 | 107833(87.1%/15.3%) | 15938(12.9%/26.5%) |\n| 2021 | 93464(88.1%/10.1%) | 12594(11.9%/26%) |\n| 2020 | 84830(89.4%/11.9%) | 9991(10.6%/4.7%) |\n| 2019 | 75802(88.8%/15.7%) | 9542(11.2%/18.2%) |\n\n经销和直销的收入情况（单位：百万）\n\n| 年份 | 经销（占比/较上年涨幅) | 直销（占比/较上年涨幅）|\n| -- | -- | -- |\n| 2023 | 7998611.94(54.33%/7.5%) | 6723287.69(45.67%/36.15%) |\n| 2022 | 7439359.47(60.10%/-9.4%) | 4937873.77(39.9%/105%) |\n| 2021 | 8202992(77.34%/0.5%) | 2402936(22.66%/81.48%) |\n| 2020 | 8158164.26(86.03%/377%) | 1324035.65(13.97%/82.6%) |\n| 2019 | 7809590.86(91.5%/-) | 724865.97(8.5%/-) |\n\n经销和直销的酒量情况（单位：吨）\n\n| 年份 | 经销（占比/较上年涨幅) | 直销（占比/较上年涨幅）|\n| -- | -- | -- |\n| 2023 | 57639.09(78.66%/1.1%) | 15634.95(21.34%/39.76%) |\n| 2022 | 56989.75(83.59%/-6.1%) | 11186.57(16.41%/95.04%) |\n| 2021 | 60702.99(91.36%/0.9%) | 5735.70(8.64%/45.85%) |\n| 2020 | 60123.8(93.86%/-3.01%)  | 3932.08(6.14%/48.32%) |\n| 2019 | 61993.46(95.89%/-) | 2651.84(4.11%/-) |\n\n从上面的数据可以看到，经销的量基本没有太大变化，总收入稍微有些增长；直销的量和收入均有比较大的增长。\n\n国内和国外销售情况（单位：百万），暂时国内销售占主要比例\n\n| 年份 | 国内（占比/较上年涨幅) | 国外（占比/较上年涨幅）|\n| -- | -- | -- |\n| 2023 | 142868(97%/19.5%) | 4350(3%/2.6%) |\n| 2022 | 119532(96.5%/15.5%) | 4239(3.5%/61.9%) |\n| 2021 | 103440(97.5%/11.9%) | 2618(2.5%/7.6%) |\n| 2020 | 92389(97.4%/12%) | 2432(2.6%/-16.8%) |\n| 2019 | 82424(96.5%/16.6%) | 2920(3.5%/0.9%) |\n\n接下来查看预收账款（单位：百万）相关的情况 -- 经销售需要预打款才能买到货（这个也变相的说明茅台不愁销量 -- 这里的销量和终端销售公司的销量不完全是一个概念），可以每年有百亿级别的预收账款\n\n| 年份 | 预售款（增长） |\n| -- | -- |\n| 2023 | 14,125(-8.7%) |\n| 2022 | 15,471(21.64%) |\n| 2021 | 12,718(4.5%) | \n| 2020 | 13,321(-3.0% |\n| 2019 | 13,740(-) |\n\n\n然后再看下不同类型酒的销售额（单位：十亿），以及涨幅如下。从数据可以看出来，白酒持续在增长，但是其他类型酒的销售额则有不同类型的波动。\n\n| 年份 | 白酒（涨幅) | 啤酒（涨幅）| 葡萄酒（涨幅）|黄酒（涨幅）|\n| -- | -- | -- | -- | -- |\n| 2023 | 756(19.5%) | 186.3(8.6%) | 9(4.8%) | 21(2.1%) |\n| 2022 | 662(9.64%) | 175.1(10.1%) | 9.1(-2.91%) | 1.2(-24.3%)|\n| 2021 | 603(18.6%) | 158.4(7.91%) | 9(-9.79%) | 12.7(-5.24%) |\n| 2020 | 583(4.61%) | 146.8(-6.12%) | 10(-29.82%) | 13.4(-20.18%) |\n| 2019 | 561(8.2%) | 158(4.8%) | 14.5(17.5%) | 17.3(2.7%) |\n\n然后查看茅台酒和系列酒占整个白酒的销售收入情况如下（单位十亿），可以看出茅台酒和系列酒的收入在缓慢上升。\n\n| 年份 | 白酒（较上年涨幅) | 茅台酒（占比）| 系列酒（占比）|\n| -- | -- | -- | -- | -- |\n| 2023 | 756(19.5%) | 126.5(16.7%) | 20.6(2.7%) |\n| 2022 | 662(9.64%) | 107.8(16.2%) | 15.9(2.4%) |\n| 2021 | 603(18.6%) | 93.4(15.4%) | 12.5(2.0%) |\n| 2020 | 583(4.61%) | 84.8(14.5%) | 9.9(1.6%) |\n| 2019 | 561(8.2%) | 75.8(13.5%) | 9.5(1.6%) |\n\n另外由中酒协披露 2023 年酒业数据[4] 可知，白酒销量在减少，但整体实现营收不断上升，白酒整体逐步迈向高端化。\n\n# 收益归属\n\n接下来查看相关归属情况\n\n我们看下以茅台股份有限公司为中心视角的一些公司情况\n\n- 中国贵州茅台酒厂（集团）有限责任公司  54.07%\n- 香港中央结算有限公司  6.45%\n- 贵州国有资本运营有限责任公司  4.64%\n- 贵州茅台酒厂（集团）技术开发有限公司 2.22%\n- 中国工商银行-上证50交易型开放式指数证券投资基金 1.01%\n- 中国工商银行股份有限公司-华泰柏瑞沪深300交易型开放式指数证券投资基金 0.91%\n- 中央汇金资产管理有限公司 0.83%\n- 中国证券金融股份有限责任公司 0.64%\n- 中国建设银行股份有限公司-易方达沪深300交易型开放式指数发起式证券投资基金 0.61%\n- 中国人寿保险股份有限公司-传统-普通保险产品-005L-CT001沪 0.44%\n  - 贵州茅台酒股份有限公司\n    - 贵州茅台酱香酒营销有限公司 100%\n    - 贵州茅台酒销售有限公司 95%\n    - 北京友谊使者商贸有限公司 70%\n    - 国酒茅台定制营销（贵州）有限公司 70%\n    - 贵州茅台酒进出口有限责任公司 70%\n    - 贵州茅台集团财务有限公司 51%\n    - 贵州赖茅酒业有限公司 43%\n    - 贵州金石（贵州）产业发展基金合伙企业（有限公司）\n    - 茅台招华（贵州）产业发展基金合伙企业（有限合伙）\n\n其中「茅台股份有限责任公司」的收益是所有股东共享的，也就是说该公司的利润普通股东是有份的。\n\n如果有部分利益从「贵州茅台酒股份有限公司」移到其他地方，则会有损小股东的权益，比如 2009 年成立的 茅台销售公司成立是大家所担心的那样 --  后来茅台股份公司回应统一按照出厂价较会议，不影响股份有限公司的收。\n\n那么另外有一个问题，这部分归属于小股东的权益，怎么保证实实在在会给到小股东呢？是否有可能造成大股东替小股东决策，然后导致大股东占小股东便宜的事情呢，这个在后续加上分红相关的一起描述。\n\n# 总结\n从本文我们可以看出，作为茅台股份有限公司的股东来说，主要关心的一些点\n- 茅台酒的利润情况：这个和酒的质量、销量、价格等有关\n- 茅台酒的利润归属：是否有相关收益从股份公司移到了其他公司，归属在茅台股份公司的利益是否都分给所有股东了 -- 主要是小股东\n\n第一点来说主要有公司的商业模式决定，茅台酒（白酒）的商业模式好，不愁卖（有很多预收款），对上下游均有定价权，且进入门槛/口味等拥有一定的差异化，因此在可预见的未来。在之前的文章 [茅台是一个好的投资标的吗] 以及[茅台的成本分析] 中也有一些相关分析。\n\n第二点主要从历史以及公司的透明度等情况来进行分析，另外后面会尝试从分红等角度来进行一些分析。\n\n\n# 其他\nQ: 茅台的销量能持续吗？未来很多年轻人可能不喝白酒了？酒是有害物品\nA: 关于这个问题，大致思考是这样的：整体白酒的销量不太确定，但是茅台的销量暂时看不太会受影响\n1. 人不仅仅是为了健康（比如吸烟），还会考虑快乐 \n2. 通过和一些常喝酒的人沟通，酒会有用户粘性（至少到类似香型），不会因为稍微涨价而喝其他的。另外茅台在整体白酒中占比也还较低\n3. 茅台有一定的送礼/面子 属性在里面，这属于文化的一种，只要相关文化不变，就需要一种载体，茅台现在充当这个载体，载体是一个群体共识，共识的改变会比较难。\n\n\n\n[1] https://echarts.apache.org/examples/en/editor.html?c=bar-negative\n[2] https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf\n[3] https://m.cls.cn/detail/712100\n[4] https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html\n","source":"_posts/maotai-input-output.md","raw":"---\ntitle: maotai-input-output\ndate: 2025-03-16 16:53:32\ntags:\n    - stock\n    - maotai\n    - profit\n    - cost\ntoc: true\n---\n\n本文尝试更详细的分析茅台以及所在行业的一些指标信息，希望对茅台是否赚钱，以及赚钱后是否能够归属小股东等有一个大体的认识，也希望能够更好的了解应该关注公司哪些指标以及信息。\n\n<!--more-->\n\n对于股东来说，主要关注一个公司两点\n1. 公司业务是否赚钱\n2. 公司业务赚钱之后，是否都归属于股份有限公司（股东所有)\n\n# 茅台的业务\n\n茅台的业务主要是卖酒，在茅台酒的整条链路中，大致如下所示\n\n[原材料提供商] --原材料--> [茅台股份有限公司]  --酒--> [直销/经销商] (--酒--> [终端销售]) --酒--> [终端客户]\n\n其中 [终端销售] 这一环节可能没有，比如在直销或者电商等渠道\n\n国信证券梳理[2]的销售渠道以及相关价格如下所示（2023 年出厂价涨价前）\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231410651.png)\n\n涨价后，大致修改如下所示\n- 原材料提供商\n  - 茅台股份有限公司\n    - [直销] i茅台/数字营销平台  <-- 零售指导价 1499\n    - 茅台销售公司\n      - [经销] 一级经销商  <-- 拿酒成本是 出厂价 1199\n        - 终端销售  <-- 一批价 按照[2] 大概 2300\n          - 客户    <-- 实际购买价  散装大概 2600[3]，会持续有变动\n    - 商超  <--  1399 参考国信证券数据[2]\n    - 电商  <--  1399 参考国信证券数据[2]\n    - 团购  <-- 零售指导价 1499\n\n其中出厂价是固定的(1199)，零售指导价是固定的(1499)，批价和终端价会随着市场需求的变动而变化。如果终端需求多，终端价会增加，从而会提高批价，反之则会导致终端价和批价下降。\n\n其中出厂价/建议零售价/商超/电商/团购的 基本固定（变动周期较长），经销商相关的的销售链路，其中 [终端价] 和 [批价] 的差异为终端销售的利润，[批价] 和 [出厂价] 的差异则是经销商的利润。如果这两个利润过低甚至变负，则会影响整条链路上的整体酒销售。\n\n下图展示了经销商在过去几年中的利润空间变化（其中灰色的区域是渠道利润，红色是出厂价，蓝色是批价）[2]\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504021431926.png)\n\n# 茅台是否赚钱\n茅台的整体业务比较简单，主要是卖酒，然后还有部分金融业务。\n\n首先看下最近几年的营收和成本，如下图所示\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231446109.png)\n\n上图中可以看出几点\n- 利润主要来自于营业收入 -- 也就是卖酒。\n- 营业收入最近几年逐年增加\n- 营业成本的增长率和营业收入的增长率差不多\n\n其中营业收入拆开来看的情况如下图所示\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231417076.png)\n\n从图中可以看到\n- 最多的成本是税及附加 -- 由于税率固定，这部分是卖的越多，税越多\n- 营业成本逐年增加，但是增加的没有税多\n- 管理费用/销售费用 逐年增加，但是增加不是很多，整体占比也不是很多\n\n另外从不同角度查看营业收入的情况。\n\n茅台酒和系列酒的情况（单位：百万）\n\n| 年份 | 茅台酒(占比/较上年涨幅) | 系列酒(占比/较上年涨幅) |\n| -- | -- | -- |\n| 2023 | 126589(85.9%/17.6%) | 20629(14.1%/29.4%) |\n| 2022 | 107833(87.1%/15.3%) | 15938(12.9%/26.5%) |\n| 2021 | 93464(88.1%/10.1%) | 12594(11.9%/26%) |\n| 2020 | 84830(89.4%/11.9%) | 9991(10.6%/4.7%) |\n| 2019 | 75802(88.8%/15.7%) | 9542(11.2%/18.2%) |\n\n经销和直销的收入情况（单位：百万）\n\n| 年份 | 经销（占比/较上年涨幅) | 直销（占比/较上年涨幅）|\n| -- | -- | -- |\n| 2023 | 7998611.94(54.33%/7.5%) | 6723287.69(45.67%/36.15%) |\n| 2022 | 7439359.47(60.10%/-9.4%) | 4937873.77(39.9%/105%) |\n| 2021 | 8202992(77.34%/0.5%) | 2402936(22.66%/81.48%) |\n| 2020 | 8158164.26(86.03%/377%) | 1324035.65(13.97%/82.6%) |\n| 2019 | 7809590.86(91.5%/-) | 724865.97(8.5%/-) |\n\n经销和直销的酒量情况（单位：吨）\n\n| 年份 | 经销（占比/较上年涨幅) | 直销（占比/较上年涨幅）|\n| -- | -- | -- |\n| 2023 | 57639.09(78.66%/1.1%) | 15634.95(21.34%/39.76%) |\n| 2022 | 56989.75(83.59%/-6.1%) | 11186.57(16.41%/95.04%) |\n| 2021 | 60702.99(91.36%/0.9%) | 5735.70(8.64%/45.85%) |\n| 2020 | 60123.8(93.86%/-3.01%)  | 3932.08(6.14%/48.32%) |\n| 2019 | 61993.46(95.89%/-) | 2651.84(4.11%/-) |\n\n从上面的数据可以看到，经销的量基本没有太大变化，总收入稍微有些增长；直销的量和收入均有比较大的增长。\n\n国内和国外销售情况（单位：百万），暂时国内销售占主要比例\n\n| 年份 | 国内（占比/较上年涨幅) | 国外（占比/较上年涨幅）|\n| -- | -- | -- |\n| 2023 | 142868(97%/19.5%) | 4350(3%/2.6%) |\n| 2022 | 119532(96.5%/15.5%) | 4239(3.5%/61.9%) |\n| 2021 | 103440(97.5%/11.9%) | 2618(2.5%/7.6%) |\n| 2020 | 92389(97.4%/12%) | 2432(2.6%/-16.8%) |\n| 2019 | 82424(96.5%/16.6%) | 2920(3.5%/0.9%) |\n\n接下来查看预收账款（单位：百万）相关的情况 -- 经销售需要预打款才能买到货（这个也变相的说明茅台不愁销量 -- 这里的销量和终端销售公司的销量不完全是一个概念），可以每年有百亿级别的预收账款\n\n| 年份 | 预售款（增长） |\n| -- | -- |\n| 2023 | 14,125(-8.7%) |\n| 2022 | 15,471(21.64%) |\n| 2021 | 12,718(4.5%) | \n| 2020 | 13,321(-3.0% |\n| 2019 | 13,740(-) |\n\n\n然后再看下不同类型酒的销售额（单位：十亿），以及涨幅如下。从数据可以看出来，白酒持续在增长，但是其他类型酒的销售额则有不同类型的波动。\n\n| 年份 | 白酒（涨幅) | 啤酒（涨幅）| 葡萄酒（涨幅）|黄酒（涨幅）|\n| -- | -- | -- | -- | -- |\n| 2023 | 756(19.5%) | 186.3(8.6%) | 9(4.8%) | 21(2.1%) |\n| 2022 | 662(9.64%) | 175.1(10.1%) | 9.1(-2.91%) | 1.2(-24.3%)|\n| 2021 | 603(18.6%) | 158.4(7.91%) | 9(-9.79%) | 12.7(-5.24%) |\n| 2020 | 583(4.61%) | 146.8(-6.12%) | 10(-29.82%) | 13.4(-20.18%) |\n| 2019 | 561(8.2%) | 158(4.8%) | 14.5(17.5%) | 17.3(2.7%) |\n\n然后查看茅台酒和系列酒占整个白酒的销售收入情况如下（单位十亿），可以看出茅台酒和系列酒的收入在缓慢上升。\n\n| 年份 | 白酒（较上年涨幅) | 茅台酒（占比）| 系列酒（占比）|\n| -- | -- | -- | -- | -- |\n| 2023 | 756(19.5%) | 126.5(16.7%) | 20.6(2.7%) |\n| 2022 | 662(9.64%) | 107.8(16.2%) | 15.9(2.4%) |\n| 2021 | 603(18.6%) | 93.4(15.4%) | 12.5(2.0%) |\n| 2020 | 583(4.61%) | 84.8(14.5%) | 9.9(1.6%) |\n| 2019 | 561(8.2%) | 75.8(13.5%) | 9.5(1.6%) |\n\n另外由中酒协披露 2023 年酒业数据[4] 可知，白酒销量在减少，但整体实现营收不断上升，白酒整体逐步迈向高端化。\n\n# 收益归属\n\n接下来查看相关归属情况\n\n我们看下以茅台股份有限公司为中心视角的一些公司情况\n\n- 中国贵州茅台酒厂（集团）有限责任公司  54.07%\n- 香港中央结算有限公司  6.45%\n- 贵州国有资本运营有限责任公司  4.64%\n- 贵州茅台酒厂（集团）技术开发有限公司 2.22%\n- 中国工商银行-上证50交易型开放式指数证券投资基金 1.01%\n- 中国工商银行股份有限公司-华泰柏瑞沪深300交易型开放式指数证券投资基金 0.91%\n- 中央汇金资产管理有限公司 0.83%\n- 中国证券金融股份有限责任公司 0.64%\n- 中国建设银行股份有限公司-易方达沪深300交易型开放式指数发起式证券投资基金 0.61%\n- 中国人寿保险股份有限公司-传统-普通保险产品-005L-CT001沪 0.44%\n  - 贵州茅台酒股份有限公司\n    - 贵州茅台酱香酒营销有限公司 100%\n    - 贵州茅台酒销售有限公司 95%\n    - 北京友谊使者商贸有限公司 70%\n    - 国酒茅台定制营销（贵州）有限公司 70%\n    - 贵州茅台酒进出口有限责任公司 70%\n    - 贵州茅台集团财务有限公司 51%\n    - 贵州赖茅酒业有限公司 43%\n    - 贵州金石（贵州）产业发展基金合伙企业（有限公司）\n    - 茅台招华（贵州）产业发展基金合伙企业（有限合伙）\n\n其中「茅台股份有限责任公司」的收益是所有股东共享的，也就是说该公司的利润普通股东是有份的。\n\n如果有部分利益从「贵州茅台酒股份有限公司」移到其他地方，则会有损小股东的权益，比如 2009 年成立的 茅台销售公司成立是大家所担心的那样 --  后来茅台股份公司回应统一按照出厂价较会议，不影响股份有限公司的收。\n\n那么另外有一个问题，这部分归属于小股东的权益，怎么保证实实在在会给到小股东呢？是否有可能造成大股东替小股东决策，然后导致大股东占小股东便宜的事情呢，这个在后续加上分红相关的一起描述。\n\n# 总结\n从本文我们可以看出，作为茅台股份有限公司的股东来说，主要关心的一些点\n- 茅台酒的利润情况：这个和酒的质量、销量、价格等有关\n- 茅台酒的利润归属：是否有相关收益从股份公司移到了其他公司，归属在茅台股份公司的利益是否都分给所有股东了 -- 主要是小股东\n\n第一点来说主要有公司的商业模式决定，茅台酒（白酒）的商业模式好，不愁卖（有很多预收款），对上下游均有定价权，且进入门槛/口味等拥有一定的差异化，因此在可预见的未来。在之前的文章 [茅台是一个好的投资标的吗] 以及[茅台的成本分析] 中也有一些相关分析。\n\n第二点主要从历史以及公司的透明度等情况来进行分析，另外后面会尝试从分红等角度来进行一些分析。\n\n\n# 其他\nQ: 茅台的销量能持续吗？未来很多年轻人可能不喝白酒了？酒是有害物品\nA: 关于这个问题，大致思考是这样的：整体白酒的销量不太确定，但是茅台的销量暂时看不太会受影响\n1. 人不仅仅是为了健康（比如吸烟），还会考虑快乐 \n2. 通过和一些常喝酒的人沟通，酒会有用户粘性（至少到类似香型），不会因为稍微涨价而喝其他的。另外茅台在整体白酒中占比也还较低\n3. 茅台有一定的送礼/面子 属性在里面，这属于文化的一种，只要相关文化不变，就需要一种载体，茅台现在充当这个载体，载体是一个群体共识，共识的改变会比较难。\n\n\n\n[1] https://echarts.apache.org/examples/en/editor.html?c=bar-negative\n[2] https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf\n[3] https://m.cls.cn/detail/712100\n[4] https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html\n","slug":"maotai-input-output","published":1,"updated":"2025-04-03T01:18:09.647Z","_id":"cm8zliwkd000atkmk0i722o2i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文尝试更详细的分析茅台以及所在行业的一些指标信息，希望对茅台是否赚钱，以及赚钱后是否能够归属小股东等有一个大体的认识，也希望能够更好的了解应该关注公司哪些指标以及信息。</p>\n<span id=\"more\"></span>\n<p>对于股东来说，主要关注一个公司两点</p>\n<ol>\n<li>公司业务是否赚钱</li>\n<li>公司业务赚钱之后，是否都归属于股份有限公司（股东所有)</li>\n</ol>\n<h1 id=\"茅台的业务\"><a href=\"#茅台的业务\" class=\"headerlink\" title=\"茅台的业务\"></a>茅台的业务</h1><p>茅台的业务主要是卖酒，在茅台酒的整条链路中，大致如下所示</p>\n<p>[原材料提供商] —原材料—&gt; [茅台股份有限公司]  —酒—&gt; [直销/经销商] (—酒—&gt; [终端销售]) —酒—&gt; [终端客户]</p>\n<p>其中 [终端销售] 这一环节可能没有，比如在直销或者电商等渠道</p>\n<p>国信证券梳理[2]的销售渠道以及相关价格如下所示（2023 年出厂价涨价前）</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231410651.png\" alt=\"\"></p>\n<p>涨价后，大致修改如下所示</p>\n<ul>\n<li>原材料提供商<ul>\n<li>茅台股份有限公司<ul>\n<li>[直销] i茅台/数字营销平台  &lt;— 零售指导价 1499</li>\n<li>茅台销售公司<ul>\n<li>[经销] 一级经销商  &lt;— 拿酒成本是 出厂价 1199<ul>\n<li>终端销售  &lt;— 一批价 按照[2] 大概 2300<ul>\n<li>客户    &lt;— 实际购买价  散装大概 2600[3]，会持续有变动</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>商超  &lt;—  1399 参考国信证券数据[2]</li>\n<li>电商  &lt;—  1399 参考国信证券数据[2]</li>\n<li>团购  &lt;— 零售指导价 1499</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>其中出厂价是固定的(1199)，零售指导价是固定的(1499)，批价和终端价会随着市场需求的变动而变化。如果终端需求多，终端价会增加，从而会提高批价，反之则会导致终端价和批价下降。</p>\n<p>其中出厂价/建议零售价/商超/电商/团购的 基本固定（变动周期较长），经销商相关的的销售链路，其中 [终端价] 和 [批价] 的差异为终端销售的利润，[批价] 和 [出厂价] 的差异则是经销商的利润。如果这两个利润过低甚至变负，则会影响整条链路上的整体酒销售。</p>\n<p>下图展示了经销商在过去几年中的利润空间变化（其中灰色的区域是渠道利润，红色是出厂价，蓝色是批价）[2]</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504021431926.png\" alt=\"\"></p>\n<h1 id=\"茅台是否赚钱\"><a href=\"#茅台是否赚钱\" class=\"headerlink\" title=\"茅台是否赚钱\"></a>茅台是否赚钱</h1><p>茅台的整体业务比较简单，主要是卖酒，然后还有部分金融业务。</p>\n<p>首先看下最近几年的营收和成本，如下图所示<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231446109.png\" alt=\"\"></p>\n<p>上图中可以看出几点</p>\n<ul>\n<li>利润主要来自于营业收入 — 也就是卖酒。</li>\n<li>营业收入最近几年逐年增加</li>\n<li>营业成本的增长率和营业收入的增长率差不多</li>\n</ul>\n<p>其中营业收入拆开来看的情况如下图所示<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231417076.png\" alt=\"\"></p>\n<p>从图中可以看到</p>\n<ul>\n<li>最多的成本是税及附加 — 由于税率固定，这部分是卖的越多，税越多</li>\n<li>营业成本逐年增加，但是增加的没有税多</li>\n<li>管理费用/销售费用 逐年增加，但是增加不是很多，整体占比也不是很多</li>\n</ul>\n<p>另外从不同角度查看营业收入的情况。</p>\n<p>茅台酒和系列酒的情况（单位：百万）</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>茅台酒(占比/较上年涨幅)</th>\n<th>系列酒(占比/较上年涨幅)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>126589(85.9%/17.6%)</td>\n<td>20629(14.1%/29.4%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>107833(87.1%/15.3%)</td>\n<td>15938(12.9%/26.5%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>93464(88.1%/10.1%)</td>\n<td>12594(11.9%/26%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>84830(89.4%/11.9%)</td>\n<td>9991(10.6%/4.7%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>75802(88.8%/15.7%)</td>\n<td>9542(11.2%/18.2%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>经销和直销的收入情况（单位：百万）</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>经销（占比/较上年涨幅)</th>\n<th>直销（占比/较上年涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>7998611.94(54.33%/7.5%)</td>\n<td>6723287.69(45.67%/36.15%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>7439359.47(60.10%/-9.4%)</td>\n<td>4937873.77(39.9%/105%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>8202992(77.34%/0.5%)</td>\n<td>2402936(22.66%/81.48%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>8158164.26(86.03%/377%)</td>\n<td>1324035.65(13.97%/82.6%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>7809590.86(91.5%/-)</td>\n<td>724865.97(8.5%/-)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>经销和直销的酒量情况（单位：吨）</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>经销（占比/较上年涨幅)</th>\n<th>直销（占比/较上年涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>57639.09(78.66%/1.1%)</td>\n<td>15634.95(21.34%/39.76%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>56989.75(83.59%/-6.1%)</td>\n<td>11186.57(16.41%/95.04%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>60702.99(91.36%/0.9%)</td>\n<td>5735.70(8.64%/45.85%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>60123.8(93.86%/-3.01%)</td>\n<td>3932.08(6.14%/48.32%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>61993.46(95.89%/-)</td>\n<td>2651.84(4.11%/-)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>从上面的数据可以看到，经销的量基本没有太大变化，总收入稍微有些增长；直销的量和收入均有比较大的增长。</p>\n<p>国内和国外销售情况（单位：百万），暂时国内销售占主要比例</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>国内（占比/较上年涨幅)</th>\n<th>国外（占比/较上年涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>142868(97%/19.5%)</td>\n<td>4350(3%/2.6%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>119532(96.5%/15.5%)</td>\n<td>4239(3.5%/61.9%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>103440(97.5%/11.9%)</td>\n<td>2618(2.5%/7.6%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>92389(97.4%/12%)</td>\n<td>2432(2.6%/-16.8%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>82424(96.5%/16.6%)</td>\n<td>2920(3.5%/0.9%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>接下来查看预收账款（单位：百万）相关的情况 — 经销售需要预打款才能买到货（这个也变相的说明茅台不愁销量 — 这里的销量和终端销售公司的销量不完全是一个概念），可以每年有百亿级别的预收账款</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>预售款（增长）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>14,125(-8.7%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>15,471(21.64%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>12,718(4.5%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>13,321(-3.0%</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>13,740(-)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>然后再看下不同类型酒的销售额（单位：十亿），以及涨幅如下。从数据可以看出来，白酒持续在增长，但是其他类型酒的销售额则有不同类型的波动。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>白酒（涨幅)</th>\n<th>啤酒（涨幅）</th>\n<th>葡萄酒（涨幅）</th>\n<th>黄酒（涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>756(19.5%)</td>\n<td>186.3(8.6%)</td>\n<td>9(4.8%)</td>\n<td>21(2.1%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>662(9.64%)</td>\n<td>175.1(10.1%)</td>\n<td>9.1(-2.91%)</td>\n<td>1.2(-24.3%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>603(18.6%)</td>\n<td>158.4(7.91%)</td>\n<td>9(-9.79%)</td>\n<td>12.7(-5.24%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>583(4.61%)</td>\n<td>146.8(-6.12%)</td>\n<td>10(-29.82%)</td>\n<td>13.4(-20.18%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>561(8.2%)</td>\n<td>158(4.8%)</td>\n<td>14.5(17.5%)</td>\n<td>17.3(2.7%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>然后查看茅台酒和系列酒占整个白酒的销售收入情况如下（单位十亿），可以看出茅台酒和系列酒的收入在缓慢上升。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>白酒（较上年涨幅)</th>\n<th>茅台酒（占比）</th>\n<th>系列酒（占比）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>756(19.5%)</td>\n<td>126.5(16.7%)</td>\n<td>20.6(2.7%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>662(9.64%)</td>\n<td>107.8(16.2%)</td>\n<td>15.9(2.4%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>603(18.6%)</td>\n<td>93.4(15.4%)</td>\n<td>12.5(2.0%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>583(4.61%)</td>\n<td>84.8(14.5%)</td>\n<td>9.9(1.6%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>561(8.2%)</td>\n<td>75.8(13.5%)</td>\n<td>9.5(1.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>另外由中酒协披露 2023 年酒业数据[4] 可知，白酒销量在减少，但整体实现营收不断上升，白酒整体逐步迈向高端化。</p>\n<h1 id=\"收益归属\"><a href=\"#收益归属\" class=\"headerlink\" title=\"收益归属\"></a>收益归属</h1><p>接下来查看相关归属情况</p>\n<p>我们看下以茅台股份有限公司为中心视角的一些公司情况</p>\n<ul>\n<li>中国贵州茅台酒厂（集团）有限责任公司  54.07%</li>\n<li>香港中央结算有限公司  6.45%</li>\n<li>贵州国有资本运营有限责任公司  4.64%</li>\n<li>贵州茅台酒厂（集团）技术开发有限公司 2.22%</li>\n<li>中国工商银行-上证50交易型开放式指数证券投资基金 1.01%</li>\n<li>中国工商银行股份有限公司-华泰柏瑞沪深300交易型开放式指数证券投资基金 0.91%</li>\n<li>中央汇金资产管理有限公司 0.83%</li>\n<li>中国证券金融股份有限责任公司 0.64%</li>\n<li>中国建设银行股份有限公司-易方达沪深300交易型开放式指数发起式证券投资基金 0.61%</li>\n<li>中国人寿保险股份有限公司-传统-普通保险产品-005L-CT001沪 0.44%<ul>\n<li>贵州茅台酒股份有限公司<ul>\n<li>贵州茅台酱香酒营销有限公司 100%</li>\n<li>贵州茅台酒销售有限公司 95%</li>\n<li>北京友谊使者商贸有限公司 70%</li>\n<li>国酒茅台定制营销（贵州）有限公司 70%</li>\n<li>贵州茅台酒进出口有限责任公司 70%</li>\n<li>贵州茅台集团财务有限公司 51%</li>\n<li>贵州赖茅酒业有限公司 43%</li>\n<li>贵州金石（贵州）产业发展基金合伙企业（有限公司）</li>\n<li>茅台招华（贵州）产业发展基金合伙企业（有限合伙）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>其中「茅台股份有限责任公司」的收益是所有股东共享的，也就是说该公司的利润普通股东是有份的。</p>\n<p>如果有部分利益从「贵州茅台酒股份有限公司」移到其他地方，则会有损小股东的权益，比如 2009 年成立的 茅台销售公司成立是大家所担心的那样 —  后来茅台股份公司回应统一按照出厂价较会议，不影响股份有限公司的收。</p>\n<p>那么另外有一个问题，这部分归属于小股东的权益，怎么保证实实在在会给到小股东呢？是否有可能造成大股东替小股东决策，然后导致大股东占小股东便宜的事情呢，这个在后续加上分红相关的一起描述。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从本文我们可以看出，作为茅台股份有限公司的股东来说，主要关心的一些点</p>\n<ul>\n<li>茅台酒的利润情况：这个和酒的质量、销量、价格等有关</li>\n<li>茅台酒的利润归属：是否有相关收益从股份公司移到了其他公司，归属在茅台股份公司的利益是否都分给所有股东了 — 主要是小股东</li>\n</ul>\n<p>第一点来说主要有公司的商业模式决定，茅台酒（白酒）的商业模式好，不愁卖（有很多预收款），对上下游均有定价权，且进入门槛/口味等拥有一定的差异化，因此在可预见的未来。在之前的文章 [茅台是一个好的投资标的吗] 以及[茅台的成本分析] 中也有一些相关分析。</p>\n<p>第二点主要从历史以及公司的透明度等情况来进行分析，另外后面会尝试从分红等角度来进行一些分析。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>Q: 茅台的销量能持续吗？未来很多年轻人可能不喝白酒了？酒是有害物品<br>A: 关于这个问题，大致思考是这样的：整体白酒的销量不太确定，但是茅台的销量暂时看不太会受影响</p>\n<ol>\n<li>人不仅仅是为了健康（比如吸烟），还会考虑快乐 </li>\n<li>通过和一些常喝酒的人沟通，酒会有用户粘性（至少到类似香型），不会因为稍微涨价而喝其他的。另外茅台在整体白酒中占比也还较低</li>\n<li>茅台有一定的送礼/面子 属性在里面，这属于文化的一种，只要相关文化不变，就需要一种载体，茅台现在充当这个载体，载体是一个群体共识，共识的改变会比较难。</li>\n</ol>\n<p>[1] <a href=\"https://echarts.apache.org/examples/en/editor.html?c=bar-negative\">https://echarts.apache.org/examples/en/editor.html?c=bar-negative</a><br>[2] <a href=\"https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf\">https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf</a><br>[3] <a href=\"https://m.cls.cn/detail/712100\">https://m.cls.cn/detail/712100</a><br>[4] <a href=\"https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html\">https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html</a></p>\n","site":{"data":{}},"excerpt":"<p>本文尝试更详细的分析茅台以及所在行业的一些指标信息，希望对茅台是否赚钱，以及赚钱后是否能够归属小股东等有一个大体的认识，也希望能够更好的了解应该关注公司哪些指标以及信息。</p>","more":"<p>对于股东来说，主要关注一个公司两点</p>\n<ol>\n<li>公司业务是否赚钱</li>\n<li>公司业务赚钱之后，是否都归属于股份有限公司（股东所有)</li>\n</ol>\n<h1 id=\"茅台的业务\"><a href=\"#茅台的业务\" class=\"headerlink\" title=\"茅台的业务\"></a>茅台的业务</h1><p>茅台的业务主要是卖酒，在茅台酒的整条链路中，大致如下所示</p>\n<p>[原材料提供商] —原材料—&gt; [茅台股份有限公司]  —酒—&gt; [直销/经销商] (—酒—&gt; [终端销售]) —酒—&gt; [终端客户]</p>\n<p>其中 [终端销售] 这一环节可能没有，比如在直销或者电商等渠道</p>\n<p>国信证券梳理[2]的销售渠道以及相关价格如下所示（2023 年出厂价涨价前）</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231410651.png\" alt=\"\"></p>\n<p>涨价后，大致修改如下所示</p>\n<ul>\n<li>原材料提供商<ul>\n<li>茅台股份有限公司<ul>\n<li>[直销] i茅台/数字营销平台  &lt;— 零售指导价 1499</li>\n<li>茅台销售公司<ul>\n<li>[经销] 一级经销商  &lt;— 拿酒成本是 出厂价 1199<ul>\n<li>终端销售  &lt;— 一批价 按照[2] 大概 2300<ul>\n<li>客户    &lt;— 实际购买价  散装大概 2600[3]，会持续有变动</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>商超  &lt;—  1399 参考国信证券数据[2]</li>\n<li>电商  &lt;—  1399 参考国信证券数据[2]</li>\n<li>团购  &lt;— 零售指导价 1499</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>其中出厂价是固定的(1199)，零售指导价是固定的(1499)，批价和终端价会随着市场需求的变动而变化。如果终端需求多，终端价会增加，从而会提高批价，反之则会导致终端价和批价下降。</p>\n<p>其中出厂价/建议零售价/商超/电商/团购的 基本固定（变动周期较长），经销商相关的的销售链路，其中 [终端价] 和 [批价] 的差异为终端销售的利润，[批价] 和 [出厂价] 的差异则是经销商的利润。如果这两个利润过低甚至变负，则会影响整条链路上的整体酒销售。</p>\n<p>下图展示了经销商在过去几年中的利润空间变化（其中灰色的区域是渠道利润，红色是出厂价，蓝色是批价）[2]</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504021431926.png\" alt=\"\"></p>\n<h1 id=\"茅台是否赚钱\"><a href=\"#茅台是否赚钱\" class=\"headerlink\" title=\"茅台是否赚钱\"></a>茅台是否赚钱</h1><p>茅台的整体业务比较简单，主要是卖酒，然后还有部分金融业务。</p>\n<p>首先看下最近几年的营收和成本，如下图所示<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231446109.png\" alt=\"\"></p>\n<p>上图中可以看出几点</p>\n<ul>\n<li>利润主要来自于营业收入 — 也就是卖酒。</li>\n<li>营业收入最近几年逐年增加</li>\n<li>营业成本的增长率和营业收入的增长率差不多</li>\n</ul>\n<p>其中营业收入拆开来看的情况如下图所示<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231417076.png\" alt=\"\"></p>\n<p>从图中可以看到</p>\n<ul>\n<li>最多的成本是税及附加 — 由于税率固定，这部分是卖的越多，税越多</li>\n<li>营业成本逐年增加，但是增加的没有税多</li>\n<li>管理费用/销售费用 逐年增加，但是增加不是很多，整体占比也不是很多</li>\n</ul>\n<p>另外从不同角度查看营业收入的情况。</p>\n<p>茅台酒和系列酒的情况（单位：百万）</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>茅台酒(占比/较上年涨幅)</th>\n<th>系列酒(占比/较上年涨幅)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>126589(85.9%/17.6%)</td>\n<td>20629(14.1%/29.4%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>107833(87.1%/15.3%)</td>\n<td>15938(12.9%/26.5%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>93464(88.1%/10.1%)</td>\n<td>12594(11.9%/26%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>84830(89.4%/11.9%)</td>\n<td>9991(10.6%/4.7%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>75802(88.8%/15.7%)</td>\n<td>9542(11.2%/18.2%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>经销和直销的收入情况（单位：百万）</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>经销（占比/较上年涨幅)</th>\n<th>直销（占比/较上年涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>7998611.94(54.33%/7.5%)</td>\n<td>6723287.69(45.67%/36.15%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>7439359.47(60.10%/-9.4%)</td>\n<td>4937873.77(39.9%/105%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>8202992(77.34%/0.5%)</td>\n<td>2402936(22.66%/81.48%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>8158164.26(86.03%/377%)</td>\n<td>1324035.65(13.97%/82.6%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>7809590.86(91.5%/-)</td>\n<td>724865.97(8.5%/-)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>经销和直销的酒量情况（单位：吨）</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>经销（占比/较上年涨幅)</th>\n<th>直销（占比/较上年涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>57639.09(78.66%/1.1%)</td>\n<td>15634.95(21.34%/39.76%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>56989.75(83.59%/-6.1%)</td>\n<td>11186.57(16.41%/95.04%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>60702.99(91.36%/0.9%)</td>\n<td>5735.70(8.64%/45.85%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>60123.8(93.86%/-3.01%)</td>\n<td>3932.08(6.14%/48.32%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>61993.46(95.89%/-)</td>\n<td>2651.84(4.11%/-)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>从上面的数据可以看到，经销的量基本没有太大变化，总收入稍微有些增长；直销的量和收入均有比较大的增长。</p>\n<p>国内和国外销售情况（单位：百万），暂时国内销售占主要比例</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>国内（占比/较上年涨幅)</th>\n<th>国外（占比/较上年涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>142868(97%/19.5%)</td>\n<td>4350(3%/2.6%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>119532(96.5%/15.5%)</td>\n<td>4239(3.5%/61.9%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>103440(97.5%/11.9%)</td>\n<td>2618(2.5%/7.6%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>92389(97.4%/12%)</td>\n<td>2432(2.6%/-16.8%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>82424(96.5%/16.6%)</td>\n<td>2920(3.5%/0.9%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>接下来查看预收账款（单位：百万）相关的情况 — 经销售需要预打款才能买到货（这个也变相的说明茅台不愁销量 — 这里的销量和终端销售公司的销量不完全是一个概念），可以每年有百亿级别的预收账款</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>预售款（增长）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>14,125(-8.7%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>15,471(21.64%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>12,718(4.5%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>13,321(-3.0%</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>13,740(-)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>然后再看下不同类型酒的销售额（单位：十亿），以及涨幅如下。从数据可以看出来，白酒持续在增长，但是其他类型酒的销售额则有不同类型的波动。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>白酒（涨幅)</th>\n<th>啤酒（涨幅）</th>\n<th>葡萄酒（涨幅）</th>\n<th>黄酒（涨幅）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>756(19.5%)</td>\n<td>186.3(8.6%)</td>\n<td>9(4.8%)</td>\n<td>21(2.1%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>662(9.64%)</td>\n<td>175.1(10.1%)</td>\n<td>9.1(-2.91%)</td>\n<td>1.2(-24.3%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>603(18.6%)</td>\n<td>158.4(7.91%)</td>\n<td>9(-9.79%)</td>\n<td>12.7(-5.24%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>583(4.61%)</td>\n<td>146.8(-6.12%)</td>\n<td>10(-29.82%)</td>\n<td>13.4(-20.18%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>561(8.2%)</td>\n<td>158(4.8%)</td>\n<td>14.5(17.5%)</td>\n<td>17.3(2.7%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>然后查看茅台酒和系列酒占整个白酒的销售收入情况如下（单位十亿），可以看出茅台酒和系列酒的收入在缓慢上升。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>白酒（较上年涨幅)</th>\n<th>茅台酒（占比）</th>\n<th>系列酒（占比）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>756(19.5%)</td>\n<td>126.5(16.7%)</td>\n<td>20.6(2.7%)</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>662(9.64%)</td>\n<td>107.8(16.2%)</td>\n<td>15.9(2.4%)</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>603(18.6%)</td>\n<td>93.4(15.4%)</td>\n<td>12.5(2.0%)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>583(4.61%)</td>\n<td>84.8(14.5%)</td>\n<td>9.9(1.6%)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>561(8.2%)</td>\n<td>75.8(13.5%)</td>\n<td>9.5(1.6%)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>另外由中酒协披露 2023 年酒业数据[4] 可知，白酒销量在减少，但整体实现营收不断上升，白酒整体逐步迈向高端化。</p>\n<h1 id=\"收益归属\"><a href=\"#收益归属\" class=\"headerlink\" title=\"收益归属\"></a>收益归属</h1><p>接下来查看相关归属情况</p>\n<p>我们看下以茅台股份有限公司为中心视角的一些公司情况</p>\n<ul>\n<li>中国贵州茅台酒厂（集团）有限责任公司  54.07%</li>\n<li>香港中央结算有限公司  6.45%</li>\n<li>贵州国有资本运营有限责任公司  4.64%</li>\n<li>贵州茅台酒厂（集团）技术开发有限公司 2.22%</li>\n<li>中国工商银行-上证50交易型开放式指数证券投资基金 1.01%</li>\n<li>中国工商银行股份有限公司-华泰柏瑞沪深300交易型开放式指数证券投资基金 0.91%</li>\n<li>中央汇金资产管理有限公司 0.83%</li>\n<li>中国证券金融股份有限责任公司 0.64%</li>\n<li>中国建设银行股份有限公司-易方达沪深300交易型开放式指数发起式证券投资基金 0.61%</li>\n<li>中国人寿保险股份有限公司-传统-普通保险产品-005L-CT001沪 0.44%<ul>\n<li>贵州茅台酒股份有限公司<ul>\n<li>贵州茅台酱香酒营销有限公司 100%</li>\n<li>贵州茅台酒销售有限公司 95%</li>\n<li>北京友谊使者商贸有限公司 70%</li>\n<li>国酒茅台定制营销（贵州）有限公司 70%</li>\n<li>贵州茅台酒进出口有限责任公司 70%</li>\n<li>贵州茅台集团财务有限公司 51%</li>\n<li>贵州赖茅酒业有限公司 43%</li>\n<li>贵州金石（贵州）产业发展基金合伙企业（有限公司）</li>\n<li>茅台招华（贵州）产业发展基金合伙企业（有限合伙）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>其中「茅台股份有限责任公司」的收益是所有股东共享的，也就是说该公司的利润普通股东是有份的。</p>\n<p>如果有部分利益从「贵州茅台酒股份有限公司」移到其他地方，则会有损小股东的权益，比如 2009 年成立的 茅台销售公司成立是大家所担心的那样 —  后来茅台股份公司回应统一按照出厂价较会议，不影响股份有限公司的收。</p>\n<p>那么另外有一个问题，这部分归属于小股东的权益，怎么保证实实在在会给到小股东呢？是否有可能造成大股东替小股东决策，然后导致大股东占小股东便宜的事情呢，这个在后续加上分红相关的一起描述。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从本文我们可以看出，作为茅台股份有限公司的股东来说，主要关心的一些点</p>\n<ul>\n<li>茅台酒的利润情况：这个和酒的质量、销量、价格等有关</li>\n<li>茅台酒的利润归属：是否有相关收益从股份公司移到了其他公司，归属在茅台股份公司的利益是否都分给所有股东了 — 主要是小股东</li>\n</ul>\n<p>第一点来说主要有公司的商业模式决定，茅台酒（白酒）的商业模式好，不愁卖（有很多预收款），对上下游均有定价权，且进入门槛/口味等拥有一定的差异化，因此在可预见的未来。在之前的文章 [茅台是一个好的投资标的吗] 以及[茅台的成本分析] 中也有一些相关分析。</p>\n<p>第二点主要从历史以及公司的透明度等情况来进行分析，另外后面会尝试从分红等角度来进行一些分析。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>Q: 茅台的销量能持续吗？未来很多年轻人可能不喝白酒了？酒是有害物品<br>A: 关于这个问题，大致思考是这样的：整体白酒的销量不太确定，但是茅台的销量暂时看不太会受影响</p>\n<ol>\n<li>人不仅仅是为了健康（比如吸烟），还会考虑快乐 </li>\n<li>通过和一些常喝酒的人沟通，酒会有用户粘性（至少到类似香型），不会因为稍微涨价而喝其他的。另外茅台在整体白酒中占比也还较低</li>\n<li>茅台有一定的送礼/面子 属性在里面，这属于文化的一种，只要相关文化不变，就需要一种载体，茅台现在充当这个载体，载体是一个群体共识，共识的改变会比较难。</li>\n</ol>\n<p>[1] <a href=\"https://echarts.apache.org/examples/en/editor.html?c=bar-negative\">https://echarts.apache.org/examples/en/editor.html?c=bar-negative</a><br>[2] <a href=\"https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf\">https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf</a><br>[3] <a href=\"https://m.cls.cn/detail/712100\">https://m.cls.cn/detail/712100</a><br>[4] <a href=\"https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html\">https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html</a></p>"},{"title":"分红以及投资复利-以茅台为例","date":"2025-04-09T08:53:32.000Z","toc":true,"_content":"\n> 本文尝试对上市公司分红以及投资复利进行一些分析，希望能够更好的了解投资的选择标准，以及操作标准。\n\n在 [赚钱机器茅台](https://mp.weixin.qq.com/s/2KbUDJNn7-DLrqGPRHT0iA) 一文中，我们有提到分红相关的事情，这里我们仍旧以茅台为例分析下分红相关的内容。\n\n<!-- more -->\n\n# 股本位\n\n现在的生活中大家会以拥有 *本币本位/纸币本位* 的视角，也就是所有的价值/价格体系等都会锚定到本国法币的价值，同时也有一个 *金本位*，表示所有的价值都体现在包含多少黄金。\n\n那么对于股市投资是不是可以有一种“股本位”的视角，那么所有的目的都是以 *股数* 作为衡量，我们的目的也将变成获取更多的 *股数*。\n\n# 分红以及投资收益\n接下来我们以茅台上市后股东收益来阐述分红，复利，收益等。\n\n## 分析情况说明\n首先描述下本文会使用到的一些情况\n1. 本文假设股票可以零散买入，也就是没有最低股数要求，甚至可以买入小于 1 股（比如 0.01 股）\n2. 对于茅台整个上市历史的收益，起点为上市是购入 1 元茅台股（为了计算方便，不影响整体收益比例）\n3. 对于比较中最近十年的收益情况，起点为 2015 年选择一个市值高点，以市价买入 1 元茅台股票\n\n原始数据整理如下，数据来源[1]，股数计算公式参考图片中左上角的公式，市值是 股数 * 股价。\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121251913.png)\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121253102.png)\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121254827.png)\n\n## 收益和股数\n\n通过整体茅台的数据，绘制如下几张图，下图中展示了不同纬度情况下茅台股票的收益（总市值和总股数），其中\n\n- ValueFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总市值\n- CountFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总股数\n- ValueFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总市值\n- CountFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总股数\n\n> 选择 20150526 是因为当天市值是当年一个高值\n> 下图中的每条线可以点击标题控制是否显示\n\n{% echarts 85% 400 %}\n{\n  legend: {\n    data: ['ValueFromInit', 'CountFromInit', 'ValueFrom2015', 'CountFrom2015']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'ValueFromInit',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 24.64, 44.26, 56.68, 89.67, 157.71, 203.64, 305.67, 442.03, 433.51, 376.70, 376.17, 371.87, 344.64, 356.74],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'ValueFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'CountFromInit',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.1732, 0.1938, 0.1980, 0.2010, 0.2039, 0.2069, 0.2093, 0.2112, 0.2135, 0.2162, 0.2190, 0.2220, 0.2265, 0.23],\n      type: 'line',\n      yAxisIndex: 1\n    },\n    {\n      name: 'CountFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    }\n  ]\n}\n{% endecharts %}\n\n下面的图中，20140625 之前的表示从上市开始投入 1 元后，总市值和总股数的情况，20140625 以及以后的情况则表示在 20140625 买入 1 元后的总市值和总股数情况，其中\n\n- Value 表示对应时间的总市值\n- Count 表示对应时间的总股数\n\n> 下图中的每条线可以点击标题控制是否显示\n\n{% echarts 85% 400 %}\n{\n  legend: {\n    data: ['Value', 'Count']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Value',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'Count',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    },\n  ]\n}\n{% endecharts %}\n\n## 简单分析\n上面的信息可以分为如下几组的对比\n\n- 不同阶段十年的对比：2001 年到 2010 年这十年，与 2015 年到 2024 年这十年对比\n- 十年和二十多年的对比：2001 年到 2012 年这 11 年，与 2001 年到 2014 年这 23 年对比\n- 二十多年前后段和后半段的对比：2001 年到 2012 年，与 2012 年到 2024 年进行对比\n- 对比分红再买入和分红不再买入的情况\n\n其中第一组可以发现 2001 年到 2010 年这十年总市值变为 **16.56**, 总股数是 **0.1313** 。也就是总市值变成了原来的 **16** 倍，股数变为原来的 **3.6** 倍左右；2015 年到 2024 年这十年总价值变成了 **7.1**，总股数变成了 **0.00457**, 总价值变成了原来的 **7** 倍左右，股数变成了原来的 **1.3** 倍。通过对比可以看出\n1. 后面这十年总收益比前面十年少\n2. 后面这十年总股数增加的不如前十年多\n3. 总股数前十年比后十年多更多。这里可能有多个原因：1）前十年有过送股；2）前十年股价更低，同样分红的钱能买更多的股数\n\n第二组可以看出来，总共 24 年总市值变为 **356.74**，总股数变为 **0.23**，总市值是原来的 **356** 倍，总股数是原来的 **6.4** 倍；前 11 年总市值变为 **37.33**，总股数变为 **0.1483**, 总市值变为原来的 **37** 倍，总股数变为原来的 **4** 倍。这里可以看出来，时间长一倍，总市值不仅仅是多一倍，二十将近 **10** 倍，从原来的 **37** 倍变成了 **356** 倍。总股数由于后面股价上涨了，则增长不多。\n\n第三组可以看出来，前面十二年总价值从 1 涨到 **37.33**，总股数从 **0.0356** 变为 **0.1483**；后面十二年，价值从 **37.33** 涨到 **356.74**,总股数从 **0.1483** 涨到 **0.23**。可以看出来\n1. 前面十二年总价值涨了 **37** 倍，后面十二年总价值涨了将近 **10** 倍\n2. 前面十二年总股数涨到原来 **4** 倍，后面十二年总股数涨到 **1.6** 倍\n可以大致认为，股数越多，总收益越多；股价更低的时候，股东总收益反而会更好。\n\n第四组 分红不再买入的情况下，总市值变为 **248.27**, 总股数变为 **0.16**。分红再买入的情况下，总市值变为 **356.74**，总股数变为 **0.23**。分红再投入的总收益会更高。从总收益来看差异还挺大，分红不再买入的情况下是 **248** 倍，分红再买入的情况下是 **356** 倍。\n\n## 整体结论\n1. 投资是有复利的，所以越早开始投资越好，投资的时间越长越好\n2. 对于好公司（上面的茅台），不管是否分红再投入，都能有不错的收益\n3. 对于好公司，分红应该再投入，收益会更多\n 3.1  分红可以理解为公司部分收益的处置权交给所有股东（而不是只有大股东），股东收到分红后至少有两个选择：1）继续买入；2）不买入该投资标的。那么这两种选择也会有不同的收益，如果不买入该投资标的的收益无法比过当前投资标的，则收益会变少 -- 当然如果有正当使用需要则另说。\n 3.2  另外可以从股本位的视角来考虑，分红再买入是再增加整体股数，长远来看收益也会更好。\n4. 市值 = 股数 * 单价。股数和股票单价上涨均能导致市值上涨。\n4.1. 市值短期受市场影响（市场内参与该股票交易所有人的预期），长期受公司内在价值影响。也就是说从长期来看公司股价会围绕公司价值波动。\n4.2. 不管股价是否增长，股数增长均会提高整体市值，但是股价增长，会导致同样资金能够买到的股数变少。\n4.3. 因此股价大幅增长对股东来说反而不是一个好事情:1）股价是否涨高，并不会影响公司的营业情况 -- 也就是盈利、分红等；2）股价涨高导致能买的股数变少（实际情况下甚至由于股价过高，分红没法购买 1 手）。\n\n# 其他\n1. 上面的所有分析，有一个前提：公司是一个好公司。\n2. 不是所有公司的收益率都如茅台，因此上述数据仅作参考。\n3. 我们可以多一个维度分析公司的收益情况。如果公司是好公司的情况下，整体收益可以由 <股数 * 股价> 决定，那么我们在用数据进行筛选公司的时候，可以考虑分红再买入后的情况。\n4. 既然上面说的分红再买入会更好，那是不是可以让公司不分红（变相的相当于再买入），分红的意义是啥呢？\n4.1. 分红会从利润中出，公司分红表示有利润，同时如果公式有分红比例的话，会变相的约束公司不虚报利润（只可能隐藏利润） -- 表明公司利润只会比表现出来的更好。也可以一定情看下监督公司一年经营情况\n4.2. 分红后的钱股东有自由取决权，可以再买入，可以用于其他途径（生活，或者投资其他地方）\n5. 分红的情况是将当年的收益分配给股东的一种形式，可以有三种：现价分红；派发新股；转增股本[2]，这里说的分红主要是是现价分红。\n\n另外建议结合 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ) 一起阅读（注意：里面茅台相关总收益/总股数计算有误，以本文为准），里面对不同投资标的进行一个分析\n\n# Ref\n[1] https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml\n[2] https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html\n","source":"_posts/invest-compond.md","raw":"---\ntitle: 分红以及投资复利-以茅台为例\ndate: 2025-04-09 16:53:32\ntags:\n    - stock\n    - investment\n    - 分红\n    - compond\ntoc: true\n---\n\n> 本文尝试对上市公司分红以及投资复利进行一些分析，希望能够更好的了解投资的选择标准，以及操作标准。\n\n在 [赚钱机器茅台](https://mp.weixin.qq.com/s/2KbUDJNn7-DLrqGPRHT0iA) 一文中，我们有提到分红相关的事情，这里我们仍旧以茅台为例分析下分红相关的内容。\n\n<!-- more -->\n\n# 股本位\n\n现在的生活中大家会以拥有 *本币本位/纸币本位* 的视角，也就是所有的价值/价格体系等都会锚定到本国法币的价值，同时也有一个 *金本位*，表示所有的价值都体现在包含多少黄金。\n\n那么对于股市投资是不是可以有一种“股本位”的视角，那么所有的目的都是以 *股数* 作为衡量，我们的目的也将变成获取更多的 *股数*。\n\n# 分红以及投资收益\n接下来我们以茅台上市后股东收益来阐述分红，复利，收益等。\n\n## 分析情况说明\n首先描述下本文会使用到的一些情况\n1. 本文假设股票可以零散买入，也就是没有最低股数要求，甚至可以买入小于 1 股（比如 0.01 股）\n2. 对于茅台整个上市历史的收益，起点为上市是购入 1 元茅台股（为了计算方便，不影响整体收益比例）\n3. 对于比较中最近十年的收益情况，起点为 2015 年选择一个市值高点，以市价买入 1 元茅台股票\n\n原始数据整理如下，数据来源[1]，股数计算公式参考图片中左上角的公式，市值是 股数 * 股价。\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121251913.png)\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121253102.png)\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121254827.png)\n\n## 收益和股数\n\n通过整体茅台的数据，绘制如下几张图，下图中展示了不同纬度情况下茅台股票的收益（总市值和总股数），其中\n\n- ValueFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总市值\n- CountFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总股数\n- ValueFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总市值\n- CountFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总股数\n\n> 选择 20150526 是因为当天市值是当年一个高值\n> 下图中的每条线可以点击标题控制是否显示\n\n{% echarts 85% 400 %}\n{\n  legend: {\n    data: ['ValueFromInit', 'CountFromInit', 'ValueFrom2015', 'CountFrom2015']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'ValueFromInit',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 24.64, 44.26, 56.68, 89.67, 157.71, 203.64, 305.67, 442.03, 433.51, 376.70, 376.17, 371.87, 344.64, 356.74],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'ValueFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'CountFromInit',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.1732, 0.1938, 0.1980, 0.2010, 0.2039, 0.2069, 0.2093, 0.2112, 0.2135, 0.2162, 0.2190, 0.2220, 0.2265, 0.23],\n      type: 'line',\n      yAxisIndex: 1\n    },\n    {\n      name: 'CountFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    }\n  ]\n}\n{% endecharts %}\n\n下面的图中，20140625 之前的表示从上市开始投入 1 元后，总市值和总股数的情况，20140625 以及以后的情况则表示在 20140625 买入 1 元后的总市值和总股数情况，其中\n\n- Value 表示对应时间的总市值\n- Count 表示对应时间的总股数\n\n> 下图中的每条线可以点击标题控制是否显示\n\n{% echarts 85% 400 %}\n{\n  legend: {\n    data: ['Value', 'Count']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Value',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'Count',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    },\n  ]\n}\n{% endecharts %}\n\n## 简单分析\n上面的信息可以分为如下几组的对比\n\n- 不同阶段十年的对比：2001 年到 2010 年这十年，与 2015 年到 2024 年这十年对比\n- 十年和二十多年的对比：2001 年到 2012 年这 11 年，与 2001 年到 2014 年这 23 年对比\n- 二十多年前后段和后半段的对比：2001 年到 2012 年，与 2012 年到 2024 年进行对比\n- 对比分红再买入和分红不再买入的情况\n\n其中第一组可以发现 2001 年到 2010 年这十年总市值变为 **16.56**, 总股数是 **0.1313** 。也就是总市值变成了原来的 **16** 倍，股数变为原来的 **3.6** 倍左右；2015 年到 2024 年这十年总价值变成了 **7.1**，总股数变成了 **0.00457**, 总价值变成了原来的 **7** 倍左右，股数变成了原来的 **1.3** 倍。通过对比可以看出\n1. 后面这十年总收益比前面十年少\n2. 后面这十年总股数增加的不如前十年多\n3. 总股数前十年比后十年多更多。这里可能有多个原因：1）前十年有过送股；2）前十年股价更低，同样分红的钱能买更多的股数\n\n第二组可以看出来，总共 24 年总市值变为 **356.74**，总股数变为 **0.23**，总市值是原来的 **356** 倍，总股数是原来的 **6.4** 倍；前 11 年总市值变为 **37.33**，总股数变为 **0.1483**, 总市值变为原来的 **37** 倍，总股数变为原来的 **4** 倍。这里可以看出来，时间长一倍，总市值不仅仅是多一倍，二十将近 **10** 倍，从原来的 **37** 倍变成了 **356** 倍。总股数由于后面股价上涨了，则增长不多。\n\n第三组可以看出来，前面十二年总价值从 1 涨到 **37.33**，总股数从 **0.0356** 变为 **0.1483**；后面十二年，价值从 **37.33** 涨到 **356.74**,总股数从 **0.1483** 涨到 **0.23**。可以看出来\n1. 前面十二年总价值涨了 **37** 倍，后面十二年总价值涨了将近 **10** 倍\n2. 前面十二年总股数涨到原来 **4** 倍，后面十二年总股数涨到 **1.6** 倍\n可以大致认为，股数越多，总收益越多；股价更低的时候，股东总收益反而会更好。\n\n第四组 分红不再买入的情况下，总市值变为 **248.27**, 总股数变为 **0.16**。分红再买入的情况下，总市值变为 **356.74**，总股数变为 **0.23**。分红再投入的总收益会更高。从总收益来看差异还挺大，分红不再买入的情况下是 **248** 倍，分红再买入的情况下是 **356** 倍。\n\n## 整体结论\n1. 投资是有复利的，所以越早开始投资越好，投资的时间越长越好\n2. 对于好公司（上面的茅台），不管是否分红再投入，都能有不错的收益\n3. 对于好公司，分红应该再投入，收益会更多\n 3.1  分红可以理解为公司部分收益的处置权交给所有股东（而不是只有大股东），股东收到分红后至少有两个选择：1）继续买入；2）不买入该投资标的。那么这两种选择也会有不同的收益，如果不买入该投资标的的收益无法比过当前投资标的，则收益会变少 -- 当然如果有正当使用需要则另说。\n 3.2  另外可以从股本位的视角来考虑，分红再买入是再增加整体股数，长远来看收益也会更好。\n4. 市值 = 股数 * 单价。股数和股票单价上涨均能导致市值上涨。\n4.1. 市值短期受市场影响（市场内参与该股票交易所有人的预期），长期受公司内在价值影响。也就是说从长期来看公司股价会围绕公司价值波动。\n4.2. 不管股价是否增长，股数增长均会提高整体市值，但是股价增长，会导致同样资金能够买到的股数变少。\n4.3. 因此股价大幅增长对股东来说反而不是一个好事情:1）股价是否涨高，并不会影响公司的营业情况 -- 也就是盈利、分红等；2）股价涨高导致能买的股数变少（实际情况下甚至由于股价过高，分红没法购买 1 手）。\n\n# 其他\n1. 上面的所有分析，有一个前提：公司是一个好公司。\n2. 不是所有公司的收益率都如茅台，因此上述数据仅作参考。\n3. 我们可以多一个维度分析公司的收益情况。如果公司是好公司的情况下，整体收益可以由 <股数 * 股价> 决定，那么我们在用数据进行筛选公司的时候，可以考虑分红再买入后的情况。\n4. 既然上面说的分红再买入会更好，那是不是可以让公司不分红（变相的相当于再买入），分红的意义是啥呢？\n4.1. 分红会从利润中出，公司分红表示有利润，同时如果公式有分红比例的话，会变相的约束公司不虚报利润（只可能隐藏利润） -- 表明公司利润只会比表现出来的更好。也可以一定情看下监督公司一年经营情况\n4.2. 分红后的钱股东有自由取决权，可以再买入，可以用于其他途径（生活，或者投资其他地方）\n5. 分红的情况是将当年的收益分配给股东的一种形式，可以有三种：现价分红；派发新股；转增股本[2]，这里说的分红主要是是现价分红。\n\n另外建议结合 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ) 一起阅读（注意：里面茅台相关总收益/总股数计算有误，以本文为准），里面对不同投资标的进行一个分析\n\n# Ref\n[1] https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml\n[2] https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html\n","slug":"invest-compond","published":1,"updated":"2025-04-12T10:25:58.542Z","_id":"cm99qn2hc00001nmk2xf74mbp","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本文尝试对上市公司分红以及投资复利进行一些分析，希望能够更好的了解投资的选择标准，以及操作标准。</p>\n</blockquote>\n<p>在 <a href=\"https://mp.weixin.qq.com/s/2KbUDJNn7-DLrqGPRHT0iA\">赚钱机器茅台</a> 一文中，我们有提到分红相关的事情，这里我们仍旧以茅台为例分析下分红相关的内容。</p>\n<span id=\"more\"></span>\n<h1 id=\"股本位\"><a href=\"#股本位\" class=\"headerlink\" title=\"股本位\"></a>股本位</h1><p>现在的生活中大家会以拥有 <em>本币本位/纸币本位</em> 的视角，也就是所有的价值/价格体系等都会锚定到本国法币的价值，同时也有一个 <em>金本位</em>，表示所有的价值都体现在包含多少黄金。</p>\n<p>那么对于股市投资是不是可以有一种“股本位”的视角，那么所有的目的都是以 <em>股数</em> 作为衡量，我们的目的也将变成获取更多的 <em>股数</em>。</p>\n<h1 id=\"分红以及投资收益\"><a href=\"#分红以及投资收益\" class=\"headerlink\" title=\"分红以及投资收益\"></a>分红以及投资收益</h1><p>接下来我们以茅台上市后股东收益来阐述分红，复利，收益等。</p>\n<h2 id=\"分析情况说明\"><a href=\"#分析情况说明\" class=\"headerlink\" title=\"分析情况说明\"></a>分析情况说明</h2><p>首先描述下本文会使用到的一些情况</p>\n<ol>\n<li>本文假设股票可以零散买入，也就是没有最低股数要求，甚至可以买入小于 1 股（比如 0.01 股）</li>\n<li>对于茅台整个上市历史的收益，起点为上市是购入 1 元茅台股（为了计算方便，不影响整体收益比例）</li>\n<li>对于比较中最近十年的收益情况，起点为 2015 年选择一个市值高点，以市价买入 1 元茅台股票</li>\n</ol>\n<p>原始数据整理如下，数据来源[1]，股数计算公式参考图片中左上角的公式，市值是 股数 * 股价。</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121251913.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121253102.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121254827.png\" alt=\"\"></p>\n<h2 id=\"收益和股数\"><a href=\"#收益和股数\" class=\"headerlink\" title=\"收益和股数\"></a>收益和股数</h2><p>通过整体茅台的数据，绘制如下几张图，下图中展示了不同纬度情况下茅台股票的收益（总市值和总股数），其中</p>\n<ul>\n<li>ValueFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总市值</li>\n<li>CountFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总股数</li>\n<li>ValueFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总市值</li>\n<li>CountFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总股数</li>\n</ul>\n<blockquote>\n<p>选择 20150526 是因为当天市值是当年一个高值<br>下图中的每条线可以点击标题控制是否显示</p>\n</blockquote>\n\n<div id=\"echarts7404\" style=\"width: 85%;height:400px;margin: 0 auto\"></div>\n<script src=\"https://unpkg.com/echarts@5.6.0/dist/echarts.min.js\" ></script>\n<script >\n  if (window.eChartecharts7404ResizeHandler) {\n    window.removeEventListener(\"resize\", eChartecharts7404ResizeHandler);\n  }\n  var optionecharts7404 = {\n  legend: {\n    data: ['ValueFromInit', 'CountFromInit', 'ValueFrom2015', 'CountFrom2015']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'ValueFromInit',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 24.64, 44.26, 56.68, 89.67, 157.71, 203.64, 305.67, 442.03, 433.51, 376.70, 376.17, 371.87, 344.64, 356.74],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'ValueFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'CountFromInit',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.1732, 0.1938, 0.1980, 0.2010, 0.2039, 0.2069, 0.2093, 0.2112, 0.2135, 0.2162, 0.2190, 0.2220, 0.2265, 0.23],\n      type: 'line',\n      yAxisIndex: 1\n    },\n    {\n      name: 'CountFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    }\n  ]\n};\n  if (window.echarts !== undefined) {\n    var eChartecharts7404 = echarts.init(document.getElementById('echarts7404'));\n    eChartecharts7404.setOption(optionecharts7404);\n    var eChartecharts7404ResizeHandler = function() {\n      eChartecharts7404.resize();\n    };\n    window.addEventListener(\"resize\", eChartecharts7404ResizeHandler);\n  }\n</script>\n<p>下面的图中，20140625 之前的表示从上市开始投入 1 元后，总市值和总股数的情况，20140625 以及以后的情况则表示在 20140625 买入 1 元后的总市值和总股数情况，其中</p>\n<ul>\n<li>Value 表示对应时间的总市值</li>\n<li>Count 表示对应时间的总股数</li>\n</ul>\n<blockquote>\n<p>下图中的每条线可以点击标题控制是否显示</p>\n</blockquote>\n\n<div id=\"echarts9375\" style=\"width: 85%;height:400px;margin: 0 auto\"></div>\n<script src=\"https://unpkg.com/echarts@5.6.0/dist/echarts.min.js\" ></script>\n<script >\n  if (window.eChartecharts9375ResizeHandler) {\n    window.removeEventListener(\"resize\", eChartecharts9375ResizeHandler);\n  }\n  var optionecharts9375 = {\n  legend: {\n    data: ['Value', 'Count']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Value',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'Count',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    },\n  ]\n};\n  if (window.echarts !== undefined) {\n    var eChartecharts9375 = echarts.init(document.getElementById('echarts9375'));\n    eChartecharts9375.setOption(optionecharts9375);\n    var eChartecharts9375ResizeHandler = function() {\n      eChartecharts9375.resize();\n    };\n    window.addEventListener(\"resize\", eChartecharts9375ResizeHandler);\n  }\n</script>\n<h2 id=\"简单分析\"><a href=\"#简单分析\" class=\"headerlink\" title=\"简单分析\"></a>简单分析</h2><p>上面的信息可以分为如下几组的对比</p>\n<ul>\n<li>不同阶段十年的对比：2001 年到 2010 年这十年，与 2015 年到 2024 年这十年对比</li>\n<li>十年和二十多年的对比：2001 年到 2012 年这 11 年，与 2001 年到 2014 年这 23 年对比</li>\n<li>二十多年前后段和后半段的对比：2001 年到 2012 年，与 2012 年到 2024 年进行对比</li>\n<li>对比分红再买入和分红不再买入的情况</li>\n</ul>\n<p>其中第一组可以发现 2001 年到 2010 年这十年总市值变为 <strong>16.56</strong>, 总股数是 <strong>0.1313</strong> 。也就是总市值变成了原来的 <strong>16</strong> 倍，股数变为原来的 <strong>3.6</strong> 倍左右；2015 年到 2024 年这十年总价值变成了 <strong>7.1</strong>，总股数变成了 <strong>0.00457</strong>, 总价值变成了原来的 <strong>7</strong> 倍左右，股数变成了原来的 <strong>1.3</strong> 倍。通过对比可以看出</p>\n<ol>\n<li>后面这十年总收益比前面十年少</li>\n<li>后面这十年总股数增加的不如前十年多</li>\n<li>总股数前十年比后十年多更多。这里可能有多个原因：1）前十年有过送股；2）前十年股价更低，同样分红的钱能买更多的股数</li>\n</ol>\n<p>第二组可以看出来，总共 24 年总市值变为 <strong>356.74</strong>，总股数变为 <strong>0.23</strong>，总市值是原来的 <strong>356</strong> 倍，总股数是原来的 <strong>6.4</strong> 倍；前 11 年总市值变为 <strong>37.33</strong>，总股数变为 <strong>0.1483</strong>, 总市值变为原来的 <strong>37</strong> 倍，总股数变为原来的 <strong>4</strong> 倍。这里可以看出来，时间长一倍，总市值不仅仅是多一倍，二十将近 <strong>10</strong> 倍，从原来的 <strong>37</strong> 倍变成了 <strong>356</strong> 倍。总股数由于后面股价上涨了，则增长不多。</p>\n<p>第三组可以看出来，前面十二年总价值从 1 涨到 <strong>37.33</strong>，总股数从 <strong>0.0356</strong> 变为 <strong>0.1483</strong>；后面十二年，价值从 <strong>37.33</strong> 涨到 <strong>356.74</strong>,总股数从 <strong>0.1483</strong> 涨到 <strong>0.23</strong>。可以看出来</p>\n<ol>\n<li>前面十二年总价值涨了 <strong>37</strong> 倍，后面十二年总价值涨了将近 <strong>10</strong> 倍</li>\n<li>前面十二年总股数涨到原来 <strong>4</strong> 倍，后面十二年总股数涨到 <strong>1.6</strong> 倍<br>可以大致认为，股数越多，总收益越多；股价更低的时候，股东总收益反而会更好。</li>\n</ol>\n<p>第四组 分红不再买入的情况下，总市值变为 <strong>248.27</strong>, 总股数变为 <strong>0.16</strong>。分红再买入的情况下，总市值变为 <strong>356.74</strong>，总股数变为 <strong>0.23</strong>。分红再投入的总收益会更高。从总收益来看差异还挺大，分红不再买入的情况下是 <strong>248</strong> 倍，分红再买入的情况下是 <strong>356</strong> 倍。</p>\n<h2 id=\"整体结论\"><a href=\"#整体结论\" class=\"headerlink\" title=\"整体结论\"></a>整体结论</h2><ol>\n<li>投资是有复利的，所以越早开始投资越好，投资的时间越长越好</li>\n<li>对于好公司（上面的茅台），不管是否分红再投入，都能有不错的收益</li>\n<li>对于好公司，分红应该再投入，收益会更多<br>3.1  分红可以理解为公司部分收益的处置权交给所有股东（而不是只有大股东），股东收到分红后至少有两个选择：1）继续买入；2）不买入该投资标的。那么这两种选择也会有不同的收益，如果不买入该投资标的的收益无法比过当前投资标的，则收益会变少 — 当然如果有正当使用需要则另说。<br>3.2  另外可以从股本位的视角来考虑，分红再买入是再增加整体股数，长远来看收益也会更好。</li>\n<li>市值 = 股数 * 单价。股数和股票单价上涨均能导致市值上涨。<br>4.1. 市值短期受市场影响（市场内参与该股票交易所有人的预期），长期受公司内在价值影响。也就是说从长期来看公司股价会围绕公司价值波动。<br>4.2. 不管股价是否增长，股数增长均会提高整体市值，但是股价增长，会导致同样资金能够买到的股数变少。<br>4.3. 因此股价大幅增长对股东来说反而不是一个好事情:1）股价是否涨高，并不会影响公司的营业情况 — 也就是盈利、分红等；2）股价涨高导致能买的股数变少（实际情况下甚至由于股价过高，分红没法购买 1 手）。</li>\n</ol>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ol>\n<li>上面的所有分析，有一个前提：公司是一个好公司。</li>\n<li>不是所有公司的收益率都如茅台，因此上述数据仅作参考。</li>\n<li>我们可以多一个维度分析公司的收益情况。如果公司是好公司的情况下，整体收益可以由 &lt;股数 * 股价&gt; 决定，那么我们在用数据进行筛选公司的时候，可以考虑分红再买入后的情况。</li>\n<li>既然上面说的分红再买入会更好，那是不是可以让公司不分红（变相的相当于再买入），分红的意义是啥呢？<br>4.1. 分红会从利润中出，公司分红表示有利润，同时如果公式有分红比例的话，会变相的约束公司不虚报利润（只可能隐藏利润） — 表明公司利润只会比表现出来的更好。也可以一定情看下监督公司一年经营情况<br>4.2. 分红后的钱股东有自由取决权，可以再买入，可以用于其他途径（生活，或者投资其他地方）</li>\n<li>分红的情况是将当年的收益分配给股东的一种形式，可以有三种：现价分红；派发新股；转增股本[2]，这里说的分红主要是是现价分红。</li>\n</ol>\n<p>另外建议结合 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a> 一起阅读（注意：里面茅台相关总收益/总股数计算有误，以本文为准），里面对不同投资标的进行一个分析</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml\">https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml</a><br>[2] <a href=\"https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html\">https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文尝试对上市公司分红以及投资复利进行一些分析，希望能够更好的了解投资的选择标准，以及操作标准。</p>\n</blockquote>\n<p>在 <a href=\"https://mp.weixin.qq.com/s/2KbUDJNn7-DLrqGPRHT0iA\">赚钱机器茅台</a> 一文中，我们有提到分红相关的事情，这里我们仍旧以茅台为例分析下分红相关的内容。</p>","more":"<h1 id=\"股本位\"><a href=\"#股本位\" class=\"headerlink\" title=\"股本位\"></a>股本位</h1><p>现在的生活中大家会以拥有 <em>本币本位/纸币本位</em> 的视角，也就是所有的价值/价格体系等都会锚定到本国法币的价值，同时也有一个 <em>金本位</em>，表示所有的价值都体现在包含多少黄金。</p>\n<p>那么对于股市投资是不是可以有一种“股本位”的视角，那么所有的目的都是以 <em>股数</em> 作为衡量，我们的目的也将变成获取更多的 <em>股数</em>。</p>\n<h1 id=\"分红以及投资收益\"><a href=\"#分红以及投资收益\" class=\"headerlink\" title=\"分红以及投资收益\"></a>分红以及投资收益</h1><p>接下来我们以茅台上市后股东收益来阐述分红，复利，收益等。</p>\n<h2 id=\"分析情况说明\"><a href=\"#分析情况说明\" class=\"headerlink\" title=\"分析情况说明\"></a>分析情况说明</h2><p>首先描述下本文会使用到的一些情况</p>\n<ol>\n<li>本文假设股票可以零散买入，也就是没有最低股数要求，甚至可以买入小于 1 股（比如 0.01 股）</li>\n<li>对于茅台整个上市历史的收益，起点为上市是购入 1 元茅台股（为了计算方便，不影响整体收益比例）</li>\n<li>对于比较中最近十年的收益情况，起点为 2015 年选择一个市值高点，以市价买入 1 元茅台股票</li>\n</ol>\n<p>原始数据整理如下，数据来源[1]，股数计算公式参考图片中左上角的公式，市值是 股数 * 股价。</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121251913.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121253102.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121254827.png\" alt=\"\"></p>\n<h2 id=\"收益和股数\"><a href=\"#收益和股数\" class=\"headerlink\" title=\"收益和股数\"></a>收益和股数</h2><p>通过整体茅台的数据，绘制如下几张图，下图中展示了不同纬度情况下茅台股票的收益（总市值和总股数），其中</p>\n<ul>\n<li>ValueFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总市值</li>\n<li>CountFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总股数</li>\n<li>ValueFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总市值</li>\n<li>CountFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总股数</li>\n</ul>\n<blockquote>\n<p>选择 20150526 是因为当天市值是当年一个高值<br>下图中的每条线可以点击标题控制是否显示</p>\n</blockquote>\n\n<div id=\"echarts7404\" style=\"width: 85%;height:400px;margin: 0 auto\"></div>\n<script src=\"https://unpkg.com/echarts@5.6.0/dist/echarts.min.js\" ></script>\n<script >\n  if (window.eChartecharts7404ResizeHandler) {\n    window.removeEventListener(\"resize\", eChartecharts7404ResizeHandler);\n  }\n  var optionecharts7404 = {\n  legend: {\n    data: ['ValueFromInit', 'CountFromInit', 'ValueFrom2015', 'CountFrom2015']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'ValueFromInit',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 24.64, 44.26, 56.68, 89.67, 157.71, 203.64, 305.67, 442.03, 433.51, 376.70, 376.17, 371.87, 344.64, 356.74],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'ValueFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'CountFromInit',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.1732, 0.1938, 0.1980, 0.2010, 0.2039, 0.2069, 0.2093, 0.2112, 0.2135, 0.2162, 0.2190, 0.2220, 0.2265, 0.23],\n      type: 'line',\n      yAxisIndex: 1\n    },\n    {\n      name: 'CountFrom2015',\n      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    }\n  ]\n};\n  if (window.echarts !== undefined) {\n    var eChartecharts7404 = echarts.init(document.getElementById('echarts7404'));\n    eChartecharts7404.setOption(optionecharts7404);\n    var eChartecharts7404ResizeHandler = function() {\n      eChartecharts7404.resize();\n    };\n    window.addEventListener(\"resize\", eChartecharts7404ResizeHandler);\n  }\n</script>\n<p>下面的图中，20140625 之前的表示从上市开始投入 1 元后，总市值和总股数的情况，20140625 以及以后的情况则表示在 20140625 买入 1 元后的总市值和总股数情况，其中</p>\n<ul>\n<li>Value 表示对应时间的总市值</li>\n<li>Count 表示对应时间的总股数</li>\n</ul>\n<blockquote>\n<p>下图中的每条线可以点击标题控制是否显示</p>\n</blockquote>\n\n<div id=\"echarts9375\" style=\"width: 85%;height:400px;margin: 0 auto\"></div>\n<script src=\"https://unpkg.com/echarts@5.6.0/dist/echarts.min.js\" ></script>\n<script >\n  if (window.eChartecharts9375ResizeHandler) {\n    window.removeEventListener(\"resize\", eChartecharts9375ResizeHandler);\n  }\n  var optionecharts9375 = {\n  legend: {\n    data: ['Value', 'Count']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n    {\n      name: 'stock-count',\n      type: 'value'\n    }\n  ],\n  series: [\n    {\n      name: 'Value',\n      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: 'Count',\n      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],\n      type: 'line',\n      yAxisIndex: 1\n    },\n  ]\n};\n  if (window.echarts !== undefined) {\n    var eChartecharts9375 = echarts.init(document.getElementById('echarts9375'));\n    eChartecharts9375.setOption(optionecharts9375);\n    var eChartecharts9375ResizeHandler = function() {\n      eChartecharts9375.resize();\n    };\n    window.addEventListener(\"resize\", eChartecharts9375ResizeHandler);\n  }\n</script>\n<h2 id=\"简单分析\"><a href=\"#简单分析\" class=\"headerlink\" title=\"简单分析\"></a>简单分析</h2><p>上面的信息可以分为如下几组的对比</p>\n<ul>\n<li>不同阶段十年的对比：2001 年到 2010 年这十年，与 2015 年到 2024 年这十年对比</li>\n<li>十年和二十多年的对比：2001 年到 2012 年这 11 年，与 2001 年到 2014 年这 23 年对比</li>\n<li>二十多年前后段和后半段的对比：2001 年到 2012 年，与 2012 年到 2024 年进行对比</li>\n<li>对比分红再买入和分红不再买入的情况</li>\n</ul>\n<p>其中第一组可以发现 2001 年到 2010 年这十年总市值变为 <strong>16.56</strong>, 总股数是 <strong>0.1313</strong> 。也就是总市值变成了原来的 <strong>16</strong> 倍，股数变为原来的 <strong>3.6</strong> 倍左右；2015 年到 2024 年这十年总价值变成了 <strong>7.1</strong>，总股数变成了 <strong>0.00457</strong>, 总价值变成了原来的 <strong>7</strong> 倍左右，股数变成了原来的 <strong>1.3</strong> 倍。通过对比可以看出</p>\n<ol>\n<li>后面这十年总收益比前面十年少</li>\n<li>后面这十年总股数增加的不如前十年多</li>\n<li>总股数前十年比后十年多更多。这里可能有多个原因：1）前十年有过送股；2）前十年股价更低，同样分红的钱能买更多的股数</li>\n</ol>\n<p>第二组可以看出来，总共 24 年总市值变为 <strong>356.74</strong>，总股数变为 <strong>0.23</strong>，总市值是原来的 <strong>356</strong> 倍，总股数是原来的 <strong>6.4</strong> 倍；前 11 年总市值变为 <strong>37.33</strong>，总股数变为 <strong>0.1483</strong>, 总市值变为原来的 <strong>37</strong> 倍，总股数变为原来的 <strong>4</strong> 倍。这里可以看出来，时间长一倍，总市值不仅仅是多一倍，二十将近 <strong>10</strong> 倍，从原来的 <strong>37</strong> 倍变成了 <strong>356</strong> 倍。总股数由于后面股价上涨了，则增长不多。</p>\n<p>第三组可以看出来，前面十二年总价值从 1 涨到 <strong>37.33</strong>，总股数从 <strong>0.0356</strong> 变为 <strong>0.1483</strong>；后面十二年，价值从 <strong>37.33</strong> 涨到 <strong>356.74</strong>,总股数从 <strong>0.1483</strong> 涨到 <strong>0.23</strong>。可以看出来</p>\n<ol>\n<li>前面十二年总价值涨了 <strong>37</strong> 倍，后面十二年总价值涨了将近 <strong>10</strong> 倍</li>\n<li>前面十二年总股数涨到原来 <strong>4</strong> 倍，后面十二年总股数涨到 <strong>1.6</strong> 倍<br>可以大致认为，股数越多，总收益越多；股价更低的时候，股东总收益反而会更好。</li>\n</ol>\n<p>第四组 分红不再买入的情况下，总市值变为 <strong>248.27</strong>, 总股数变为 <strong>0.16</strong>。分红再买入的情况下，总市值变为 <strong>356.74</strong>，总股数变为 <strong>0.23</strong>。分红再投入的总收益会更高。从总收益来看差异还挺大，分红不再买入的情况下是 <strong>248</strong> 倍，分红再买入的情况下是 <strong>356</strong> 倍。</p>\n<h2 id=\"整体结论\"><a href=\"#整体结论\" class=\"headerlink\" title=\"整体结论\"></a>整体结论</h2><ol>\n<li>投资是有复利的，所以越早开始投资越好，投资的时间越长越好</li>\n<li>对于好公司（上面的茅台），不管是否分红再投入，都能有不错的收益</li>\n<li>对于好公司，分红应该再投入，收益会更多<br>3.1  分红可以理解为公司部分收益的处置权交给所有股东（而不是只有大股东），股东收到分红后至少有两个选择：1）继续买入；2）不买入该投资标的。那么这两种选择也会有不同的收益，如果不买入该投资标的的收益无法比过当前投资标的，则收益会变少 — 当然如果有正当使用需要则另说。<br>3.2  另外可以从股本位的视角来考虑，分红再买入是再增加整体股数，长远来看收益也会更好。</li>\n<li>市值 = 股数 * 单价。股数和股票单价上涨均能导致市值上涨。<br>4.1. 市值短期受市场影响（市场内参与该股票交易所有人的预期），长期受公司内在价值影响。也就是说从长期来看公司股价会围绕公司价值波动。<br>4.2. 不管股价是否增长，股数增长均会提高整体市值，但是股价增长，会导致同样资金能够买到的股数变少。<br>4.3. 因此股价大幅增长对股东来说反而不是一个好事情:1）股价是否涨高，并不会影响公司的营业情况 — 也就是盈利、分红等；2）股价涨高导致能买的股数变少（实际情况下甚至由于股价过高，分红没法购买 1 手）。</li>\n</ol>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ol>\n<li>上面的所有分析，有一个前提：公司是一个好公司。</li>\n<li>不是所有公司的收益率都如茅台，因此上述数据仅作参考。</li>\n<li>我们可以多一个维度分析公司的收益情况。如果公司是好公司的情况下，整体收益可以由 &lt;股数 * 股价&gt; 决定，那么我们在用数据进行筛选公司的时候，可以考虑分红再买入后的情况。</li>\n<li>既然上面说的分红再买入会更好，那是不是可以让公司不分红（变相的相当于再买入），分红的意义是啥呢？<br>4.1. 分红会从利润中出，公司分红表示有利润，同时如果公式有分红比例的话，会变相的约束公司不虚报利润（只可能隐藏利润） — 表明公司利润只会比表现出来的更好。也可以一定情看下监督公司一年经营情况<br>4.2. 分红后的钱股东有自由取决权，可以再买入，可以用于其他途径（生活，或者投资其他地方）</li>\n<li>分红的情况是将当年的收益分配给股东的一种形式，可以有三种：现价分红；派发新股；转增股本[2]，这里说的分红主要是是现价分红。</li>\n</ol>\n<p>另外建议结合 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a> 一起阅读（注意：里面茅台相关总收益/总股数计算有误，以本文为准），里面对不同投资标的进行一个分析</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml\">https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml</a><br>[2] <a href=\"https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html\">https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html</a></p>"},{"title":"比较，机会成本以及迭代速度","date":"2025-04-17T08:53:32.000Z","toc":true,"_content":"> 本文希望能够通过对一些例子，梳理一些基本/常用的事项。\n\n在 [分红及投资复利-以茅台为例](https://mp.weixin.qq.com/s/7T22TF60g_FQV10xfzZBZw) 一文中主要阐述了投资中复利的力量，从相关数据可以看出，复利能够让我们的得到更好的结果，复利中结果和利率也会相关。\n\n本文尝试对利率(本文中的迭代速度)，比较以及机会成本进行相关阐述，希望能对这些有一个更深的认识。部分想法受《雪球特别版-段永平投资问答录》启发。 \n\n<!-- more -->\n\n# 迭代速度\n\n复利中有两个因为比较重要：时间，和增长率。时间我们在之前的文章中有大致描述。增长率/迭代速度 会在这里进行描述。\n\n迭代速度大致分为三类：负数，零 和正数。其中负数表示往反方向发展，零表示不发展，正数表示往正方向发展。\n\n下面的图形中展示了不同情况下 20 年后的总收益\n- 迭代速度分别是 2%，5%，8%，10%，15%，20%，30%，-2%，-5%，-8%，-10% 的总收益\n- 迭代速度是 8%，15% 的情况下，每过两年会有 -2% 的增长的情况\n\n> 这些数字的选择，大概是，每年 CPI 涨幅 2% 左右，GDP 涨幅 5% 左右，CPI + GDP 大概 8%，具体可以参考 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ)\n> 时间跨度选择的是 20 年\n\n> 下图中通过点击标题，可以展示/隐藏不同情况下的曲线\n\n{% echarts 85% 400 %}\n{\n  legend: {\n    data: ['2', '5', '8', '8(-2)', '10', '15', '15(-2)', '20', '25', '-2', '-5', '-8', '-10']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n  ],\n  series: [\n    {\n      name: '2',\n      data: [1, 1.02, 1.0404, 1.061208, 1.08243216, 1.1040808032, 1.126162419264, 1.14868566764928, 1.1716593810022657, 1.195092568622311, 1.2189944199947573, 1.2433743083946525, 1.2682417945625455, 1.2936066304537963, 1.3194787630628724, 1.3458683383241299, 1.3727857050906125, 1.4002414191924248, 1.4282462475762734, 1.4568111725277988, 1.485947395978355],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '5',\n      data: [1, 1.05, 1.1025, 1.1576250000000001, 1.2155062500000002, 1.2762815625000004, 1.3400956406250004, 1.4071004226562505, 1.477455443789063, 1.5513282159785162, 1.628894626777442, 1.7103393581163142, 1.79585632602213, 1.8856491423232367, 1.9799315994393987, 2.0789281794113688, 2.1828745883819374, 2.2920183178010345, 2.406619233691086, 2.5269501953756404, 2.6532977051444226],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8',\n      data: [1, 1.08, 1.1664, 1.2597120000000002, 1.3604889600000003, 1.4693280768000003, 1.5868743229440005, 1.7138242687795207, 1.8509302102818825, 1.9990046271044333, 2.158924997272788, 2.331638997054611, 2.5181701168189803, 2.719623726164499, 2.937193624257659, 3.172169114198272, 3.425942643334134, 3.7000180548008648, 3.9960194991849343, 4.315701059119729, 4.660957143849308],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8(-2)',\n      data: [1, 1.08, 1.1664, 1.143072, 1.2345177600000001, 1.3332791808000002, 1.306613597184, 1.41114268495872, 1.5240340997554178, 1.4935534177603094, 1.6130376911811342, 1.742080706475625, 1.7072390923461125, 1.8438182197338016, 1.9913236773125058, 1.9514972037662557, 2.107616980067556, 2.2762263384729606, 2.2307018117035016, 2.409157956639782, 2.601890593170965],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '10',\n      data: [1, 1.1, 1.2100000000000002, 1.3310000000000004, 1.4641000000000006, 1.6105100000000008, 1.771561000000001, 1.9487171000000014, 2.1435888100000016, 2.357947691000002, 2.5937424601000023, 2.853116706110003, 3.1384283767210035, 3.4522712143931042, 3.797498335832415, 4.177248169415656, 4.594972986357222, 5.054470284992944, 5.559917313492239, 6.115909044841463, 6.72749994932561],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15',\n      data: [1, 1.15, 1.3224999999999998, 1.5208749999999995, 1.7490062499999994, 2.0113571874999994, 2.313060765624999, 2.6600198804687487, 3.0590228625390607, 3.5178762919199196, 4.0455577357079076, 4.652391396064093, 5.350250105473707, 6.152787621294762, 7.075705764488976, 8.137061629162321, 9.35762087353667, 10.761264004567169, 12.375453605252243, 14.231771646040078, 16.36653739294609],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15(-2)',\n      data: [1, 1.15, 1.3224999999999998, 1.2960499999999997, 1.4904574999999995, 1.7140261249999993, 1.6797456024999993, 1.931707442874999, 2.221463559306249, 2.1770342881201237, 2.503589431338142, 2.879127846038863, 2.8215452891180854, 3.244777082485798, 3.7314936448586677, 3.6568637719614943, 4.205393337755718, 4.836202338419076, 4.739478291650695, 5.450400035398299, 6.267960040708043],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '20',\n      data: [1, 1.2, 1.44, 1.728, 2.0736, 2.48832, 2.9859839999999997, 3.5831807999999996, 4.299816959999999, 5.159780351999999, 6.191736422399999, 7.430083706879999, 8.916100448255998, 10.699320537907196, 12.839184645488634, 15.407021574586361, 18.48842588950363, 22.186111067404358, 26.62333328088523, 31.947999937062274, 38.33759992447473],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '25',\n      data: [1, 1.25, 1.5625, 1.953125, 2.44140625, 3.0517578125, 3.814697265625, 4.76837158203125, 5.9604644775390625, 7.450580596923828, 9.313225746154785, 11.641532182693481, 14.551915228366852, 18.189894035458565, 22.737367544323206, 28.421709430404007, 35.52713678800501, 44.40892098500626, 55.51115123125783, 69.38893903907228, 86.73617379884035],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-2',\n      data: [1, 0.98, 0.9603999999999999, 0.9411919999999999, 0.9223681599999999, 0.9039207967999998, 0.8858423808639998, 0.8681255332467198, 0.8507630225817854, 0.8337477621301497, 0.8170728068875467, 0.8007313507497957, 0.7847167237347998, 0.7690223892601038, 0.7536419414749017, 0.7385691026454037, 0.7237977205924956, 0.7093217661806457, 0.6951353308570327, 0.6812326242398921, 0.6676079717550942],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-5',\n      data: [1, 0.95, 0.9025, 0.8573749999999999, 0.8145062499999999, 0.7737809374999999, 0.7350918906249998, 0.6983372960937497, 0.6634204312890623, 0.6302494097246091, 0.5987369392383786, 0.5688000922764596, 0.5403600876626365, 0.5133420832795047, 0.48767497911552943, 0.46329123015975293, 0.44012666865176525, 0.41812033521917696, 0.3972143184582181, 0.37735360253530714, 0.35848592240854177],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-8',\n      data: [1, 0.92, 0.8464, 0.778688, 0.7163929600000001, 0.6590815232000001, 0.6063550013440001, 0.5578466012364801, 0.5132188731375618, 0.47216136328655683, 0.4343884542236323, 0.3996373778857418, 0.36766638765488246, 0.3382530766424919, 0.31119283051109253, 0.28629740407020515, 0.26339361174458875, 0.24232212280502166, 0.22293635298061995, 0.20510144474217037, 0.18869332916279674],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-10',\n      data: [1, 0.9, 0.81, 0.7290000000000001, 0.6561000000000001, 0.5904900000000002, 0.5314410000000002, 0.47829690000000014, 0.43046721000000016, 0.38742048900000015, 0.34867844010000015, 0.31381059609000017, 0.28242953648100017, 0.25418658283290013, 0.22876792454961012, 0.2058911320946491, 0.1853020188851842, 0.16677181699666577, 0.1500946352969992, 0.13508517176729928, 0.12157665459056936],\n      type: 'line',\n      yAxisIndex: 0\n    }\n  ]\n}\n{% endecharts %}\n\n\n我们可以大致对比几组上面的情况：\n- 不同迭代速度下 10/20 年后的情况\n- 同一迭代速度前 10 年和后 10 年的情况\n- 同一利率下有回撤与无回撤的情况对比\n- 负利率情况下的情况\n\n我们可以看到 5%，10%，15%，20% 迭代速度下\n- 10 年后，分别的总收益是 1.62, 2.59，4.04, 6.19, 可以看出不同迭代速度下，总收益差距还是不少的，但是好像也并没有那么大（从 5% 增长到 10%，增长了没有 1 倍，从 10% 增长到 20% 的情况下，总收益增长了 1 倍多一点）；\n- 20 年后，分别的总收益是 2.65, 6.72, 16.36, 38.33. 拉长时间后，如果迭代速度增加越大，整体收益会越高，而且迭代速度每增长 5%，整体收益增长 2-3 倍的样子。\n\n\n在不同迭代速度下（5%，10%，15%，20%），前 10 年和后 10 年的增长分别如下\n\n| 迭代速度 | 10 年收益| 20 年总收益 |\n| -- | -- | -- |\n| 5% | 1.62 | 2.65 |\n| 10% | 2.59 | 6.72 |\n| 15% | 4.04 | 16.36 |\n| 20% | 6.19 | 38.33 |\n\n可以看出如果迭代速度越大，那么 20 年和 10 年总收益差距越大（但是前 10 年的增长率和后十年的增长率实际是一样的，因为都是 (1 + r) ^ 10), 整体差距来自于基数的差异，由于迭代速度越大，第 10 年的时候整体收益越大，因此第 20 年的时候总收益会越好（基于第 10 年的总收益）\n\n\n接下来对比下，每两年有 2% 回撤的增长情况：增长率分别为 8% 和 15%，然后另外在当前迭代速度下，每 3 年有 2% 的回撤\n- 在第 10 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分别是：2.15，1.61, 4.04, 2.5 ，可以看到每 3 年回撤 2% 对整体收益影响就挺大：总收益将近少了一半。\n- 第 20 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分>别是：4.6, 2.6, 16.3, 6.2。可以看出年限越长，有回撤的和无回撤的差距更大。\n\n\n接下来再看看负迭代速度的情况，-2%，-5%，-8%，-10% 迭代速度的情况下\n10 年的情况下，总收益分别为 0.81, 0.59, 0.43, 0.34， 在 20 年的时候总收益分别为 0.66, 0.35, 0.18, 0.12。不管负迭代速度是多少，时间久了之后，整体收益会比较明显，如果迭代速度达到 -10% 的情况下，10 年就已经不剩一半了，20 年就只剩 1 成了。\n\n\n另外由于股市是非固定收益，因此不卖出的情况下，可以不算回撤（但是股价能否涨上去是另外一回事），股市更好的计算比例需要看长期的复合年化收益。如果自己不好计算，可以找一个 App 帮助计算。\n\n# 比较和机会成本\n\n投资中决策是非常重要的一点，决策会涉及到比较，在日常生活中也会经常有比较, 这里主要阐述一些常见的比较情况。\n\n有两个假设前提\n1 同一时刻只能做一件事情\n2 时间是不可逆的，过去了就没有了\n\n比较的时候可能会涉及多个维度，或者对比的维度不统一，而在做决策的时候更好的是能够对一个或多个选项进行同样维度的比较。比如下面的一些比较问题：\n- 投资中，某个投资标的数据发生变化，那么是否实际影响投资决策（比如茅台的预收账款变少）\n- 低价促销的东西，到底要不要买，不买感觉亏了，买好像又不是特别需要\n- 某类投资方式能大概率变富，但是时间比较长，比如 20 年，这种要不要投呢\n\n下面尝试对每一个问题进行详细的阐述\n\n## 投资数据变化的影响\n之前文章中我们说过，买股票就是买公司，那么公司的指标就会影响公司的情况，到底哪些指标的变化，变化成啥样会影响公司呢\n\n这里以一个预收款减少的情况作为例子，比如某公司某年的预售款比之前少了，可能不少人会觉得，这是公司变差的一个信号，甚至说已经不是一个可以继续投资的信号了。\n\n回到投资的本质来说，我们希望将钱放到某些投资标的中，从而获取更好的收益，就像 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ) 描述的那样。那么我们应该比较的是：1）当前公司因为预收款等实际影响公司的营收；2）其他公司的情况怎么样 -- 因为如果我们不投资到当前公司，就需要投资到其他地方。\n\n然后我们可能发现，大部分公司实际上是没有预收款的，反而是有不少应收账款。那么预收款减少也就是说还有，还有就表示相对下游还有定价权（比较抢手，下游希望通过提前交钱来预订）。那么就要看这个预收款减少是否有影响公司未来的盈利能力。\n\n## 促销商品购买\n商品经常会使用类似降价的方式来进行促销，比如原价 A 售卖的，现在通过降价 30% 售卖，而且降价只有最后 3 天。\n\n那么这种情况下我们的购买策略应该比较的是：[购买] VS [不购买] 是否影响自己的生活情况。而不是 [原价] 和 [降价了 30%] 进行对比。将是否需要和价格情况进行组合将得到如下的情况\n\n|  | 需要 | 不需要 |\n| -- | -- | -- |\n| 原价 | (1) | (2) |\n| 降价 | (3) | (4) | \n\n也就是对应的优先级应该是 (3) > (1) >> (4) > (2)。也就是说在我们应该在需要的情况下再考虑价格，如果不需要的情况下，就算降价购买，那也是一种浪费。\n\n## 长期和短期\n在价值投资中，往往需要比较长时间才能有好的结果，比如 10 年 5 倍，20 年 15 倍（复合年化 15% 已经很不错了），但是可能有人看到后会说，自己希望是短期就能变富，10 年 20 年太久了，另外看上去 10 年 20 年后这个收益好像也不是很高。\n\n这个可以这样比较：[选择这种投资方式，复合年化 15%] VS [其他投资渠道]。然后比较两种投资渠道哪个更能满足自己的需求\n- 投资时间的情况（短期还是长期）\n- 变富\n\n其中短期和长期来说，不同的投资市场会影响投资决策，如果是短期投资，不一定适合投资非固定收益的标的（比如股市），因为股市短期的涨跌太难预测，但是长期来说，股价围绕公司价值波动，那么股价就更好预测一些。\n\n另外变富是人人都想要的，但是具体到投资来说，就会有复合年化收益来衡量。对于不同收益率在不同年限中的总收益情况可以参考前文的情况。然后我们应该考虑的是 [选择该方式] 和 [选择其他方式] 哪个更能够让自己变的更富有，而不是单纯的觉得某个收益率太高或者太低。\n\n## 机会成本\n比较会进一步促进决策（不行动也是一种决策），由于没法同时做两件事，因此部分只能进行假设的比较，因此选择的成本实际是我们选择了 A 之后，剩下的所有选项中最好结果来决定的，这也就是我们的机会成本 -- 因为当前决策导致我们丧失了一次机会。\n\n投资是一个称重游戏，那么我们需要做的是，在较长的时间内，比较多个投资标的，哪个会增长的更多，所有投资的机会成本是自己能获得的稳定收益的最高值，这个对大部分人来说是长期无风险国债，具体的利率可以参考 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ)。然后对于未来现金流折线来说，折现率我们也可以使用机会成本来进行计算。\n\n# 总结\n本文尝试描述迭代速度/增长比率，比较以及机会成本，这些不仅仅在投资中重要，在平时生活中也有不小影响，有复利的情况下都能套用迭代速度，然后比较和机会成本也会影响我们的每次决策，从而影响我们的生活。\n\n但是需要注意的一点是 决策的质量 和 决策后的结果好坏并不完全相关，它们会有如下四种情况\n\n|  | 好决策 | 差决策 |\n| -- | -- | -- |\n| 好结果 | 1 | 2 |\n| 坏结果 | 3 | 4 |\n\n其中 1 和 4 是我们很容易了解并接受的，但是实际生活中还会有 2 和 3 的存在，如果在对过去决策进行复盘的时候，我们需要考虑到这些情况的存在，另外每次决策的时候也应该记录更多的上下文信息，这样在后续复盘的时候能够知道当时的决策是否好，而不仅仅是通过结果来进行判断。\n","source":"_posts/compare-opportunity-cost-and-ratio.md","raw":"---\ntitle: 比较，机会成本以及迭代速度\ndate: 2025-04-17 16:53:32\ntags:\n    - compare\n    - opportunity-cost\n    - iterative velocity\ntoc: true\n---\n> 本文希望能够通过对一些例子，梳理一些基本/常用的事项。\n\n在 [分红及投资复利-以茅台为例](https://mp.weixin.qq.com/s/7T22TF60g_FQV10xfzZBZw) 一文中主要阐述了投资中复利的力量，从相关数据可以看出，复利能够让我们的得到更好的结果，复利中结果和利率也会相关。\n\n本文尝试对利率(本文中的迭代速度)，比较以及机会成本进行相关阐述，希望能对这些有一个更深的认识。部分想法受《雪球特别版-段永平投资问答录》启发。 \n\n<!-- more -->\n\n# 迭代速度\n\n复利中有两个因为比较重要：时间，和增长率。时间我们在之前的文章中有大致描述。增长率/迭代速度 会在这里进行描述。\n\n迭代速度大致分为三类：负数，零 和正数。其中负数表示往反方向发展，零表示不发展，正数表示往正方向发展。\n\n下面的图形中展示了不同情况下 20 年后的总收益\n- 迭代速度分别是 2%，5%，8%，10%，15%，20%，30%，-2%，-5%，-8%，-10% 的总收益\n- 迭代速度是 8%，15% 的情况下，每过两年会有 -2% 的增长的情况\n\n> 这些数字的选择，大概是，每年 CPI 涨幅 2% 左右，GDP 涨幅 5% 左右，CPI + GDP 大概 8%，具体可以参考 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ)\n> 时间跨度选择的是 20 年\n\n> 下图中通过点击标题，可以展示/隐藏不同情况下的曲线\n\n{% echarts 85% 400 %}\n{\n  legend: {\n    data: ['2', '5', '8', '8(-2)', '10', '15', '15(-2)', '20', '25', '-2', '-5', '-8', '-10']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n  ],\n  series: [\n    {\n      name: '2',\n      data: [1, 1.02, 1.0404, 1.061208, 1.08243216, 1.1040808032, 1.126162419264, 1.14868566764928, 1.1716593810022657, 1.195092568622311, 1.2189944199947573, 1.2433743083946525, 1.2682417945625455, 1.2936066304537963, 1.3194787630628724, 1.3458683383241299, 1.3727857050906125, 1.4002414191924248, 1.4282462475762734, 1.4568111725277988, 1.485947395978355],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '5',\n      data: [1, 1.05, 1.1025, 1.1576250000000001, 1.2155062500000002, 1.2762815625000004, 1.3400956406250004, 1.4071004226562505, 1.477455443789063, 1.5513282159785162, 1.628894626777442, 1.7103393581163142, 1.79585632602213, 1.8856491423232367, 1.9799315994393987, 2.0789281794113688, 2.1828745883819374, 2.2920183178010345, 2.406619233691086, 2.5269501953756404, 2.6532977051444226],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8',\n      data: [1, 1.08, 1.1664, 1.2597120000000002, 1.3604889600000003, 1.4693280768000003, 1.5868743229440005, 1.7138242687795207, 1.8509302102818825, 1.9990046271044333, 2.158924997272788, 2.331638997054611, 2.5181701168189803, 2.719623726164499, 2.937193624257659, 3.172169114198272, 3.425942643334134, 3.7000180548008648, 3.9960194991849343, 4.315701059119729, 4.660957143849308],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8(-2)',\n      data: [1, 1.08, 1.1664, 1.143072, 1.2345177600000001, 1.3332791808000002, 1.306613597184, 1.41114268495872, 1.5240340997554178, 1.4935534177603094, 1.6130376911811342, 1.742080706475625, 1.7072390923461125, 1.8438182197338016, 1.9913236773125058, 1.9514972037662557, 2.107616980067556, 2.2762263384729606, 2.2307018117035016, 2.409157956639782, 2.601890593170965],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '10',\n      data: [1, 1.1, 1.2100000000000002, 1.3310000000000004, 1.4641000000000006, 1.6105100000000008, 1.771561000000001, 1.9487171000000014, 2.1435888100000016, 2.357947691000002, 2.5937424601000023, 2.853116706110003, 3.1384283767210035, 3.4522712143931042, 3.797498335832415, 4.177248169415656, 4.594972986357222, 5.054470284992944, 5.559917313492239, 6.115909044841463, 6.72749994932561],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15',\n      data: [1, 1.15, 1.3224999999999998, 1.5208749999999995, 1.7490062499999994, 2.0113571874999994, 2.313060765624999, 2.6600198804687487, 3.0590228625390607, 3.5178762919199196, 4.0455577357079076, 4.652391396064093, 5.350250105473707, 6.152787621294762, 7.075705764488976, 8.137061629162321, 9.35762087353667, 10.761264004567169, 12.375453605252243, 14.231771646040078, 16.36653739294609],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15(-2)',\n      data: [1, 1.15, 1.3224999999999998, 1.2960499999999997, 1.4904574999999995, 1.7140261249999993, 1.6797456024999993, 1.931707442874999, 2.221463559306249, 2.1770342881201237, 2.503589431338142, 2.879127846038863, 2.8215452891180854, 3.244777082485798, 3.7314936448586677, 3.6568637719614943, 4.205393337755718, 4.836202338419076, 4.739478291650695, 5.450400035398299, 6.267960040708043],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '20',\n      data: [1, 1.2, 1.44, 1.728, 2.0736, 2.48832, 2.9859839999999997, 3.5831807999999996, 4.299816959999999, 5.159780351999999, 6.191736422399999, 7.430083706879999, 8.916100448255998, 10.699320537907196, 12.839184645488634, 15.407021574586361, 18.48842588950363, 22.186111067404358, 26.62333328088523, 31.947999937062274, 38.33759992447473],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '25',\n      data: [1, 1.25, 1.5625, 1.953125, 2.44140625, 3.0517578125, 3.814697265625, 4.76837158203125, 5.9604644775390625, 7.450580596923828, 9.313225746154785, 11.641532182693481, 14.551915228366852, 18.189894035458565, 22.737367544323206, 28.421709430404007, 35.52713678800501, 44.40892098500626, 55.51115123125783, 69.38893903907228, 86.73617379884035],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-2',\n      data: [1, 0.98, 0.9603999999999999, 0.9411919999999999, 0.9223681599999999, 0.9039207967999998, 0.8858423808639998, 0.8681255332467198, 0.8507630225817854, 0.8337477621301497, 0.8170728068875467, 0.8007313507497957, 0.7847167237347998, 0.7690223892601038, 0.7536419414749017, 0.7385691026454037, 0.7237977205924956, 0.7093217661806457, 0.6951353308570327, 0.6812326242398921, 0.6676079717550942],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-5',\n      data: [1, 0.95, 0.9025, 0.8573749999999999, 0.8145062499999999, 0.7737809374999999, 0.7350918906249998, 0.6983372960937497, 0.6634204312890623, 0.6302494097246091, 0.5987369392383786, 0.5688000922764596, 0.5403600876626365, 0.5133420832795047, 0.48767497911552943, 0.46329123015975293, 0.44012666865176525, 0.41812033521917696, 0.3972143184582181, 0.37735360253530714, 0.35848592240854177],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-8',\n      data: [1, 0.92, 0.8464, 0.778688, 0.7163929600000001, 0.6590815232000001, 0.6063550013440001, 0.5578466012364801, 0.5132188731375618, 0.47216136328655683, 0.4343884542236323, 0.3996373778857418, 0.36766638765488246, 0.3382530766424919, 0.31119283051109253, 0.28629740407020515, 0.26339361174458875, 0.24232212280502166, 0.22293635298061995, 0.20510144474217037, 0.18869332916279674],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-10',\n      data: [1, 0.9, 0.81, 0.7290000000000001, 0.6561000000000001, 0.5904900000000002, 0.5314410000000002, 0.47829690000000014, 0.43046721000000016, 0.38742048900000015, 0.34867844010000015, 0.31381059609000017, 0.28242953648100017, 0.25418658283290013, 0.22876792454961012, 0.2058911320946491, 0.1853020188851842, 0.16677181699666577, 0.1500946352969992, 0.13508517176729928, 0.12157665459056936],\n      type: 'line',\n      yAxisIndex: 0\n    }\n  ]\n}\n{% endecharts %}\n\n\n我们可以大致对比几组上面的情况：\n- 不同迭代速度下 10/20 年后的情况\n- 同一迭代速度前 10 年和后 10 年的情况\n- 同一利率下有回撤与无回撤的情况对比\n- 负利率情况下的情况\n\n我们可以看到 5%，10%，15%，20% 迭代速度下\n- 10 年后，分别的总收益是 1.62, 2.59，4.04, 6.19, 可以看出不同迭代速度下，总收益差距还是不少的，但是好像也并没有那么大（从 5% 增长到 10%，增长了没有 1 倍，从 10% 增长到 20% 的情况下，总收益增长了 1 倍多一点）；\n- 20 年后，分别的总收益是 2.65, 6.72, 16.36, 38.33. 拉长时间后，如果迭代速度增加越大，整体收益会越高，而且迭代速度每增长 5%，整体收益增长 2-3 倍的样子。\n\n\n在不同迭代速度下（5%，10%，15%，20%），前 10 年和后 10 年的增长分别如下\n\n| 迭代速度 | 10 年收益| 20 年总收益 |\n| -- | -- | -- |\n| 5% | 1.62 | 2.65 |\n| 10% | 2.59 | 6.72 |\n| 15% | 4.04 | 16.36 |\n| 20% | 6.19 | 38.33 |\n\n可以看出如果迭代速度越大，那么 20 年和 10 年总收益差距越大（但是前 10 年的增长率和后十年的增长率实际是一样的，因为都是 (1 + r) ^ 10), 整体差距来自于基数的差异，由于迭代速度越大，第 10 年的时候整体收益越大，因此第 20 年的时候总收益会越好（基于第 10 年的总收益）\n\n\n接下来对比下，每两年有 2% 回撤的增长情况：增长率分别为 8% 和 15%，然后另外在当前迭代速度下，每 3 年有 2% 的回撤\n- 在第 10 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分别是：2.15，1.61, 4.04, 2.5 ，可以看到每 3 年回撤 2% 对整体收益影响就挺大：总收益将近少了一半。\n- 第 20 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分>别是：4.6, 2.6, 16.3, 6.2。可以看出年限越长，有回撤的和无回撤的差距更大。\n\n\n接下来再看看负迭代速度的情况，-2%，-5%，-8%，-10% 迭代速度的情况下\n10 年的情况下，总收益分别为 0.81, 0.59, 0.43, 0.34， 在 20 年的时候总收益分别为 0.66, 0.35, 0.18, 0.12。不管负迭代速度是多少，时间久了之后，整体收益会比较明显，如果迭代速度达到 -10% 的情况下，10 年就已经不剩一半了，20 年就只剩 1 成了。\n\n\n另外由于股市是非固定收益，因此不卖出的情况下，可以不算回撤（但是股价能否涨上去是另外一回事），股市更好的计算比例需要看长期的复合年化收益。如果自己不好计算，可以找一个 App 帮助计算。\n\n# 比较和机会成本\n\n投资中决策是非常重要的一点，决策会涉及到比较，在日常生活中也会经常有比较, 这里主要阐述一些常见的比较情况。\n\n有两个假设前提\n1 同一时刻只能做一件事情\n2 时间是不可逆的，过去了就没有了\n\n比较的时候可能会涉及多个维度，或者对比的维度不统一，而在做决策的时候更好的是能够对一个或多个选项进行同样维度的比较。比如下面的一些比较问题：\n- 投资中，某个投资标的数据发生变化，那么是否实际影响投资决策（比如茅台的预收账款变少）\n- 低价促销的东西，到底要不要买，不买感觉亏了，买好像又不是特别需要\n- 某类投资方式能大概率变富，但是时间比较长，比如 20 年，这种要不要投呢\n\n下面尝试对每一个问题进行详细的阐述\n\n## 投资数据变化的影响\n之前文章中我们说过，买股票就是买公司，那么公司的指标就会影响公司的情况，到底哪些指标的变化，变化成啥样会影响公司呢\n\n这里以一个预收款减少的情况作为例子，比如某公司某年的预售款比之前少了，可能不少人会觉得，这是公司变差的一个信号，甚至说已经不是一个可以继续投资的信号了。\n\n回到投资的本质来说，我们希望将钱放到某些投资标的中，从而获取更好的收益，就像 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ) 描述的那样。那么我们应该比较的是：1）当前公司因为预收款等实际影响公司的营收；2）其他公司的情况怎么样 -- 因为如果我们不投资到当前公司，就需要投资到其他地方。\n\n然后我们可能发现，大部分公司实际上是没有预收款的，反而是有不少应收账款。那么预收款减少也就是说还有，还有就表示相对下游还有定价权（比较抢手，下游希望通过提前交钱来预订）。那么就要看这个预收款减少是否有影响公司未来的盈利能力。\n\n## 促销商品购买\n商品经常会使用类似降价的方式来进行促销，比如原价 A 售卖的，现在通过降价 30% 售卖，而且降价只有最后 3 天。\n\n那么这种情况下我们的购买策略应该比较的是：[购买] VS [不购买] 是否影响自己的生活情况。而不是 [原价] 和 [降价了 30%] 进行对比。将是否需要和价格情况进行组合将得到如下的情况\n\n|  | 需要 | 不需要 |\n| -- | -- | -- |\n| 原价 | (1) | (2) |\n| 降价 | (3) | (4) | \n\n也就是对应的优先级应该是 (3) > (1) >> (4) > (2)。也就是说在我们应该在需要的情况下再考虑价格，如果不需要的情况下，就算降价购买，那也是一种浪费。\n\n## 长期和短期\n在价值投资中，往往需要比较长时间才能有好的结果，比如 10 年 5 倍，20 年 15 倍（复合年化 15% 已经很不错了），但是可能有人看到后会说，自己希望是短期就能变富，10 年 20 年太久了，另外看上去 10 年 20 年后这个收益好像也不是很高。\n\n这个可以这样比较：[选择这种投资方式，复合年化 15%] VS [其他投资渠道]。然后比较两种投资渠道哪个更能满足自己的需求\n- 投资时间的情况（短期还是长期）\n- 变富\n\n其中短期和长期来说，不同的投资市场会影响投资决策，如果是短期投资，不一定适合投资非固定收益的标的（比如股市），因为股市短期的涨跌太难预测，但是长期来说，股价围绕公司价值波动，那么股价就更好预测一些。\n\n另外变富是人人都想要的，但是具体到投资来说，就会有复合年化收益来衡量。对于不同收益率在不同年限中的总收益情况可以参考前文的情况。然后我们应该考虑的是 [选择该方式] 和 [选择其他方式] 哪个更能够让自己变的更富有，而不是单纯的觉得某个收益率太高或者太低。\n\n## 机会成本\n比较会进一步促进决策（不行动也是一种决策），由于没法同时做两件事，因此部分只能进行假设的比较，因此选择的成本实际是我们选择了 A 之后，剩下的所有选项中最好结果来决定的，这也就是我们的机会成本 -- 因为当前决策导致我们丧失了一次机会。\n\n投资是一个称重游戏，那么我们需要做的是，在较长的时间内，比较多个投资标的，哪个会增长的更多，所有投资的机会成本是自己能获得的稳定收益的最高值，这个对大部分人来说是长期无风险国债，具体的利率可以参考 [股市是一个好的投资渠道吗](https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ)。然后对于未来现金流折线来说，折现率我们也可以使用机会成本来进行计算。\n\n# 总结\n本文尝试描述迭代速度/增长比率，比较以及机会成本，这些不仅仅在投资中重要，在平时生活中也有不小影响，有复利的情况下都能套用迭代速度，然后比较和机会成本也会影响我们的每次决策，从而影响我们的生活。\n\n但是需要注意的一点是 决策的质量 和 决策后的结果好坏并不完全相关，它们会有如下四种情况\n\n|  | 好决策 | 差决策 |\n| -- | -- | -- |\n| 好结果 | 1 | 2 |\n| 坏结果 | 3 | 4 |\n\n其中 1 和 4 是我们很容易了解并接受的，但是实际生活中还会有 2 和 3 的存在，如果在对过去决策进行复盘的时候，我们需要考虑到这些情况的存在，另外每次决策的时候也应该记录更多的上下文信息，这样在后续复盘的时候能够知道当时的决策是否好，而不仅仅是通过结果来进行判断。\n","slug":"compare-opportunity-cost-and-ratio","published":1,"updated":"2025-04-19T14:39:45.796Z","_id":"cm9oaybst001j2umkhf4721ax","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本文希望能够通过对一些例子，梳理一些基本/常用的事项。</p>\n</blockquote>\n<p>在 <a href=\"https://mp.weixin.qq.com/s/7T22TF60g_FQV10xfzZBZw\">分红及投资复利-以茅台为例</a> 一文中主要阐述了投资中复利的力量，从相关数据可以看出，复利能够让我们的得到更好的结果，复利中结果和利率也会相关。</p>\n<p>本文尝试对利率(本文中的迭代速度)，比较以及机会成本进行相关阐述，希望能对这些有一个更深的认识。部分想法受《雪球特别版-段永平投资问答录》启发。 </p>\n<span id=\"more\"></span>\n<h1 id=\"迭代速度\"><a href=\"#迭代速度\" class=\"headerlink\" title=\"迭代速度\"></a>迭代速度</h1><p>复利中有两个因为比较重要：时间，和增长率。时间我们在之前的文章中有大致描述。增长率/迭代速度 会在这里进行描述。</p>\n<p>迭代速度大致分为三类：负数，零 和正数。其中负数表示往反方向发展，零表示不发展，正数表示往正方向发展。</p>\n<p>下面的图形中展示了不同情况下 20 年后的总收益</p>\n<ul>\n<li>迭代速度分别是 2%，5%，8%，10%，15%，20%，30%，-2%，-5%，-8%，-10% 的总收益</li>\n<li>迭代速度是 8%，15% 的情况下，每过两年会有 -2% 的增长的情况</li>\n</ul>\n<blockquote>\n<p>这些数字的选择，大概是，每年 CPI 涨幅 2% 左右，GDP 涨幅 5% 左右，CPI + GDP 大概 8%，具体可以参考 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a><br>时间跨度选择的是 20 年</p>\n<p>下图中通过点击标题，可以展示/隐藏不同情况下的曲线</p>\n</blockquote>\n\n<div id=\"echarts4680\" style=\"width: 85%;height:400px;margin: 0 auto\"></div>\n<script src=\"https://unpkg.com/echarts@5.6.0/dist/echarts.min.js\" ></script>\n<script >\n  if (window.eChartecharts4680ResizeHandler) {\n    window.removeEventListener(\"resize\", eChartecharts4680ResizeHandler);\n  }\n  var optionecharts4680 = {\n  legend: {\n    data: ['2', '5', '8', '8(-2)', '10', '15', '15(-2)', '20', '25', '-2', '-5', '-8', '-10']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n  ],\n  series: [\n    {\n      name: '2',\n      data: [1, 1.02, 1.0404, 1.061208, 1.08243216, 1.1040808032, 1.126162419264, 1.14868566764928, 1.1716593810022657, 1.195092568622311, 1.2189944199947573, 1.2433743083946525, 1.2682417945625455, 1.2936066304537963, 1.3194787630628724, 1.3458683383241299, 1.3727857050906125, 1.4002414191924248, 1.4282462475762734, 1.4568111725277988, 1.485947395978355],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '5',\n      data: [1, 1.05, 1.1025, 1.1576250000000001, 1.2155062500000002, 1.2762815625000004, 1.3400956406250004, 1.4071004226562505, 1.477455443789063, 1.5513282159785162, 1.628894626777442, 1.7103393581163142, 1.79585632602213, 1.8856491423232367, 1.9799315994393987, 2.0789281794113688, 2.1828745883819374, 2.2920183178010345, 2.406619233691086, 2.5269501953756404, 2.6532977051444226],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8',\n      data: [1, 1.08, 1.1664, 1.2597120000000002, 1.3604889600000003, 1.4693280768000003, 1.5868743229440005, 1.7138242687795207, 1.8509302102818825, 1.9990046271044333, 2.158924997272788, 2.331638997054611, 2.5181701168189803, 2.719623726164499, 2.937193624257659, 3.172169114198272, 3.425942643334134, 3.7000180548008648, 3.9960194991849343, 4.315701059119729, 4.660957143849308],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8(-2)',\n      data: [1, 1.08, 1.1664, 1.143072, 1.2345177600000001, 1.3332791808000002, 1.306613597184, 1.41114268495872, 1.5240340997554178, 1.4935534177603094, 1.6130376911811342, 1.742080706475625, 1.7072390923461125, 1.8438182197338016, 1.9913236773125058, 1.9514972037662557, 2.107616980067556, 2.2762263384729606, 2.2307018117035016, 2.409157956639782, 2.601890593170965],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '10',\n      data: [1, 1.1, 1.2100000000000002, 1.3310000000000004, 1.4641000000000006, 1.6105100000000008, 1.771561000000001, 1.9487171000000014, 2.1435888100000016, 2.357947691000002, 2.5937424601000023, 2.853116706110003, 3.1384283767210035, 3.4522712143931042, 3.797498335832415, 4.177248169415656, 4.594972986357222, 5.054470284992944, 5.559917313492239, 6.115909044841463, 6.72749994932561],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15',\n      data: [1, 1.15, 1.3224999999999998, 1.5208749999999995, 1.7490062499999994, 2.0113571874999994, 2.313060765624999, 2.6600198804687487, 3.0590228625390607, 3.5178762919199196, 4.0455577357079076, 4.652391396064093, 5.350250105473707, 6.152787621294762, 7.075705764488976, 8.137061629162321, 9.35762087353667, 10.761264004567169, 12.375453605252243, 14.231771646040078, 16.36653739294609],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15(-2)',\n      data: [1, 1.15, 1.3224999999999998, 1.2960499999999997, 1.4904574999999995, 1.7140261249999993, 1.6797456024999993, 1.931707442874999, 2.221463559306249, 2.1770342881201237, 2.503589431338142, 2.879127846038863, 2.8215452891180854, 3.244777082485798, 3.7314936448586677, 3.6568637719614943, 4.205393337755718, 4.836202338419076, 4.739478291650695, 5.450400035398299, 6.267960040708043],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '20',\n      data: [1, 1.2, 1.44, 1.728, 2.0736, 2.48832, 2.9859839999999997, 3.5831807999999996, 4.299816959999999, 5.159780351999999, 6.191736422399999, 7.430083706879999, 8.916100448255998, 10.699320537907196, 12.839184645488634, 15.407021574586361, 18.48842588950363, 22.186111067404358, 26.62333328088523, 31.947999937062274, 38.33759992447473],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '25',\n      data: [1, 1.25, 1.5625, 1.953125, 2.44140625, 3.0517578125, 3.814697265625, 4.76837158203125, 5.9604644775390625, 7.450580596923828, 9.313225746154785, 11.641532182693481, 14.551915228366852, 18.189894035458565, 22.737367544323206, 28.421709430404007, 35.52713678800501, 44.40892098500626, 55.51115123125783, 69.38893903907228, 86.73617379884035],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-2',\n      data: [1, 0.98, 0.9603999999999999, 0.9411919999999999, 0.9223681599999999, 0.9039207967999998, 0.8858423808639998, 0.8681255332467198, 0.8507630225817854, 0.8337477621301497, 0.8170728068875467, 0.8007313507497957, 0.7847167237347998, 0.7690223892601038, 0.7536419414749017, 0.7385691026454037, 0.7237977205924956, 0.7093217661806457, 0.6951353308570327, 0.6812326242398921, 0.6676079717550942],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-5',\n      data: [1, 0.95, 0.9025, 0.8573749999999999, 0.8145062499999999, 0.7737809374999999, 0.7350918906249998, 0.6983372960937497, 0.6634204312890623, 0.6302494097246091, 0.5987369392383786, 0.5688000922764596, 0.5403600876626365, 0.5133420832795047, 0.48767497911552943, 0.46329123015975293, 0.44012666865176525, 0.41812033521917696, 0.3972143184582181, 0.37735360253530714, 0.35848592240854177],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-8',\n      data: [1, 0.92, 0.8464, 0.778688, 0.7163929600000001, 0.6590815232000001, 0.6063550013440001, 0.5578466012364801, 0.5132188731375618, 0.47216136328655683, 0.4343884542236323, 0.3996373778857418, 0.36766638765488246, 0.3382530766424919, 0.31119283051109253, 0.28629740407020515, 0.26339361174458875, 0.24232212280502166, 0.22293635298061995, 0.20510144474217037, 0.18869332916279674],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-10',\n      data: [1, 0.9, 0.81, 0.7290000000000001, 0.6561000000000001, 0.5904900000000002, 0.5314410000000002, 0.47829690000000014, 0.43046721000000016, 0.38742048900000015, 0.34867844010000015, 0.31381059609000017, 0.28242953648100017, 0.25418658283290013, 0.22876792454961012, 0.2058911320946491, 0.1853020188851842, 0.16677181699666577, 0.1500946352969992, 0.13508517176729928, 0.12157665459056936],\n      type: 'line',\n      yAxisIndex: 0\n    }\n  ]\n};\n  if (window.echarts !== undefined) {\n    var eChartecharts4680 = echarts.init(document.getElementById('echarts4680'));\n    eChartecharts4680.setOption(optionecharts4680);\n    var eChartecharts4680ResizeHandler = function() {\n      eChartecharts4680.resize();\n    };\n    window.addEventListener(\"resize\", eChartecharts4680ResizeHandler);\n  }\n</script>\n<p>我们可以大致对比几组上面的情况：</p>\n<ul>\n<li>不同迭代速度下 10/20 年后的情况</li>\n<li>同一迭代速度前 10 年和后 10 年的情况</li>\n<li>同一利率下有回撤与无回撤的情况对比</li>\n<li>负利率情况下的情况</li>\n</ul>\n<p>我们可以看到 5%，10%，15%，20% 迭代速度下</p>\n<ul>\n<li>10 年后，分别的总收益是 1.62, 2.59，4.04, 6.19, 可以看出不同迭代速度下，总收益差距还是不少的，但是好像也并没有那么大（从 5% 增长到 10%，增长了没有 1 倍，从 10% 增长到 20% 的情况下，总收益增长了 1 倍多一点）；</li>\n<li>20 年后，分别的总收益是 2.65, 6.72, 16.36, 38.33. 拉长时间后，如果迭代速度增加越大，整体收益会越高，而且迭代速度每增长 5%，整体收益增长 2-3 倍的样子。</li>\n</ul>\n<p>在不同迭代速度下（5%，10%，15%，20%），前 10 年和后 10 年的增长分别如下</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>迭代速度</th>\n<th>10 年收益</th>\n<th>20 年总收益</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5%</td>\n<td>1.62</td>\n<td>2.65</td>\n</tr>\n<tr>\n<td>10%</td>\n<td>2.59</td>\n<td>6.72</td>\n</tr>\n<tr>\n<td>15%</td>\n<td>4.04</td>\n<td>16.36</td>\n</tr>\n<tr>\n<td>20%</td>\n<td>6.19</td>\n<td>38.33</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以看出如果迭代速度越大，那么 20 年和 10 年总收益差距越大（但是前 10 年的增长率和后十年的增长率实际是一样的，因为都是 (1 + r) ^ 10), 整体差距来自于基数的差异，由于迭代速度越大，第 10 年的时候整体收益越大，因此第 20 年的时候总收益会越好（基于第 10 年的总收益）</p>\n<p>接下来对比下，每两年有 2% 回撤的增长情况：增长率分别为 8% 和 15%，然后另外在当前迭代速度下，每 3 年有 2% 的回撤</p>\n<ul>\n<li>在第 10 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分别是：2.15，1.61, 4.04, 2.5 ，可以看到每 3 年回撤 2% 对整体收益影响就挺大：总收益将近少了一半。</li>\n<li>第 20 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分&gt;别是：4.6, 2.6, 16.3, 6.2。可以看出年限越长，有回撤的和无回撤的差距更大。</li>\n</ul>\n<p>接下来再看看负迭代速度的情况，-2%，-5%，-8%，-10% 迭代速度的情况下<br>10 年的情况下，总收益分别为 0.81, 0.59, 0.43, 0.34， 在 20 年的时候总收益分别为 0.66, 0.35, 0.18, 0.12。不管负迭代速度是多少，时间久了之后，整体收益会比较明显，如果迭代速度达到 -10% 的情况下，10 年就已经不剩一半了，20 年就只剩 1 成了。</p>\n<p>另外由于股市是非固定收益，因此不卖出的情况下，可以不算回撤（但是股价能否涨上去是另外一回事），股市更好的计算比例需要看长期的复合年化收益。如果自己不好计算，可以找一个 App 帮助计算。</p>\n<h1 id=\"比较和机会成本\"><a href=\"#比较和机会成本\" class=\"headerlink\" title=\"比较和机会成本\"></a>比较和机会成本</h1><p>投资中决策是非常重要的一点，决策会涉及到比较，在日常生活中也会经常有比较, 这里主要阐述一些常见的比较情况。</p>\n<p>有两个假设前提<br>1 同一时刻只能做一件事情<br>2 时间是不可逆的，过去了就没有了</p>\n<p>比较的时候可能会涉及多个维度，或者对比的维度不统一，而在做决策的时候更好的是能够对一个或多个选项进行同样维度的比较。比如下面的一些比较问题：</p>\n<ul>\n<li>投资中，某个投资标的数据发生变化，那么是否实际影响投资决策（比如茅台的预收账款变少）</li>\n<li>低价促销的东西，到底要不要买，不买感觉亏了，买好像又不是特别需要</li>\n<li>某类投资方式能大概率变富，但是时间比较长，比如 20 年，这种要不要投呢</li>\n</ul>\n<p>下面尝试对每一个问题进行详细的阐述</p>\n<h2 id=\"投资数据变化的影响\"><a href=\"#投资数据变化的影响\" class=\"headerlink\" title=\"投资数据变化的影响\"></a>投资数据变化的影响</h2><p>之前文章中我们说过，买股票就是买公司，那么公司的指标就会影响公司的情况，到底哪些指标的变化，变化成啥样会影响公司呢</p>\n<p>这里以一个预收款减少的情况作为例子，比如某公司某年的预售款比之前少了，可能不少人会觉得，这是公司变差的一个信号，甚至说已经不是一个可以继续投资的信号了。</p>\n<p>回到投资的本质来说，我们希望将钱放到某些投资标的中，从而获取更好的收益，就像 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a> 描述的那样。那么我们应该比较的是：1）当前公司因为预收款等实际影响公司的营收；2）其他公司的情况怎么样 — 因为如果我们不投资到当前公司，就需要投资到其他地方。</p>\n<p>然后我们可能发现，大部分公司实际上是没有预收款的，反而是有不少应收账款。那么预收款减少也就是说还有，还有就表示相对下游还有定价权（比较抢手，下游希望通过提前交钱来预订）。那么就要看这个预收款减少是否有影响公司未来的盈利能力。</p>\n<h2 id=\"促销商品购买\"><a href=\"#促销商品购买\" class=\"headerlink\" title=\"促销商品购买\"></a>促销商品购买</h2><p>商品经常会使用类似降价的方式来进行促销，比如原价 A 售卖的，现在通过降价 30% 售卖，而且降价只有最后 3 天。</p>\n<p>那么这种情况下我们的购买策略应该比较的是：[购买] VS [不购买] 是否影响自己的生活情况。而不是 [原价] 和 [降价了 30%] 进行对比。将是否需要和价格情况进行组合将得到如下的情况</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>需要</th>\n<th>不需要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原价</td>\n<td>(1)</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>降价</td>\n<td>(3)</td>\n<td>(4)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>也就是对应的优先级应该是 (3) &gt; (1) &gt;&gt; (4) &gt; (2)。也就是说在我们应该在需要的情况下再考虑价格，如果不需要的情况下，就算降价购买，那也是一种浪费。</p>\n<h2 id=\"长期和短期\"><a href=\"#长期和短期\" class=\"headerlink\" title=\"长期和短期\"></a>长期和短期</h2><p>在价值投资中，往往需要比较长时间才能有好的结果，比如 10 年 5 倍，20 年 15 倍（复合年化 15% 已经很不错了），但是可能有人看到后会说，自己希望是短期就能变富，10 年 20 年太久了，另外看上去 10 年 20 年后这个收益好像也不是很高。</p>\n<p>这个可以这样比较：[选择这种投资方式，复合年化 15%] VS [其他投资渠道]。然后比较两种投资渠道哪个更能满足自己的需求</p>\n<ul>\n<li>投资时间的情况（短期还是长期）</li>\n<li>变富</li>\n</ul>\n<p>其中短期和长期来说，不同的投资市场会影响投资决策，如果是短期投资，不一定适合投资非固定收益的标的（比如股市），因为股市短期的涨跌太难预测，但是长期来说，股价围绕公司价值波动，那么股价就更好预测一些。</p>\n<p>另外变富是人人都想要的，但是具体到投资来说，就会有复合年化收益来衡量。对于不同收益率在不同年限中的总收益情况可以参考前文的情况。然后我们应该考虑的是 [选择该方式] 和 [选择其他方式] 哪个更能够让自己变的更富有，而不是单纯的觉得某个收益率太高或者太低。</p>\n<h2 id=\"机会成本\"><a href=\"#机会成本\" class=\"headerlink\" title=\"机会成本\"></a>机会成本</h2><p>比较会进一步促进决策（不行动也是一种决策），由于没法同时做两件事，因此部分只能进行假设的比较，因此选择的成本实际是我们选择了 A 之后，剩下的所有选项中最好结果来决定的，这也就是我们的机会成本 — 因为当前决策导致我们丧失了一次机会。</p>\n<p>投资是一个称重游戏，那么我们需要做的是，在较长的时间内，比较多个投资标的，哪个会增长的更多，所有投资的机会成本是自己能获得的稳定收益的最高值，这个对大部分人来说是长期无风险国债，具体的利率可以参考 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a>。然后对于未来现金流折线来说，折现率我们也可以使用机会成本来进行计算。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文尝试描述迭代速度/增长比率，比较以及机会成本，这些不仅仅在投资中重要，在平时生活中也有不小影响，有复利的情况下都能套用迭代速度，然后比较和机会成本也会影响我们的每次决策，从而影响我们的生活。</p>\n<p>但是需要注意的一点是 决策的质量 和 决策后的结果好坏并不完全相关，它们会有如下四种情况</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>好决策</th>\n<th>差决策</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>好结果</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>坏结果</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其中 1 和 4 是我们很容易了解并接受的，但是实际生活中还会有 2 和 3 的存在，如果在对过去决策进行复盘的时候，我们需要考虑到这些情况的存在，另外每次决策的时候也应该记录更多的上下文信息，这样在后续复盘的时候能够知道当时的决策是否好，而不仅仅是通过结果来进行判断。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文希望能够通过对一些例子，梳理一些基本/常用的事项。</p>\n</blockquote>\n<p>在 <a href=\"https://mp.weixin.qq.com/s/7T22TF60g_FQV10xfzZBZw\">分红及投资复利-以茅台为例</a> 一文中主要阐述了投资中复利的力量，从相关数据可以看出，复利能够让我们的得到更好的结果，复利中结果和利率也会相关。</p>\n<p>本文尝试对利率(本文中的迭代速度)，比较以及机会成本进行相关阐述，希望能对这些有一个更深的认识。部分想法受《雪球特别版-段永平投资问答录》启发。 </p>","more":"<h1 id=\"迭代速度\"><a href=\"#迭代速度\" class=\"headerlink\" title=\"迭代速度\"></a>迭代速度</h1><p>复利中有两个因为比较重要：时间，和增长率。时间我们在之前的文章中有大致描述。增长率/迭代速度 会在这里进行描述。</p>\n<p>迭代速度大致分为三类：负数，零 和正数。其中负数表示往反方向发展，零表示不发展，正数表示往正方向发展。</p>\n<p>下面的图形中展示了不同情况下 20 年后的总收益</p>\n<ul>\n<li>迭代速度分别是 2%，5%，8%，10%，15%，20%，30%，-2%，-5%，-8%，-10% 的总收益</li>\n<li>迭代速度是 8%，15% 的情况下，每过两年会有 -2% 的增长的情况</li>\n</ul>\n<blockquote>\n<p>这些数字的选择，大概是，每年 CPI 涨幅 2% 左右，GDP 涨幅 5% 左右，CPI + GDP 大概 8%，具体可以参考 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a><br>时间跨度选择的是 20 年</p>\n<p>下图中通过点击标题，可以展示/隐藏不同情况下的曲线</p>\n</blockquote>\n\n<div id=\"echarts4680\" style=\"width: 85%;height:400px;margin: 0 auto\"></div>\n<script src=\"https://unpkg.com/echarts@5.6.0/dist/echarts.min.js\" ></script>\n<script >\n  if (window.eChartecharts4680ResizeHandler) {\n    window.removeEventListener(\"resize\", eChartecharts4680ResizeHandler);\n  }\n  var optionecharts4680 = {\n  legend: {\n    data: ['2', '5', '8', '8(-2)', '10', '15', '15(-2)', '20', '25', '-2', '-5', '-8', '-10']\n  },\n  tooltip: {\n    trigger: 'axis'\n  },\n  xAxis: {\n    type: 'category',\n    data: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  },\n  yAxis: [\n    {\n      name: 'total-value',\n      type: 'value'\n    },\n  ],\n  series: [\n    {\n      name: '2',\n      data: [1, 1.02, 1.0404, 1.061208, 1.08243216, 1.1040808032, 1.126162419264, 1.14868566764928, 1.1716593810022657, 1.195092568622311, 1.2189944199947573, 1.2433743083946525, 1.2682417945625455, 1.2936066304537963, 1.3194787630628724, 1.3458683383241299, 1.3727857050906125, 1.4002414191924248, 1.4282462475762734, 1.4568111725277988, 1.485947395978355],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '5',\n      data: [1, 1.05, 1.1025, 1.1576250000000001, 1.2155062500000002, 1.2762815625000004, 1.3400956406250004, 1.4071004226562505, 1.477455443789063, 1.5513282159785162, 1.628894626777442, 1.7103393581163142, 1.79585632602213, 1.8856491423232367, 1.9799315994393987, 2.0789281794113688, 2.1828745883819374, 2.2920183178010345, 2.406619233691086, 2.5269501953756404, 2.6532977051444226],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8',\n      data: [1, 1.08, 1.1664, 1.2597120000000002, 1.3604889600000003, 1.4693280768000003, 1.5868743229440005, 1.7138242687795207, 1.8509302102818825, 1.9990046271044333, 2.158924997272788, 2.331638997054611, 2.5181701168189803, 2.719623726164499, 2.937193624257659, 3.172169114198272, 3.425942643334134, 3.7000180548008648, 3.9960194991849343, 4.315701059119729, 4.660957143849308],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '8(-2)',\n      data: [1, 1.08, 1.1664, 1.143072, 1.2345177600000001, 1.3332791808000002, 1.306613597184, 1.41114268495872, 1.5240340997554178, 1.4935534177603094, 1.6130376911811342, 1.742080706475625, 1.7072390923461125, 1.8438182197338016, 1.9913236773125058, 1.9514972037662557, 2.107616980067556, 2.2762263384729606, 2.2307018117035016, 2.409157956639782, 2.601890593170965],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '10',\n      data: [1, 1.1, 1.2100000000000002, 1.3310000000000004, 1.4641000000000006, 1.6105100000000008, 1.771561000000001, 1.9487171000000014, 2.1435888100000016, 2.357947691000002, 2.5937424601000023, 2.853116706110003, 3.1384283767210035, 3.4522712143931042, 3.797498335832415, 4.177248169415656, 4.594972986357222, 5.054470284992944, 5.559917313492239, 6.115909044841463, 6.72749994932561],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15',\n      data: [1, 1.15, 1.3224999999999998, 1.5208749999999995, 1.7490062499999994, 2.0113571874999994, 2.313060765624999, 2.6600198804687487, 3.0590228625390607, 3.5178762919199196, 4.0455577357079076, 4.652391396064093, 5.350250105473707, 6.152787621294762, 7.075705764488976, 8.137061629162321, 9.35762087353667, 10.761264004567169, 12.375453605252243, 14.231771646040078, 16.36653739294609],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '15(-2)',\n      data: [1, 1.15, 1.3224999999999998, 1.2960499999999997, 1.4904574999999995, 1.7140261249999993, 1.6797456024999993, 1.931707442874999, 2.221463559306249, 2.1770342881201237, 2.503589431338142, 2.879127846038863, 2.8215452891180854, 3.244777082485798, 3.7314936448586677, 3.6568637719614943, 4.205393337755718, 4.836202338419076, 4.739478291650695, 5.450400035398299, 6.267960040708043],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '20',\n      data: [1, 1.2, 1.44, 1.728, 2.0736, 2.48832, 2.9859839999999997, 3.5831807999999996, 4.299816959999999, 5.159780351999999, 6.191736422399999, 7.430083706879999, 8.916100448255998, 10.699320537907196, 12.839184645488634, 15.407021574586361, 18.48842588950363, 22.186111067404358, 26.62333328088523, 31.947999937062274, 38.33759992447473],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '25',\n      data: [1, 1.25, 1.5625, 1.953125, 2.44140625, 3.0517578125, 3.814697265625, 4.76837158203125, 5.9604644775390625, 7.450580596923828, 9.313225746154785, 11.641532182693481, 14.551915228366852, 18.189894035458565, 22.737367544323206, 28.421709430404007, 35.52713678800501, 44.40892098500626, 55.51115123125783, 69.38893903907228, 86.73617379884035],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-2',\n      data: [1, 0.98, 0.9603999999999999, 0.9411919999999999, 0.9223681599999999, 0.9039207967999998, 0.8858423808639998, 0.8681255332467198, 0.8507630225817854, 0.8337477621301497, 0.8170728068875467, 0.8007313507497957, 0.7847167237347998, 0.7690223892601038, 0.7536419414749017, 0.7385691026454037, 0.7237977205924956, 0.7093217661806457, 0.6951353308570327, 0.6812326242398921, 0.6676079717550942],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-5',\n      data: [1, 0.95, 0.9025, 0.8573749999999999, 0.8145062499999999, 0.7737809374999999, 0.7350918906249998, 0.6983372960937497, 0.6634204312890623, 0.6302494097246091, 0.5987369392383786, 0.5688000922764596, 0.5403600876626365, 0.5133420832795047, 0.48767497911552943, 0.46329123015975293, 0.44012666865176525, 0.41812033521917696, 0.3972143184582181, 0.37735360253530714, 0.35848592240854177],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-8',\n      data: [1, 0.92, 0.8464, 0.778688, 0.7163929600000001, 0.6590815232000001, 0.6063550013440001, 0.5578466012364801, 0.5132188731375618, 0.47216136328655683, 0.4343884542236323, 0.3996373778857418, 0.36766638765488246, 0.3382530766424919, 0.31119283051109253, 0.28629740407020515, 0.26339361174458875, 0.24232212280502166, 0.22293635298061995, 0.20510144474217037, 0.18869332916279674],\n      type: 'line',\n      yAxisIndex: 0\n    },\n    {\n      name: '-10',\n      data: [1, 0.9, 0.81, 0.7290000000000001, 0.6561000000000001, 0.5904900000000002, 0.5314410000000002, 0.47829690000000014, 0.43046721000000016, 0.38742048900000015, 0.34867844010000015, 0.31381059609000017, 0.28242953648100017, 0.25418658283290013, 0.22876792454961012, 0.2058911320946491, 0.1853020188851842, 0.16677181699666577, 0.1500946352969992, 0.13508517176729928, 0.12157665459056936],\n      type: 'line',\n      yAxisIndex: 0\n    }\n  ]\n};\n  if (window.echarts !== undefined) {\n    var eChartecharts4680 = echarts.init(document.getElementById('echarts4680'));\n    eChartecharts4680.setOption(optionecharts4680);\n    var eChartecharts4680ResizeHandler = function() {\n      eChartecharts4680.resize();\n    };\n    window.addEventListener(\"resize\", eChartecharts4680ResizeHandler);\n  }\n</script>\n<p>我们可以大致对比几组上面的情况：</p>\n<ul>\n<li>不同迭代速度下 10/20 年后的情况</li>\n<li>同一迭代速度前 10 年和后 10 年的情况</li>\n<li>同一利率下有回撤与无回撤的情况对比</li>\n<li>负利率情况下的情况</li>\n</ul>\n<p>我们可以看到 5%，10%，15%，20% 迭代速度下</p>\n<ul>\n<li>10 年后，分别的总收益是 1.62, 2.59，4.04, 6.19, 可以看出不同迭代速度下，总收益差距还是不少的，但是好像也并没有那么大（从 5% 增长到 10%，增长了没有 1 倍，从 10% 增长到 20% 的情况下，总收益增长了 1 倍多一点）；</li>\n<li>20 年后，分别的总收益是 2.65, 6.72, 16.36, 38.33. 拉长时间后，如果迭代速度增加越大，整体收益会越高，而且迭代速度每增长 5%，整体收益增长 2-3 倍的样子。</li>\n</ul>\n<p>在不同迭代速度下（5%，10%，15%，20%），前 10 年和后 10 年的增长分别如下</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>迭代速度</th>\n<th>10 年收益</th>\n<th>20 年总收益</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5%</td>\n<td>1.62</td>\n<td>2.65</td>\n</tr>\n<tr>\n<td>10%</td>\n<td>2.59</td>\n<td>6.72</td>\n</tr>\n<tr>\n<td>15%</td>\n<td>4.04</td>\n<td>16.36</td>\n</tr>\n<tr>\n<td>20%</td>\n<td>6.19</td>\n<td>38.33</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以看出如果迭代速度越大，那么 20 年和 10 年总收益差距越大（但是前 10 年的增长率和后十年的增长率实际是一样的，因为都是 (1 + r) ^ 10), 整体差距来自于基数的差异，由于迭代速度越大，第 10 年的时候整体收益越大，因此第 20 年的时候总收益会越好（基于第 10 年的总收益）</p>\n<p>接下来对比下，每两年有 2% 回撤的增长情况：增长率分别为 8% 和 15%，然后另外在当前迭代速度下，每 3 年有 2% 的回撤</p>\n<ul>\n<li>在第 10 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分别是：2.15，1.61, 4.04, 2.5 ，可以看到每 3 年回撤 2% 对整体收益影响就挺大：总收益将近少了一半。</li>\n<li>第 20 年的时候，8%，8% + 每 3 年回撤 2%，15%， 15% + 每 3年回撤 2% 的总收益分&gt;别是：4.6, 2.6, 16.3, 6.2。可以看出年限越长，有回撤的和无回撤的差距更大。</li>\n</ul>\n<p>接下来再看看负迭代速度的情况，-2%，-5%，-8%，-10% 迭代速度的情况下<br>10 年的情况下，总收益分别为 0.81, 0.59, 0.43, 0.34， 在 20 年的时候总收益分别为 0.66, 0.35, 0.18, 0.12。不管负迭代速度是多少，时间久了之后，整体收益会比较明显，如果迭代速度达到 -10% 的情况下，10 年就已经不剩一半了，20 年就只剩 1 成了。</p>\n<p>另外由于股市是非固定收益，因此不卖出的情况下，可以不算回撤（但是股价能否涨上去是另外一回事），股市更好的计算比例需要看长期的复合年化收益。如果自己不好计算，可以找一个 App 帮助计算。</p>\n<h1 id=\"比较和机会成本\"><a href=\"#比较和机会成本\" class=\"headerlink\" title=\"比较和机会成本\"></a>比较和机会成本</h1><p>投资中决策是非常重要的一点，决策会涉及到比较，在日常生活中也会经常有比较, 这里主要阐述一些常见的比较情况。</p>\n<p>有两个假设前提<br>1 同一时刻只能做一件事情<br>2 时间是不可逆的，过去了就没有了</p>\n<p>比较的时候可能会涉及多个维度，或者对比的维度不统一，而在做决策的时候更好的是能够对一个或多个选项进行同样维度的比较。比如下面的一些比较问题：</p>\n<ul>\n<li>投资中，某个投资标的数据发生变化，那么是否实际影响投资决策（比如茅台的预收账款变少）</li>\n<li>低价促销的东西，到底要不要买，不买感觉亏了，买好像又不是特别需要</li>\n<li>某类投资方式能大概率变富，但是时间比较长，比如 20 年，这种要不要投呢</li>\n</ul>\n<p>下面尝试对每一个问题进行详细的阐述</p>\n<h2 id=\"投资数据变化的影响\"><a href=\"#投资数据变化的影响\" class=\"headerlink\" title=\"投资数据变化的影响\"></a>投资数据变化的影响</h2><p>之前文章中我们说过，买股票就是买公司，那么公司的指标就会影响公司的情况，到底哪些指标的变化，变化成啥样会影响公司呢</p>\n<p>这里以一个预收款减少的情况作为例子，比如某公司某年的预售款比之前少了，可能不少人会觉得，这是公司变差的一个信号，甚至说已经不是一个可以继续投资的信号了。</p>\n<p>回到投资的本质来说，我们希望将钱放到某些投资标的中，从而获取更好的收益，就像 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a> 描述的那样。那么我们应该比较的是：1）当前公司因为预收款等实际影响公司的营收；2）其他公司的情况怎么样 — 因为如果我们不投资到当前公司，就需要投资到其他地方。</p>\n<p>然后我们可能发现，大部分公司实际上是没有预收款的，反而是有不少应收账款。那么预收款减少也就是说还有，还有就表示相对下游还有定价权（比较抢手，下游希望通过提前交钱来预订）。那么就要看这个预收款减少是否有影响公司未来的盈利能力。</p>\n<h2 id=\"促销商品购买\"><a href=\"#促销商品购买\" class=\"headerlink\" title=\"促销商品购买\"></a>促销商品购买</h2><p>商品经常会使用类似降价的方式来进行促销，比如原价 A 售卖的，现在通过降价 30% 售卖，而且降价只有最后 3 天。</p>\n<p>那么这种情况下我们的购买策略应该比较的是：[购买] VS [不购买] 是否影响自己的生活情况。而不是 [原价] 和 [降价了 30%] 进行对比。将是否需要和价格情况进行组合将得到如下的情况</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>需要</th>\n<th>不需要</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原价</td>\n<td>(1)</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>降价</td>\n<td>(3)</td>\n<td>(4)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>也就是对应的优先级应该是 (3) &gt; (1) &gt;&gt; (4) &gt; (2)。也就是说在我们应该在需要的情况下再考虑价格，如果不需要的情况下，就算降价购买，那也是一种浪费。</p>\n<h2 id=\"长期和短期\"><a href=\"#长期和短期\" class=\"headerlink\" title=\"长期和短期\"></a>长期和短期</h2><p>在价值投资中，往往需要比较长时间才能有好的结果，比如 10 年 5 倍，20 年 15 倍（复合年化 15% 已经很不错了），但是可能有人看到后会说，自己希望是短期就能变富，10 年 20 年太久了，另外看上去 10 年 20 年后这个收益好像也不是很高。</p>\n<p>这个可以这样比较：[选择这种投资方式，复合年化 15%] VS [其他投资渠道]。然后比较两种投资渠道哪个更能满足自己的需求</p>\n<ul>\n<li>投资时间的情况（短期还是长期）</li>\n<li>变富</li>\n</ul>\n<p>其中短期和长期来说，不同的投资市场会影响投资决策，如果是短期投资，不一定适合投资非固定收益的标的（比如股市），因为股市短期的涨跌太难预测，但是长期来说，股价围绕公司价值波动，那么股价就更好预测一些。</p>\n<p>另外变富是人人都想要的，但是具体到投资来说，就会有复合年化收益来衡量。对于不同收益率在不同年限中的总收益情况可以参考前文的情况。然后我们应该考虑的是 [选择该方式] 和 [选择其他方式] 哪个更能够让自己变的更富有，而不是单纯的觉得某个收益率太高或者太低。</p>\n<h2 id=\"机会成本\"><a href=\"#机会成本\" class=\"headerlink\" title=\"机会成本\"></a>机会成本</h2><p>比较会进一步促进决策（不行动也是一种决策），由于没法同时做两件事，因此部分只能进行假设的比较，因此选择的成本实际是我们选择了 A 之后，剩下的所有选项中最好结果来决定的，这也就是我们的机会成本 — 因为当前决策导致我们丧失了一次机会。</p>\n<p>投资是一个称重游戏，那么我们需要做的是，在较长的时间内，比较多个投资标的，哪个会增长的更多，所有投资的机会成本是自己能获得的稳定收益的最高值，这个对大部分人来说是长期无风险国债，具体的利率可以参考 <a href=\"https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ\">股市是一个好的投资渠道吗</a>。然后对于未来现金流折线来说，折现率我们也可以使用机会成本来进行计算。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文尝试描述迭代速度/增长比率，比较以及机会成本，这些不仅仅在投资中重要，在平时生活中也有不小影响，有复利的情况下都能套用迭代速度，然后比较和机会成本也会影响我们的每次决策，从而影响我们的生活。</p>\n<p>但是需要注意的一点是 决策的质量 和 决策后的结果好坏并不完全相关，它们会有如下四种情况</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>好决策</th>\n<th>差决策</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>好结果</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>坏结果</td>\n<td>3</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其中 1 和 4 是我们很容易了解并接受的，但是实际生活中还会有 2 和 3 的存在，如果在对过去决策进行复盘的时候，我们需要考虑到这些情况的存在，另外每次决策的时候也应该记录更多的上下文信息，这样在后续复盘的时候能够知道当时的决策是否好，而不仅仅是通过结果来进行判断。</p>"},{"_content":"\n在[上篇文章的末尾]()我们提到做决策相关的事情，本文介绍下 《Clear Thinking》这本书，以及自己的一些看法。\n\n这本书主要讲清晰思考以，以及如何做决策。本书主要有 5 部分：第一部分描述了 clear thinking 的敌人，也就是说什么会导致偏离 clear thinking；第二部分则描述了可以加强的方面，从而更好的 clear thinking；第三部分则描述了那些无法避免的弱点，通过怎么避免弱点影响自己；第四部分则以决策为例来描述 clear thinking 的应用；第五部分描述了：你最想要的是什么。最终对 clear thinking 的价值进行了总结。\n\n> They seemed to know something that was not commonly known, and I was determined to find out what.\n> While the rest of us are chasing victory, the best in the world know they must avoid losing before they can win. It turns out this is a surprisingly effective strategy.\n\n> Decisions made through clear thinking will put you in increasingly positions, and success will only compound from there.\n\n在前面的文章中说的，复利中后面增长快，是因为前面已经有不错的基础（涨上去了），复利也是因为没有更差（负增长），因此能够涨上去，只要不变的更差，那么总能涨上去。\n\n不变差是一种思维，就是要尽量考虑不要变的更差，然后通过复利来让自己变的更好。不变差的思维并不是说一定不会变差，而是希望在前期把那些可能变差的考虑清楚，然后避免掉。和《1 不要亏钱；2 基于第一点》一样，另外和《胜负已分，然后兴师动众》- 孙子兵法中的思想类似，先胜后战。\n\n延伸有一点：无聊的胜利好过热烈的失败。\n\n> If there is a tagline to my life, it is \"Mastering the best of what other people have already figured out\", and this book is a tribute to that belief.\n学习别人已经验证过的精华是一个很好的经验。\n\n<clear thinking> 的读书笔记，这本书讲了 xxx\n\n\n","source":"_drafts/clear-thinking.md","raw":"\n在[上篇文章的末尾]()我们提到做决策相关的事情，本文介绍下 《Clear Thinking》这本书，以及自己的一些看法。\n\n这本书主要讲清晰思考以，以及如何做决策。本书主要有 5 部分：第一部分描述了 clear thinking 的敌人，也就是说什么会导致偏离 clear thinking；第二部分则描述了可以加强的方面，从而更好的 clear thinking；第三部分则描述了那些无法避免的弱点，通过怎么避免弱点影响自己；第四部分则以决策为例来描述 clear thinking 的应用；第五部分描述了：你最想要的是什么。最终对 clear thinking 的价值进行了总结。\n\n> They seemed to know something that was not commonly known, and I was determined to find out what.\n> While the rest of us are chasing victory, the best in the world know they must avoid losing before they can win. It turns out this is a surprisingly effective strategy.\n\n> Decisions made through clear thinking will put you in increasingly positions, and success will only compound from there.\n\n在前面的文章中说的，复利中后面增长快，是因为前面已经有不错的基础（涨上去了），复利也是因为没有更差（负增长），因此能够涨上去，只要不变的更差，那么总能涨上去。\n\n不变差是一种思维，就是要尽量考虑不要变的更差，然后通过复利来让自己变的更好。不变差的思维并不是说一定不会变差，而是希望在前期把那些可能变差的考虑清楚，然后避免掉。和《1 不要亏钱；2 基于第一点》一样，另外和《胜负已分，然后兴师动众》- 孙子兵法中的思想类似，先胜后战。\n\n延伸有一点：无聊的胜利好过热烈的失败。\n\n> If there is a tagline to my life, it is \"Mastering the best of what other people have already figured out\", and this book is a tribute to that belief.\n学习别人已经验证过的精华是一个很好的经验。\n\n<clear thinking> 的读书笔记，这本书讲了 xxx\n\n\n","slug":"clear-thinking","published":0,"date":"2025-04-22T01:03:22.697Z","updated":"2025-04-22T01:03:22.697Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cm9y6swn200016kjnamcq1a4i","content":"<p>在<a href=\"\">上篇文章的末尾</a>我们提到做决策相关的事情，本文介绍下 《Clear Thinking》这本书，以及自己的一些看法。</p>\n<p>这本书主要讲清晰思考以，以及如何做决策。本书主要有 5 部分：第一部分描述了 clear thinking 的敌人，也就是说什么会导致偏离 clear thinking；第二部分则描述了可以加强的方面，从而更好的 clear thinking；第三部分则描述了那些无法避免的弱点，通过怎么避免弱点影响自己；第四部分则以决策为例来描述 clear thinking 的应用；第五部分描述了：你最想要的是什么。最终对 clear thinking 的价值进行了总结。</p>\n<blockquote>\n<p>They seemed to know something that was not commonly known, and I was determined to find out what.<br>While the rest of us are chasing victory, the best in the world know they must avoid losing before they can win. It turns out this is a surprisingly effective strategy.</p>\n<p>Decisions made through clear thinking will put you in increasingly positions, and success will only compound from there.</p>\n</blockquote>\n<p>在前面的文章中说的，复利中后面增长快，是因为前面已经有不错的基础（涨上去了），复利也是因为没有更差（负增长），因此能够涨上去，只要不变的更差，那么总能涨上去。</p>\n<p>不变差是一种思维，就是要尽量考虑不要变的更差，然后通过复利来让自己变的更好。不变差的思维并不是说一定不会变差，而是希望在前期把那些可能变差的考虑清楚，然后避免掉。和《1 不要亏钱；2 基于第一点》一样，另外和《胜负已分，然后兴师动众》- 孙子兵法中的思想类似，先胜后战。</p>\n<p>延伸有一点：无聊的胜利好过热烈的失败。</p>\n<blockquote>\n<p>If there is a tagline to my life, it is “Mastering the best of what other people have already figured out”, and this book is a tribute to that belief.<br>学习别人已经验证过的精华是一个很好的经验。</p>\n</blockquote>\n<p><clear thinking> 的读书笔记，这本书讲了 xxx</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<a href=\"\">上篇文章的末尾</a>我们提到做决策相关的事情，本文介绍下 《Clear Thinking》这本书，以及自己的一些看法。</p>\n<p>这本书主要讲清晰思考以，以及如何做决策。本书主要有 5 部分：第一部分描述了 clear thinking 的敌人，也就是说什么会导致偏离 clear thinking；第二部分则描述了可以加强的方面，从而更好的 clear thinking；第三部分则描述了那些无法避免的弱点，通过怎么避免弱点影响自己；第四部分则以决策为例来描述 clear thinking 的应用；第五部分描述了：你最想要的是什么。最终对 clear thinking 的价值进行了总结。</p>\n<blockquote>\n<p>They seemed to know something that was not commonly known, and I was determined to find out what.<br>While the rest of us are chasing victory, the best in the world know they must avoid losing before they can win. It turns out this is a surprisingly effective strategy.</p>\n<p>Decisions made through clear thinking will put you in increasingly positions, and success will only compound from there.</p>\n</blockquote>\n<p>在前面的文章中说的，复利中后面增长快，是因为前面已经有不错的基础（涨上去了），复利也是因为没有更差（负增长），因此能够涨上去，只要不变的更差，那么总能涨上去。</p>\n<p>不变差是一种思维，就是要尽量考虑不要变的更差，然后通过复利来让自己变的更好。不变差的思维并不是说一定不会变差，而是希望在前期把那些可能变差的考虑清楚，然后避免掉。和《1 不要亏钱；2 基于第一点》一样，另外和《胜负已分，然后兴师动众》- 孙子兵法中的思想类似，先胜后战。</p>\n<p>延伸有一点：无聊的胜利好过热烈的失败。</p>\n<blockquote>\n<p>If there is a tagline to my life, it is “Mastering the best of what other people have already figured out”, and this book is a tribute to that belief.<br>学习别人已经验证过的精华是一个很好的经验。</p>\n</blockquote>\n<p><clear thinking> 的读书笔记，这本书讲了 xxx</p>\n"},{"title":"差异化和公司文化","date":"2025-04-26T08:53:32.000Z","toc":true,"_content":"\n在商业世界中，公司靠持续提供有差异化的产品保持竞争力，公司的文化则在更长时间范围内保证可以提供差异化的产品。\n\n> 本文受《雪球特别版-段永平投资问答录》启发\n\n<!-- more -->\n\n# 差异化\n\n公司的提供某产品，是因为客户有需求，同一个需求可以有不同的满足方式，因此不同的公司会提供不同的产品。在市场上所有产品中，那些有差异化的产品能够更受客户欢迎。\n\n差异化可以理解为：客户想要但还未满足的需求。\n\n差异化并不是一个高高在上的概念，但是却需要非常实际了解客户的需求，了解那些实际需要但还未得到满足的需求，满足这些需求就提供价值，就有了差异化的竞争力。比如 hao123 的导航栏，比如苹果的产品，比如小商店的地理位置等都是差异化的一种体现。功能，性能，体验等\n\n## hao123 的故事\n\nhao123 是一个很好的体现差异化需求的事情。hao123 站长在网吧当网管期间，一个人设计和维护了 hao123 网帐。在最初的时候，由于上网的人比较难记住经常要访问的网址 -- 有一个导航的需求，而网吧是按时收费的，如果找不到地址则钱就白白浪费了。hao123 就在这种情况下诞生了，从解决客户的实际需求（需要能记录常用网站）开始，然后不断的维护网址导航。后来 2004 年 hao123 以 1190 万加 4 万股的价格卖给百度，可见其价值。\n\nhao123 从技术角度上看，没有太大的难度（后期量大之后还是有难度的），但是能够实实在在解决用户的需求 -- 网站导航。或者说成为当时互联网的入口。这是用户可观存在的需求，解决了用户的需求之后就能够获得对应的流量。\n\n\n## 苹果产品\n\n苹果从 iPhone4 出来之后，产品卖的非常好，产品拥有不错的差异化。这里以用户视角描述下苹果产品的差异化。\n\n苹果不仅提供了硬件，还包括了软件，服务等。其中 iPhone 提供了非常流畅的体验，iCloud 提供了一套帐号，云存储服务，整体体验不错。对于要求不是特别高的情况下，苹果自带的产品就能够满足基本的要求。\n\n比如 iNote 可以解决日常笔记问题，能够随手进行记录，可以自动同步到云存储，有基本的格式、分类功能; iBook 能够阅读 pdf/epub 等各种格式的书籍，在不同设备（iPhone/Mac/iPad) 上进行同步，还能够进行听书，算是看书的一种补充；「提醒事项」可以在特定时间点提醒自己，释放自己的记忆压力。换设备的体验也很好，登录 iCloud 帐号之后，所有的能够自动进行同步，基本感受不到设备的切换。而如果有更高的要求，也可以在 AppStore 上进行相关软件下载。\n\n不过苹果最近的品控感觉不如以前，最近遇到好几次问题，最后在客服人员的帮助下，进行解决。比较好的是，有专门的客服协助解决（售后），但是品控比起之前确实感受有下降。\n\n## 其他\n差异化不仅仅是功能，性能，也可能是地理位置，体验，感受等。比如小区的商店就比 3 公里外的商店更能满足自己的需求，喜欢咖啡/酒的人，习惯喝的饮品就是能满足自己体验，感受的；游戏也是类似。这些有差异化的产品，往往不会因为（部分）提价客户就进行转换，从公司角度这就是竞争力，就有一定的护城河。\n\n# 文化\n\n差异化是用户需要但还未被满足的需求，那用户需求被满足后，就会有新的需求，因此需要能够持续的提供差异化的产品，而保证能够持续的提供差异化的产品，就需要一套系统，或者说公司的文化。\n\n文化包括公司墙上宣传的，也包括大家内心认可的。也就是说分为明面上的规则，和潜规则。潜规则的影响往往也会很大。\n\n另外文化在没有经过验证之前，是不太靠谱的。只有面临真正的考验的时候，才能说是自己公司的文化，这也会影响后面非常多的情况。\n\n比如阿里 2011 年 B2B 事件[1]，这种会很大影响公司外对公司的看法和判断，同时也会影响公司内的后续决策上的取舍。当然好文化也需要持续保持，不然也会被稀释，或者变差。\n> 2011年2月21日下午消息，阿里巴巴B2B公司宣布，为维护公司“客户第一”的价值观及诚信原则，2010年公司清理了约0.8%逾千名涉嫌欺诈的“中国供应商”客户，公司CEO卫哲、COO李旭晖因此引咎辞职，原淘宝网CEO陆兆禧接任。阿里巴巴表示，公司绝不能仅仅变成一家赚钱的机器，让天下没有难做的生意才是其使命所在。\n\n另「外某电商平台自营」实际并不一定是自己经营的产品，这种如果出问题也无法找到该平台，这里的「自营」和平常的理解有差异，但是这种会一定程度降低客户的信任度。\n\n如果某些规章制度明显不合理，那么能否修改规章制度，还是随机执行，也能体现文化。比如公司园区内有很多地，车位不多，发现大家乱停车的时候，到底是宣传说不能乱停车，然后罚款，还是调研后增加车位，这些选择会影响公司的文化。\n\n文化也是一件件选择塑造的，每一次选择可能可以对公司的文化往更好的方向发展，不变，往更差的方向发展，我们应该选择那些长期来看往更好方向发展的。\n\n# 总结\n公司的产品是需要有差异化才能保证更好的卖给客户，更好的赚钱，这也就是生意模式。但是生意模式也许要有系统/文化来保持，从而持久的产生有差异化的产品。文化不仅仅是公司墙上的规章制度，也包括平时的选择。但是需要区分这两点：1）是做了错的事情；2）做对的事情过程中犯了错。其中第一点就会导致文化变差，但是第二点是无法避免的（所有人都可能会犯错）。\n\n另外对于个人来说，可以思考自己提供的什么产品/服务，自己的客户是谁，怎么提供差异化的产品/服务，然后怎么保持持续提供差异化的产品/服务，这样更能够将焦点聚焦在自己身上，而不是围绕工作转。\n\n# Ref\n[1] https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ceo%E5%8D%AB%E5%93%B2%E5%BC%95%E5%92%8E%E8%BE%9E%E8%81%8C%E4%BA%8B%E4%BB%B6/6317687\n","source":"_posts/differentiation.md","raw":"---\ntitle: 差异化和公司文化\ndate: 2025-04-26 16:53:32\ntags:\n    - differentiation\n    - strategy\ntoc: true\n---\n\n在商业世界中，公司靠持续提供有差异化的产品保持竞争力，公司的文化则在更长时间范围内保证可以提供差异化的产品。\n\n> 本文受《雪球特别版-段永平投资问答录》启发\n\n<!-- more -->\n\n# 差异化\n\n公司的提供某产品，是因为客户有需求，同一个需求可以有不同的满足方式，因此不同的公司会提供不同的产品。在市场上所有产品中，那些有差异化的产品能够更受客户欢迎。\n\n差异化可以理解为：客户想要但还未满足的需求。\n\n差异化并不是一个高高在上的概念，但是却需要非常实际了解客户的需求，了解那些实际需要但还未得到满足的需求，满足这些需求就提供价值，就有了差异化的竞争力。比如 hao123 的导航栏，比如苹果的产品，比如小商店的地理位置等都是差异化的一种体现。功能，性能，体验等\n\n## hao123 的故事\n\nhao123 是一个很好的体现差异化需求的事情。hao123 站长在网吧当网管期间，一个人设计和维护了 hao123 网帐。在最初的时候，由于上网的人比较难记住经常要访问的网址 -- 有一个导航的需求，而网吧是按时收费的，如果找不到地址则钱就白白浪费了。hao123 就在这种情况下诞生了，从解决客户的实际需求（需要能记录常用网站）开始，然后不断的维护网址导航。后来 2004 年 hao123 以 1190 万加 4 万股的价格卖给百度，可见其价值。\n\nhao123 从技术角度上看，没有太大的难度（后期量大之后还是有难度的），但是能够实实在在解决用户的需求 -- 网站导航。或者说成为当时互联网的入口。这是用户可观存在的需求，解决了用户的需求之后就能够获得对应的流量。\n\n\n## 苹果产品\n\n苹果从 iPhone4 出来之后，产品卖的非常好，产品拥有不错的差异化。这里以用户视角描述下苹果产品的差异化。\n\n苹果不仅提供了硬件，还包括了软件，服务等。其中 iPhone 提供了非常流畅的体验，iCloud 提供了一套帐号，云存储服务，整体体验不错。对于要求不是特别高的情况下，苹果自带的产品就能够满足基本的要求。\n\n比如 iNote 可以解决日常笔记问题，能够随手进行记录，可以自动同步到云存储，有基本的格式、分类功能; iBook 能够阅读 pdf/epub 等各种格式的书籍，在不同设备（iPhone/Mac/iPad) 上进行同步，还能够进行听书，算是看书的一种补充；「提醒事项」可以在特定时间点提醒自己，释放自己的记忆压力。换设备的体验也很好，登录 iCloud 帐号之后，所有的能够自动进行同步，基本感受不到设备的切换。而如果有更高的要求，也可以在 AppStore 上进行相关软件下载。\n\n不过苹果最近的品控感觉不如以前，最近遇到好几次问题，最后在客服人员的帮助下，进行解决。比较好的是，有专门的客服协助解决（售后），但是品控比起之前确实感受有下降。\n\n## 其他\n差异化不仅仅是功能，性能，也可能是地理位置，体验，感受等。比如小区的商店就比 3 公里外的商店更能满足自己的需求，喜欢咖啡/酒的人，习惯喝的饮品就是能满足自己体验，感受的；游戏也是类似。这些有差异化的产品，往往不会因为（部分）提价客户就进行转换，从公司角度这就是竞争力，就有一定的护城河。\n\n# 文化\n\n差异化是用户需要但还未被满足的需求，那用户需求被满足后，就会有新的需求，因此需要能够持续的提供差异化的产品，而保证能够持续的提供差异化的产品，就需要一套系统，或者说公司的文化。\n\n文化包括公司墙上宣传的，也包括大家内心认可的。也就是说分为明面上的规则，和潜规则。潜规则的影响往往也会很大。\n\n另外文化在没有经过验证之前，是不太靠谱的。只有面临真正的考验的时候，才能说是自己公司的文化，这也会影响后面非常多的情况。\n\n比如阿里 2011 年 B2B 事件[1]，这种会很大影响公司外对公司的看法和判断，同时也会影响公司内的后续决策上的取舍。当然好文化也需要持续保持，不然也会被稀释，或者变差。\n> 2011年2月21日下午消息，阿里巴巴B2B公司宣布，为维护公司“客户第一”的价值观及诚信原则，2010年公司清理了约0.8%逾千名涉嫌欺诈的“中国供应商”客户，公司CEO卫哲、COO李旭晖因此引咎辞职，原淘宝网CEO陆兆禧接任。阿里巴巴表示，公司绝不能仅仅变成一家赚钱的机器，让天下没有难做的生意才是其使命所在。\n\n另「外某电商平台自营」实际并不一定是自己经营的产品，这种如果出问题也无法找到该平台，这里的「自营」和平常的理解有差异，但是这种会一定程度降低客户的信任度。\n\n如果某些规章制度明显不合理，那么能否修改规章制度，还是随机执行，也能体现文化。比如公司园区内有很多地，车位不多，发现大家乱停车的时候，到底是宣传说不能乱停车，然后罚款，还是调研后增加车位，这些选择会影响公司的文化。\n\n文化也是一件件选择塑造的，每一次选择可能可以对公司的文化往更好的方向发展，不变，往更差的方向发展，我们应该选择那些长期来看往更好方向发展的。\n\n# 总结\n公司的产品是需要有差异化才能保证更好的卖给客户，更好的赚钱，这也就是生意模式。但是生意模式也许要有系统/文化来保持，从而持久的产生有差异化的产品。文化不仅仅是公司墙上的规章制度，也包括平时的选择。但是需要区分这两点：1）是做了错的事情；2）做对的事情过程中犯了错。其中第一点就会导致文化变差，但是第二点是无法避免的（所有人都可能会犯错）。\n\n另外对于个人来说，可以思考自己提供的什么产品/服务，自己的客户是谁，怎么提供差异化的产品/服务，然后怎么保持持续提供差异化的产品/服务，这样更能够将焦点聚焦在自己身上，而不是围绕工作转。\n\n# Ref\n[1] https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ceo%E5%8D%AB%E5%93%B2%E5%BC%95%E5%92%8E%E8%BE%9E%E8%81%8C%E4%BA%8B%E4%BB%B6/6317687\n","slug":"differentiation","published":1,"updated":"2025-04-26T12:22:52.848Z","_id":"cm9y6y65v00066kjn7bo51lpf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在商业世界中，公司靠持续提供有差异化的产品保持竞争力，公司的文化则在更长时间范围内保证可以提供差异化的产品。</p>\n<blockquote>\n<p>本文受《雪球特别版-段永平投资问答录》启发</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"差异化\"><a href=\"#差异化\" class=\"headerlink\" title=\"差异化\"></a>差异化</h1><p>公司的提供某产品，是因为客户有需求，同一个需求可以有不同的满足方式，因此不同的公司会提供不同的产品。在市场上所有产品中，那些有差异化的产品能够更受客户欢迎。</p>\n<p>差异化可以理解为：客户想要但还未满足的需求。</p>\n<p>差异化并不是一个高高在上的概念，但是却需要非常实际了解客户的需求，了解那些实际需要但还未得到满足的需求，满足这些需求就提供价值，就有了差异化的竞争力。比如 hao123 的导航栏，比如苹果的产品，比如小商店的地理位置等都是差异化的一种体现。功能，性能，体验等</p>\n<h2 id=\"hao123-的故事\"><a href=\"#hao123-的故事\" class=\"headerlink\" title=\"hao123 的故事\"></a>hao123 的故事</h2><p>hao123 是一个很好的体现差异化需求的事情。hao123 站长在网吧当网管期间，一个人设计和维护了 hao123 网帐。在最初的时候，由于上网的人比较难记住经常要访问的网址 — 有一个导航的需求，而网吧是按时收费的，如果找不到地址则钱就白白浪费了。hao123 就在这种情况下诞生了，从解决客户的实际需求（需要能记录常用网站）开始，然后不断的维护网址导航。后来 2004 年 hao123 以 1190 万加 4 万股的价格卖给百度，可见其价值。</p>\n<p>hao123 从技术角度上看，没有太大的难度（后期量大之后还是有难度的），但是能够实实在在解决用户的需求 — 网站导航。或者说成为当时互联网的入口。这是用户可观存在的需求，解决了用户的需求之后就能够获得对应的流量。</p>\n<h2 id=\"苹果产品\"><a href=\"#苹果产品\" class=\"headerlink\" title=\"苹果产品\"></a>苹果产品</h2><p>苹果从 iPhone4 出来之后，产品卖的非常好，产品拥有不错的差异化。这里以用户视角描述下苹果产品的差异化。</p>\n<p>苹果不仅提供了硬件，还包括了软件，服务等。其中 iPhone 提供了非常流畅的体验，iCloud 提供了一套帐号，云存储服务，整体体验不错。对于要求不是特别高的情况下，苹果自带的产品就能够满足基本的要求。</p>\n<p>比如 iNote 可以解决日常笔记问题，能够随手进行记录，可以自动同步到云存储，有基本的格式、分类功能; iBook 能够阅读 pdf/epub 等各种格式的书籍，在不同设备（iPhone/Mac/iPad) 上进行同步，还能够进行听书，算是看书的一种补充；「提醒事项」可以在特定时间点提醒自己，释放自己的记忆压力。换设备的体验也很好，登录 iCloud 帐号之后，所有的能够自动进行同步，基本感受不到设备的切换。而如果有更高的要求，也可以在 AppStore 上进行相关软件下载。</p>\n<p>不过苹果最近的品控感觉不如以前，最近遇到好几次问题，最后在客服人员的帮助下，进行解决。比较好的是，有专门的客服协助解决（售后），但是品控比起之前确实感受有下降。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>差异化不仅仅是功能，性能，也可能是地理位置，体验，感受等。比如小区的商店就比 3 公里外的商店更能满足自己的需求，喜欢咖啡/酒的人，习惯喝的饮品就是能满足自己体验，感受的；游戏也是类似。这些有差异化的产品，往往不会因为（部分）提价客户就进行转换，从公司角度这就是竞争力，就有一定的护城河。</p>\n<h1 id=\"文化\"><a href=\"#文化\" class=\"headerlink\" title=\"文化\"></a>文化</h1><p>差异化是用户需要但还未被满足的需求，那用户需求被满足后，就会有新的需求，因此需要能够持续的提供差异化的产品，而保证能够持续的提供差异化的产品，就需要一套系统，或者说公司的文化。</p>\n<p>文化包括公司墙上宣传的，也包括大家内心认可的。也就是说分为明面上的规则，和潜规则。潜规则的影响往往也会很大。</p>\n<p>另外文化在没有经过验证之前，是不太靠谱的。只有面临真正的考验的时候，才能说是自己公司的文化，这也会影响后面非常多的情况。</p>\n<p>比如阿里 2011 年 B2B 事件[1]，这种会很大影响公司外对公司的看法和判断，同时也会影响公司内的后续决策上的取舍。当然好文化也需要持续保持，不然也会被稀释，或者变差。</p>\n<blockquote>\n<p>2011年2月21日下午消息，阿里巴巴B2B公司宣布，为维护公司“客户第一”的价值观及诚信原则，2010年公司清理了约0.8%逾千名涉嫌欺诈的“中国供应商”客户，公司CEO卫哲、COO李旭晖因此引咎辞职，原淘宝网CEO陆兆禧接任。阿里巴巴表示，公司绝不能仅仅变成一家赚钱的机器，让天下没有难做的生意才是其使命所在。</p>\n</blockquote>\n<p>另「外某电商平台自营」实际并不一定是自己经营的产品，这种如果出问题也无法找到该平台，这里的「自营」和平常的理解有差异，但是这种会一定程度降低客户的信任度。</p>\n<p>如果某些规章制度明显不合理，那么能否修改规章制度，还是随机执行，也能体现文化。比如公司园区内有很多地，车位不多，发现大家乱停车的时候，到底是宣传说不能乱停车，然后罚款，还是调研后增加车位，这些选择会影响公司的文化。</p>\n<p>文化也是一件件选择塑造的，每一次选择可能可以对公司的文化往更好的方向发展，不变，往更差的方向发展，我们应该选择那些长期来看往更好方向发展的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>公司的产品是需要有差异化才能保证更好的卖给客户，更好的赚钱，这也就是生意模式。但是生意模式也许要有系统/文化来保持，从而持久的产生有差异化的产品。文化不仅仅是公司墙上的规章制度，也包括平时的选择。但是需要区分这两点：1）是做了错的事情；2）做对的事情过程中犯了错。其中第一点就会导致文化变差，但是第二点是无法避免的（所有人都可能会犯错）。</p>\n<p>另外对于个人来说，可以思考自己提供的什么产品/服务，自己的客户是谁，怎么提供差异化的产品/服务，然后怎么保持持续提供差异化的产品/服务，这样更能够将焦点聚焦在自己身上，而不是围绕工作转。</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ceo%E5%8D%AB%E5%93%B2%E5%BC%95%E5%92%8E%E8%BE%9E%E8%81%8C%E4%BA%8B%E4%BB%B6/6317687\">https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ceo%E5%8D%AB%E5%93%B2%E5%BC%95%E5%92%8E%E8%BE%9E%E8%81%8C%E4%BA%8B%E4%BB%B6/6317687</a></p>\n","site":{"data":{}},"excerpt":"<p>在商业世界中，公司靠持续提供有差异化的产品保持竞争力，公司的文化则在更长时间范围内保证可以提供差异化的产品。</p>\n<blockquote>\n<p>本文受《雪球特别版-段永平投资问答录》启发</p>\n</blockquote>","more":"<h1 id=\"差异化\"><a href=\"#差异化\" class=\"headerlink\" title=\"差异化\"></a>差异化</h1><p>公司的提供某产品，是因为客户有需求，同一个需求可以有不同的满足方式，因此不同的公司会提供不同的产品。在市场上所有产品中，那些有差异化的产品能够更受客户欢迎。</p>\n<p>差异化可以理解为：客户想要但还未满足的需求。</p>\n<p>差异化并不是一个高高在上的概念，但是却需要非常实际了解客户的需求，了解那些实际需要但还未得到满足的需求，满足这些需求就提供价值，就有了差异化的竞争力。比如 hao123 的导航栏，比如苹果的产品，比如小商店的地理位置等都是差异化的一种体现。功能，性能，体验等</p>\n<h2 id=\"hao123-的故事\"><a href=\"#hao123-的故事\" class=\"headerlink\" title=\"hao123 的故事\"></a>hao123 的故事</h2><p>hao123 是一个很好的体现差异化需求的事情。hao123 站长在网吧当网管期间，一个人设计和维护了 hao123 网帐。在最初的时候，由于上网的人比较难记住经常要访问的网址 — 有一个导航的需求，而网吧是按时收费的，如果找不到地址则钱就白白浪费了。hao123 就在这种情况下诞生了，从解决客户的实际需求（需要能记录常用网站）开始，然后不断的维护网址导航。后来 2004 年 hao123 以 1190 万加 4 万股的价格卖给百度，可见其价值。</p>\n<p>hao123 从技术角度上看，没有太大的难度（后期量大之后还是有难度的），但是能够实实在在解决用户的需求 — 网站导航。或者说成为当时互联网的入口。这是用户可观存在的需求，解决了用户的需求之后就能够获得对应的流量。</p>\n<h2 id=\"苹果产品\"><a href=\"#苹果产品\" class=\"headerlink\" title=\"苹果产品\"></a>苹果产品</h2><p>苹果从 iPhone4 出来之后，产品卖的非常好，产品拥有不错的差异化。这里以用户视角描述下苹果产品的差异化。</p>\n<p>苹果不仅提供了硬件，还包括了软件，服务等。其中 iPhone 提供了非常流畅的体验，iCloud 提供了一套帐号，云存储服务，整体体验不错。对于要求不是特别高的情况下，苹果自带的产品就能够满足基本的要求。</p>\n<p>比如 iNote 可以解决日常笔记问题，能够随手进行记录，可以自动同步到云存储，有基本的格式、分类功能; iBook 能够阅读 pdf/epub 等各种格式的书籍，在不同设备（iPhone/Mac/iPad) 上进行同步，还能够进行听书，算是看书的一种补充；「提醒事项」可以在特定时间点提醒自己，释放自己的记忆压力。换设备的体验也很好，登录 iCloud 帐号之后，所有的能够自动进行同步，基本感受不到设备的切换。而如果有更高的要求，也可以在 AppStore 上进行相关软件下载。</p>\n<p>不过苹果最近的品控感觉不如以前，最近遇到好几次问题，最后在客服人员的帮助下，进行解决。比较好的是，有专门的客服协助解决（售后），但是品控比起之前确实感受有下降。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>差异化不仅仅是功能，性能，也可能是地理位置，体验，感受等。比如小区的商店就比 3 公里外的商店更能满足自己的需求，喜欢咖啡/酒的人，习惯喝的饮品就是能满足自己体验，感受的；游戏也是类似。这些有差异化的产品，往往不会因为（部分）提价客户就进行转换，从公司角度这就是竞争力，就有一定的护城河。</p>\n<h1 id=\"文化\"><a href=\"#文化\" class=\"headerlink\" title=\"文化\"></a>文化</h1><p>差异化是用户需要但还未被满足的需求，那用户需求被满足后，就会有新的需求，因此需要能够持续的提供差异化的产品，而保证能够持续的提供差异化的产品，就需要一套系统，或者说公司的文化。</p>\n<p>文化包括公司墙上宣传的，也包括大家内心认可的。也就是说分为明面上的规则，和潜规则。潜规则的影响往往也会很大。</p>\n<p>另外文化在没有经过验证之前，是不太靠谱的。只有面临真正的考验的时候，才能说是自己公司的文化，这也会影响后面非常多的情况。</p>\n<p>比如阿里 2011 年 B2B 事件[1]，这种会很大影响公司外对公司的看法和判断，同时也会影响公司内的后续决策上的取舍。当然好文化也需要持续保持，不然也会被稀释，或者变差。</p>\n<blockquote>\n<p>2011年2月21日下午消息，阿里巴巴B2B公司宣布，为维护公司“客户第一”的价值观及诚信原则，2010年公司清理了约0.8%逾千名涉嫌欺诈的“中国供应商”客户，公司CEO卫哲、COO李旭晖因此引咎辞职，原淘宝网CEO陆兆禧接任。阿里巴巴表示，公司绝不能仅仅变成一家赚钱的机器，让天下没有难做的生意才是其使命所在。</p>\n</blockquote>\n<p>另「外某电商平台自营」实际并不一定是自己经营的产品，这种如果出问题也无法找到该平台，这里的「自营」和平常的理解有差异，但是这种会一定程度降低客户的信任度。</p>\n<p>如果某些规章制度明显不合理，那么能否修改规章制度，还是随机执行，也能体现文化。比如公司园区内有很多地，车位不多，发现大家乱停车的时候，到底是宣传说不能乱停车，然后罚款，还是调研后增加车位，这些选择会影响公司的文化。</p>\n<p>文化也是一件件选择塑造的，每一次选择可能可以对公司的文化往更好的方向发展，不变，往更差的方向发展，我们应该选择那些长期来看往更好方向发展的。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>公司的产品是需要有差异化才能保证更好的卖给客户，更好的赚钱，这也就是生意模式。但是生意模式也许要有系统/文化来保持，从而持久的产生有差异化的产品。文化不仅仅是公司墙上的规章制度，也包括平时的选择。但是需要区分这两点：1）是做了错的事情；2）做对的事情过程中犯了错。其中第一点就会导致文化变差，但是第二点是无法避免的（所有人都可能会犯错）。</p>\n<p>另外对于个人来说，可以思考自己提供的什么产品/服务，自己的客户是谁，怎么提供差异化的产品/服务，然后怎么保持持续提供差异化的产品/服务，这样更能够将焦点聚焦在自己身上，而不是围绕工作转。</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ceo%E5%8D%AB%E5%93%B2%E5%BC%95%E5%92%8E%E8%BE%9E%E8%81%8C%E4%BA%8B%E4%BB%B6/6317687\">https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4ceo%E5%8D%AB%E5%93%B2%E5%BC%95%E5%92%8E%E8%BE%9E%E8%81%8C%E4%BA%8B%E4%BB%B6/6317687</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avm00052uv9dbfaeevl","_id":"clhsl7avo00092uv9cxumdwj9"},{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avn00062uv929e1e35a","_id":"clhsl7avo000a2uv9h6pr1neq"},{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avn00072uv91lgc6b65","_id":"clhsl7avo000b2uv9b4pu3tj6"},{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avn00082uv9axbxck28","_id":"clhsl7avo000c2uv97710315w"},{"post_id":"cm5f2gbxw0000y8mk40oneky3","tag_id":"clhsl7avi00022uv94hujckvg","_id":"cm5f2gby10001y8mka5v5a99i"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i10001dhjohilg3h41","_id":"cm7esg5i20005dhjo11ye5l5r"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i20002dhjohfyx6u0m","_id":"cm7esg5i20006dhjo2dhr35rb"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i20003dhjoebqtcfox","_id":"cm7esg5i30007dhjo3iwg71b2"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i20004dhjo2zzvhqdh","_id":"cm7esg5i30008dhjoa4jibqff"},{"post_id":"cm8l8eflp0001cjjl80sl72n6","tag_id":"cm8b722sa0002jujj4n58byp7","_id":"cm8l8efls0003cjjl2uqmebzp"},{"post_id":"cm8l8eflp0001cjjl80sl72n6","tag_id":"cm8b722sb0003jujjfr340oqh","_id":"cm8l8efls0004cjjlcxeodra9"},{"post_id":"cm8zliwkd000atkmk0i722o2i","tag_id":"cm7esg5i10001dhjohilg3h41","_id":"cm8zliwkf000btkmk6fxg1wy7"},{"post_id":"cm8zliwkd000atkmk0i722o2i","tag_id":"cm7esg5i20002dhjohfyx6u0m","_id":"cm8zliwkf000ctkmkdhz9bcjb"},{"post_id":"cm8zliwkd000atkmk0i722o2i","tag_id":"cm8l8eflq0002cjjl0pen4e2p","_id":"cm8zliwkf000dtkmkfug07ivx"},{"post_id":"cm8zliwkd000atkmk0i722o2i","tag_id":"cm8l8efls0005cjjl308998jz","_id":"cm8zliwkg000etkmk41y70f7f"},{"post_id":"cm99qn2hc00001nmk2xf74mbp","tag_id":"cm7esg5i10001dhjohilg3h41","_id":"cm99qn2hg00011nmk3o9i6g5x"},{"post_id":"cm99qn2hc00001nmk2xf74mbp","tag_id":"cm997xg77000191mkbh7z2f5r","_id":"cm99qn2hg00021nmk1u52cx5l"},{"post_id":"cm99qn2hc00001nmk2xf74mbp","tag_id":"cm997xg78000291mk8a121iav","_id":"cm99qn2hg00031nmkbk6d6bsb"},{"post_id":"cm99qn2hc00001nmk2xf74mbp","tag_id":"cm997xg79000391mk7wq05sf9","_id":"cm99qn2hg00041nmkfg5d5zgo"},{"post_id":"cm9oaybst001j2umkhf4721ax","tag_id":"cm9mlemri00012umkdsl4dj8s","_id":"cm9oaybsu001k2umk6yx4exlu"},{"post_id":"cm9oaybst001j2umkhf4721ax","tag_id":"cm9mlemrk00022umk2ttq5e8n","_id":"cm9oaybsu001l2umkgh4e3c35"},{"post_id":"cm9oaybst001j2umkhf4721ax","tag_id":"cm9mlemrk00032umkbuq23qp5","_id":"cm9oaybsu001m2umkbjkrewtz"},{"post_id":"cm9y6y65v00066kjn7bo51lpf","tag_id":"cm9y6swn300026kjnazqn7kxp","_id":"cm9y6y65x00076kjn5uu229ms"},{"post_id":"cm9y6y65v00066kjn7bo51lpf","tag_id":"cm9y6swn400036kjn5u231a9f","_id":"cm9y6y65x00086kjnehru2z93"}],"Tag":[{"name":"大数据, 全局认识, 偏见, 论文, 系统","_id":"clhsl7avi00022uv94hujckvg"},{"name":"lsm","_id":"clhsl7avm00052uv9dbfaeevl"},{"name":"lsm-tree","_id":"clhsl7avn00062uv929e1e35a"},{"name":"minimum-global-awareness","_id":"clhsl7avn00072uv91lgc6b65"},{"name":"paper","_id":"clhsl7avn00082uv9axbxck28"},{"name":"stock","_id":"cm7esg5i10001dhjohilg3h41"},{"name":"maotai","_id":"cm7esg5i20002dhjohfyx6u0m"},{"name":"company-analysis","_id":"cm7esg5i20003dhjoebqtcfox"},{"name":"wine","_id":"cm7esg5i20004dhjo2zzvhqdh"},{"name":"review","_id":"cm8b722sa0002jujj4n58byp7"},{"name":"question","_id":"cm8b722sb0003jujjfr340oqh"},{"name":"profit","_id":"cm8l8eflq0002cjjl0pen4e2p"},{"name":"cost","_id":"cm8l8efls0005cjjl308998jz"},{"name":"investment","_id":"cm997xg77000191mkbh7z2f5r"},{"name":"分红","_id":"cm997xg78000291mk8a121iav"},{"name":"compond","_id":"cm997xg79000391mk7wq05sf9"},{"name":"compare","_id":"cm9mlemri00012umkdsl4dj8s"},{"name":"opportunity-cost","_id":"cm9mlemrk00022umk2ttq5e8n"},{"name":"iterative velocity","_id":"cm9mlemrk00032umkbuq23qp5"},{"name":"differentiation","_id":"cm9y6swn300026kjnazqn7kxp"},{"name":"strategy","_id":"cm9y6swn400036kjn5u231a9f"}]}}