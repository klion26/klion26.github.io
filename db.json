{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/HTML/2010/12/09/hello-world-1/index.html","path":"HTML/2010/12/09/hello-world-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","path":"HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","path":"HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","path":"HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/14/red-hat9-command-messy-code/index.html","path":"HTML/2010/12/14/red-hat9-command-messy-code/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/22/linux-shell-problem/index.html","path":"HTML/2010/12/22/linux-shell-problem/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/16/wordpress-link-order/index.html","path":"HTML/2010/12/16/wordpress-link-order/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/14/linux-rename/index.html","path":"HTML/2010/12/14/linux-rename/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/30/linux-fork-test/index.html","path":"HTML/2010/12/30/linux-fork-test/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/31/linux-fork-2/index.html","path":"HTML/2010/12/31/linux-fork-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/30/wordpress-clickchar-plugin/index.html","path":"HTML/2010/12/30/wordpress-clickchar-plugin/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/23/linux-single-user-config/index.html","path":"HTML/2010/12/23/linux-single-user-config/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2010/12/23/linux-grub-encrypt/index.html","path":"HTML/2010/12/23/linux-grub-encrypt/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","path":"HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","path":"HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/10/networkflow-1-maximum-matching/index.html","path":"HTML/2011/02/10/networkflow-1-maximum-matching/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","path":"HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","path":"HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","path":"HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","path":"HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/02/27/networkflow-sap/index.html","path":"HTML/2011/02/27/networkflow-sap/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/07/usaco-4-3-3-street-race/index.html","path":"HTML/2011/03/07/usaco-4-3-3-street-race/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","path":"HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","path":"HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","path":"HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","path":"HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/17/poj-1704-game/index.html","path":"HTML/2011/03/17/poj-1704-game/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/18/another-ux-strong-password/index.html","path":"HTML/2011/03/18/another-ux-strong-password/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","path":"HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/22/c-cow-problem/index.html","path":"HTML/2011/03/22/c-cow-problem/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","path":"HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/15/hdu-1730-game/index.html","path":"HTML/2011/03/15/hdu-1730-game/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/19/networkflow-5-round-table/index.html","path":"HTML/2011/03/19/networkflow-5-round-table/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/24/hdu-3389/index.html","path":"HTML/2011/03/24/hdu-3389/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","path":"HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/29/pointers-on-c-8-array/index.html","path":"HTML/2011/03/29/pointers-on-c-8-array/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/29/segment-tree-my-templete/index.html","path":"HTML/2011/03/29/segment-tree-my-templete/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","path":"HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","path":"HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/c-string-point-two-dimension/index.html","path":"HTML/2011/03/30/c-string-point-two-dimension/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","path":"HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/pointers-on-c-9-string/index.html","path":"HTML/2011/03/30/pointers-on-c-9-string/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","path":"HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/31/poj-2478-eular-function/index.html","path":"HTML/2011/03/31/poj-2478-eular-function/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/04/permalink-change/index.html","path":"HTML/2011/05/04/permalink-change/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","path":"HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/05/computational-geometry-hdu-2857/index.html","path":"HTML/2011/05/05/computational-geometry-hdu-2857/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/02/ball-union-zoj-3350/index.html","path":"HTML/2011/05/02/ball-union-zoj-3350/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","path":"HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/08/gcj-2011-klion26/index.html","path":"HTML/2011/05/08/gcj-2011-klion26/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/12/recent-life/index.html","path":"HTML/2011/05/12/recent-life/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/13/factor-num-hdu-1299/index.html","path":"HTML/2011/05/13/factor-num-hdu-1299/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/16/sg-function-hdu-2873/index.html","path":"HTML/2011/05/16/sg-function-hdu-2873/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/09/fedora13-h3c/index.html","path":"HTML/2011/07/09/fedora13-h3c/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","path":"HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/12/number-theory-poj-3358/index.html","path":"HTML/2011/05/12/number-theory-poj-3358/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/18/number-theory-hdu-2879/index.html","path":"HTML/2011/05/18/number-theory-hdu-2879/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/19/cg-hdu-3834/index.html","path":"HTML/2011/07/19/cg-hdu-3834/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/03/hdu-3074-bit-inver/index.html","path":"HTML/2011/07/03/hdu-3074-bit-inver/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/07/25/half-plan-cross/index.html","path":"HTML/2011/07/25/half-plan-cross/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","path":"HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","path":"HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/06/pointers-on-c-link-list/index.html","path":"HTML/2011/04/06/pointers-on-c-link-list/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","path":"HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/09/pointers-on-c-advanced-point/index.html","path":"HTML/2011/04/09/pointers-on-c-advanced-point/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/08/why-am-i-cancer/index.html","path":"HTML/2011/04/08/why-am-i-cancer/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","path":"HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/10/usaco-5-3-4big-barn/index.html","path":"HTML/2011/04/10/usaco-5-3-4big-barn/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/18/poj-2480/index.html","path":"HTML/2011/04/18/poj-2480/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/11/drab-queue-poj-2823/index.html","path":"HTML/2011/04/11/drab-queue-poj-2823/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/12/pointers-on-c-preprocessor/index.html","path":"HTML/2011/04/12/pointers-on-c-preprocessor/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/15/eular-function-2/index.html","path":"HTML/2011/04/15/eular-function-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/20/math-education/index.html","path":"HTML/2011/04/20/math-education/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/19/eular-function-hdu-3307/index.html","path":"HTML/2011/04/19/eular-function-hdu-3307/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/08/03/csu-summer-training-team-1/index.html","path":"HTML/2011/08/03/csu-summer-training-team-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/08/20/reverse-poj-3761/index.html","path":"HTML/2011/08/20/reverse-poj-3761/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/23/5th-csu-acm-competition/index.html","path":"HTML/2011/04/23/5th-csu-acm-competition/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/08/29/usaco-5-4-5-5/index.html","path":"HTML/2011/08/29/usaco-5-4-5-5/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","path":"HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/06/22/xp-fedora-double-os/index.html","path":"HTML/2011/06/22/xp-fedora-double-os/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/12/13/windows-mpi/index.html","path":"HTML/2011/12/13/windows-mpi/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/26/replay-email/index.html","path":"HTML/2012/03/26/replay-email/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/12/22/fuck-csdn/index.html","path":"HTML/2011/12/22/fuck-csdn/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/game-theory-prove/index.html","path":"HTML/2012/03/29/game-theory-prove/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/github-create-project/index.html","path":"HTML/2012/03/29/github-create-project/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/user-chrome-cross-gfw/index.html","path":"HTML/2012/03/29/user-chrome-cross-gfw/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","path":"HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","path":"HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/04/19/vmware-ubuntu-fedora/index.html","path":"HTML/2012/04/19/vmware-ubuntu-fedora/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2011/04/30/primitive-root-poj-1284/index.html","path":"HTML/2011/04/30/primitive-root-poj-1284/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/08/scheme-and-the-little-scheme/index.html","path":"HTML/2012/10/08/scheme-and-the-little-scheme/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","path":"HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","path":"HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/02/12/2011-2012-plan/index.html","path":"HTML/2012/02/12/2011-2012-plan/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/02/12/xp-office-2010-error-1406/index.html","path":"HTML/2012/02/12/xp-office-2010-error-1406/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","path":"HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/09/21/wordpress-fatal-error/index.html","path":"HTML/2012/09/21/wordpress-fatal-error/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/10/23/google-adsense/index.html","path":"HTML/2012/10/23/google-adsense/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","path":"HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/02/18/everything-about-2014/index.html","path":"HTML/2015/02/18/everything-about-2014/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","path":"HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/06/chrome-https-connection/index.html","path":"HTML/2012/11/06/chrome-https-connection/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/13/fedora-13-opengl/index.html","path":"HTML/2012/11/13/fedora-13-opengl/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","path":"HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","path":"HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","path":"HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/03/first-linux-module-lvm/index.html","path":"HTML/2012/12/03/first-linux-module-lvm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/03/08/github-blog-math-expression-support/index.html","path":"HTML/2015/03/08/github-blog-math-expression-support/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","path":"HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","path":"HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","path":"HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/28/vi-basic-command/index.html","path":"HTML/2012/12/28/vi-basic-command/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","path":"HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/07/16/a-brief-view-of-storm/index.html","path":"HTML/2015/07/16/a-brief-view-of-storm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/07/17/experiment-of-storm-grouping/index.html","path":"HTML/2015/07/17/experiment-of-storm-grouping/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","path":"HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/05/display-views-count-without-plugin/index.html","path":"HTML/2012/11/05/display-views-count-without-plugin/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/06/21/linux-command-shell-scripts-3/index.html","path":"HTML/2013/06/21/linux-command-shell-scripts-3/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/01/03/algorithm-series/index.html","path":"HTML/2015/01/03/algorithm-series/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/01/17/recursion/index.html","path":"HTML/2015/01/17/recursion/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/03/26/some-easy-math-problems/index.html","path":"HTML/2013/03/26/some-easy-math-problems/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","path":"HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/03/07/matlab-2012-libsvm/index.html","path":"HTML/2013/03/07/matlab-2012-libsvm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","path":"HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","path":"HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/05/25/linux-command-shell-script-2/index.html","path":"HTML/2013/05/25/linux-command-shell-script-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/05/24/linux-command-shell-script/index.html","path":"HTML/2013/05/24/linux-command-shell-script/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/09/11/algorithms-chapter-5/index.html","path":"HTML/2013/09/11/algorithms-chapter-5/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/11/23/nonviolent-communication/index.html","path":"HTML/2013/11/23/nonviolent-communication/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/07/26/redis-pqsort-c/index.html","path":"HTML/2015/07/26/redis-pqsort-c/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","path":"HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","path":"HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","path":"HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/12/22/spiral-matrix/index.html","path":"HTML/2013/12/22/spiral-matrix/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","path":"HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/12/20/level-order-of-a-tree/index.html","path":"HTML/2013/12/20/level-order-of-a-tree/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2015/01/05/dynamic-programming/index.html","path":"HTML/2015/01/05/dynamic-programming/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2013/12/25/string-to-integer-atoi/index.html","path":"HTML/2013/12/25/string-to-integer-atoi/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/01/04/reverse-linked-list/index.html","path":"HTML/2014/01/04/reverse-linked-list/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/17/srm-620-randomgraph/index.html","path":"HTML/2014/05/17/srm-620-randomgraph/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/02/linux-daemon/index.html","path":"HTML/2014/05/02/linux-daemon/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/09/linux-dbm/index.html","path":"HTML/2014/05/09/linux-dbm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/07/08/select-and-poll/index.html","path":"HTML/2014/07/08/select-and-poll/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","path":"HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","path":"HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","path":"HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/10/01/2014-code-interview/index.html","path":"HTML/2014/10/01/2014-code-interview/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/11/02/least-recently-used-algorithm/index.html","path":"HTML/2014/11/02/least-recently-used-algorithm/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/12/29/show-me-the-code/index.html","path":"HTML/2014/12/29/show-me-the-code/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","path":"HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","path":"HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","path":"HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","path":"HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","path":"HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","path":"HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","path":"HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","path":"HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/04/15/从现在开始写作/index.html","path":"HTML/2017/04/15/从现在开始写作/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/heap.png","path":"HTML/2017/09/17/GC-标记-清除算法/heap.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/index.html","path":"HTML/2017/09/17/GC-标记-清除算法/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","path":"HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","path":"HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","modified":0,"renderable":0},{"_id":"source/HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","path":"HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/09/django-configuration-in-action/index.html","path":"HTML/2017/11/09/django-configuration-in-action/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/index.html","path":"HTML/2017/07/14/tmux-简单使用指南/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","path":"HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/first_version.png","path":"HTML/2017/11/20/git-inside/first_version.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/file_tree.png","path":"HTML/2017/11/20/git-inside/file_tree.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/index.html","path":"HTML/2017/11/20/git-inside/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/second_version.png","path":"HTML/2017/11/20/git-inside/second_version.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/project.png","path":"HTML/2017/11/20/git-inside/project.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/20/git-inside/third_version.png","path":"HTML/2017/11/20/git-inside/third_version.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/11/27/TaskScheduler/index.html","path":"HTML/2017/11/27/TaskScheduler/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/procesure.jpg","path":"HTML/2017/10/16/spark-dagscheduler/procesure.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/index.html","path":"HTML/2017/10/16/spark-dagscheduler/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/stage.jpg","path":"HTML/2017/10/16/spark-dagscheduler/stage.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/10/Python-代码实践小结/index.html","path":"HTML/2017/05/10/Python-代码实践小结/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","path":"HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","path":"HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/03/tasksetmanager/index.html","path":"HTML/2017/12/03/tasksetmanager/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/01/06/线程堆栈分析/dead_lock.png","path":"HTML/2018/01/06/线程堆栈分析/dead_lock.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/01/06/线程堆栈分析/index.html","path":"HTML/2018/01/06/线程堆栈分析/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/01/06/线程堆栈分析/wait_sleep.png","path":"HTML/2018/01/06/线程堆栈分析/wait_sleep.png","modified":0,"renderable":0},{"_id":"source/HTML/2014/09/26/epoll-and-select/index.html","path":"HTML/2014/09/26/epoll-and-select/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","path":"HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure12_transaction.jpg","path":"HTML/2017/12/22/millwheel/figure12_transaction.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","path":"HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure13_latency.jpg","path":"HTML/2017/12/22/millwheel/figure13_latency.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","path":"HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/figure16_cache.jpg","path":"HTML/2017/12/22/millwheel/figure16_cache.jpg","modified":0,"renderable":0},{"_id":"source/HTML/2017/12/22/millwheel/index.html","path":"HTML/2017/12/22/millwheel/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","path":"HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","path":"HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2014/06/20/nginx-http-filter-module/index.html","path":"HTML/2014/06/20/nginx-http-filter-module/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","path":"HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","path":"HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","path":"HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2017/05/20/hello-world/index.html","path":"HTML/2017/05/20/hello-world/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","path":"HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","path":"HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","path":"HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","path":"HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","path":"HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","path":"HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/06/11/asking-the-right-questions/index.html","path":"HTML/2016/06/11/asking-the-right-questions/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","path":"HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","path":"HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/01/20/how-to-read-a-book/index.html","path":"HTML/2016/01/20/how-to-read-a-book/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","path":"HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","path":"HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/04/06/Flink-State/index.html","path":"HTML/2018/04/06/Flink-State/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/04/06/Flink-State/state-hierarchy.png","path":"HTML/2018/04/06/Flink-State/state-hierarchy.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/04/06/Flink-State/state-rescale.png","path":"HTML/2018/04/06/Flink-State/state-rescale.png","modified":0,"renderable":0},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","path":"HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","modified":0,"renderable":0},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","path":"HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","modified":0,"renderable":0},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","path":"HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","modified":0,"renderable":0},{"_id":"source/HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","path":"HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","modified":0,"renderable":0},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","path":"HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","modified":0,"renderable":0},{"_id":"source/HTML/index.html","path":"HTML/index.html","modified":0,"renderable":0},{"_id":"themes/freemind/source/css/comment.css","path":"css/comment.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/google-fonts.css","path":"css/google-fonts.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/highlight-default.min.css","path":"css/highlight-default.min.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/responsive.css","path":"css/responsive.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/comment.js","path":"js/comment.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/marked.js","path":"js/marked.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/spin.min.js","path":"js/spin.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/js/timeago.min.js","path":"js/timeago.min.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/github-sprite.png","path":"img/github-sprite.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","path":"img/glyphicons-halflings-white.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","path":"img/glyphicons-halflings.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/grid-18px-masked.png","path":"img/grid-18px-masked.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/img/grid-baseline-20px.png","path":"img/grid-baseline-20px.png","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/bootstrap.css","path":"css/themes/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/cerulean.css","path":"css/themes/cerulean.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/common.css","path":"css/themes/common.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/cosmo.css","path":"css/themes/cosmo.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/cyborg.css","path":"css/themes/cyborg.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/darkly.css","path":"css/themes/darkly.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/default.css","path":"css/themes/default.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/flatly.css","path":"css/themes/flatly.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/journal.css","path":"css/themes/journal.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/lumen.css","path":"css/themes/lumen.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/paper.css","path":"css/themes/paper.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/readable.css","path":"css/themes/readable.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/sandstone.css","path":"css/themes/sandstone.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/simplex.css","path":"css/themes/simplex.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/slate.css","path":"css/themes/slate.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/spacelab.css","path":"css/themes/spacelab.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/superhero.css","path":"css/themes/superhero.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/united.css","path":"css/themes/united.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/css/themes/yeti.css","path":"css/themes/yeti.css","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":0,"renderable":1},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"themes/freemind/source/css/themes/common.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1684294058224},{"_id":"themes/freemind/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1714964121908},{"_id":"themes/freemind/_config.yml","hash":"25c6730dc22111606f9bcdedde01fcfa4473ac43","modified":1714965110025},{"_id":"themes/freemind/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1714964121917},{"_id":"themes/freemind/README.md","hash":"9b80c245e49f602739c05038fea18186432d0ad9","modified":1714964121909},{"_id":"themes/freemind/layout/page.ejs","hash":"781887eec7ac7b9812c529baccb564a77061d687","modified":1714964121916},{"_id":"themes/freemind/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1684294058217},{"_id":"themes/freemind/LICENSE","hash":"a708d11fd1944ab4b94b39a8c83c75f362a170d7","modified":1714964121908},{"_id":"themes/freemind/layout/categories.ejs","hash":"9864e02b4c08678910d0be3f0f16cfcaa26232dc","modified":1714964121916},{"_id":"themes/freemind/layout/layout.ejs","hash":"6d1b7b626a2b2d994ff6fff4eaad60dd9fd42aeb","modified":1714964121916},{"_id":"themes/freemind/layout/index.ejs","hash":"2beec802d9dadb9369ffc7511304b1cc1feb96b0","modified":1714964121916},{"_id":"themes/freemind/languages/default.yml","hash":"6ea300b240139d3f363c66e105feed4113629c86","modified":1714964121909},{"_id":"themes/freemind/layout/post.ejs","hash":"06a110a121af15c00921b8cb4b99fe736d4e17c7","modified":1714964121916},{"_id":"themes/freemind/layout/tags.ejs","hash":"6f36ab68d9998177a92bb85b438dc7954e659356","modified":1714964121916},{"_id":"themes/freemind/languages/zh-CN.yml","hash":"9a5392c125c20d1b64f7fdc8c22e1d30b4a8fbe4","modified":1714964121909},{"_id":"themes/freemind/languages/pt-BR.yml","hash":"5909ce04246e958746c2d75a0dfd47076f8d0132","modified":1714964121909},{"_id":"themes/freemind/languages/zh-TW.yml","hash":"44f8887b925454e7144c8c1bb9c8ca194cec969c","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/after_footer.ejs","hash":"464732987cb5d1e47e52559b7a278880083b3819","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/archive.ejs","hash":"0fb21f2ee54bd049edfd6426195d88231df6568b","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/article.ejs","hash":"21463a6393a1468778dbb49d0eb61c556bf4e869","modified":1714964121910},{"_id":"themes/freemind/layout/_partial/footer.ejs","hash":"b4b55c57c4172931af355565ba404dc7dd367c21","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/navigation.ejs","hash":"5b690ac12661e296329c1371d3d87ee74a6f4239","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/index.ejs","hash":"e20fe55bfb46e9e7e0191c6639268ef66583084a","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/head.ejs","hash":"e1adfc2be16a7869d2295771fd239c73a37596b3","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/index_pagination.ejs","hash":"fa818b1c87cd3b1df94b17587fe998c54a35976e","modified":1714964121911},{"_id":"themes/freemind/layout/_partial/search.ejs","hash":"a7c526c07a8af040ba285dc63f267004ce211dce","modified":1714964121914},{"_id":"themes/freemind/layout/_partial/sidebar.ejs","hash":"862ff700568ec5a00f222131b353475d0a3f2a9c","modified":1714964121914},{"_id":"themes/freemind/layout/_widget/recent_posts.ejs","hash":"8ef64298ff7d5576cbbc5d353f7cd026ce5dcbd5","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/category.ejs","hash":"8f3b0aa1fa02ebdbacc23bc3bc26f90f96dbad5b","modified":1714964121914},{"_id":"themes/freemind/layout/_widget/links.ejs","hash":"c0452a56e4513efe03867734f5fbcb6715f9a852","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/recent_comments.ejs","hash":"b7f35a28bfafc858921f9065965ebbfb034ba781","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/rss.ejs","hash":"7e24b248e4b9992ef5237ec28767aea50577bae7","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/search.ejs","hash":"620dd8a93a9f0fca63f6f0b520cf192ce7b5a645","modified":1714964121915},{"_id":"themes/freemind/layout/_widget/tagcloud.ejs","hash":"7ee4fefcd60c3b5ca918d4044ec4c60dd702673d","modified":1714964121915},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1684294058245},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1684294058249},{"_id":"themes/freemind/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1684294058244},{"_id":"themes/freemind/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1684294058243},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1714964121940},{"_id":"themes/freemind/source/css/highlight.css","hash":"98a031dd0991929ec23098db9dfde15ae662f031","modified":1714964121918},{"_id":"themes/freemind/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1714964121940},{"_id":"themes/freemind/source/css/comment.css","hash":"acbef2bb5327b74fb68036ae238bc03514e4b4d8","modified":1714964121917},{"_id":"themes/freemind/source/css/responsive.css","hash":"25136a75af5957a669d5c4782da8b8fa95f8fc55","modified":1714964121918},{"_id":"themes/freemind/source/img/github-sprite.png","hash":"4d7ee33beaaebf002ba57a172d159e46194ae481","modified":1684294058253},{"_id":"themes/freemind/source/css/style.css","hash":"1c6958e4fa8ab11aca518b9a556fe2fad4976675","modified":1714964121918},{"_id":"themes/freemind/source/img/grid-18px-masked.png","hash":"1379b689836f9fcccd88aa729c4034d6b36e1f3c","modified":1684294058254},{"_id":"themes/freemind/source/img/glyphicons-halflings-white.png","hash":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1684294058254},{"_id":"themes/freemind/source/img/glyphicons-halflings.png","hash":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1684294058254},{"_id":"themes/freemind/source/img/grid-baseline-20px.png","hash":"43b8d0c9b39f5ce07ecfde036fd13f835c129238","modified":1684294058254},{"_id":"themes/freemind/source/css/google-fonts.css","hash":"91e629d0a0a531e920252788ed8863c26608c2b2","modified":1714964121917},{"_id":"themes/freemind/source/css/highlight-default.min.css","hash":"6ad10fd07f492660d5c8c8eaec6e74a94d277b4a","modified":1684294058220},{"_id":"themes/freemind/source/js/bootstrap.min.js","hash":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1714964121954},{"_id":"themes/freemind/source/js/comment.js","hash":"5cdafe054baa2ef66670ed46e6f862718e77bfcb","modified":1714964121956},{"_id":"themes/freemind/source/js/gallery.js","hash":"d19f1b1cc5b75e21ca1d643b6dae9490ead28b55","modified":1714964121957},{"_id":"themes/freemind/source/css/font-awesome.css","hash":"6df51eee1e75e450cb9cd71e925e6aa9ac2d6a9d","modified":1714964121917},{"_id":"themes/freemind/source/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1714964121957},{"_id":"themes/freemind/source/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1684294058257},{"_id":"themes/freemind/source/js/main.js","hash":"d78290344d95646172e488e0af2dade9740288f8","modified":1714964121958},{"_id":"themes/freemind/source/js/marked.js","hash":"b1d4ef560ea01a5fe3a391a5933be5e7016f1d6a","modified":1714964121958},{"_id":"themes/freemind/layout/_partial/post/analytics.ejs","hash":"31a0a3e5bc616b847c1ed82293fb3a3fc97054be","modified":1714964121912},{"_id":"themes/freemind/source/js/search.js","hash":"6197e425941f107761d3cbfb0f06ad4a3f5f7427","modified":1714964121959},{"_id":"themes/freemind/layout/_partial/post/bdshare.ejs","hash":"24c91ac17714ea39120a18633c3611b15464e5ab","modified":1684294058213},{"_id":"themes/freemind/layout/_partial/post/category.ejs","hash":"6ea00603f6a93b68aa2ca1cab9f459902ec95e1a","modified":1714964121912},{"_id":"themes/freemind/layout/_partial/post/comment.ejs","hash":"884ea68df119de6d731665b981ccc0a5a746449c","modified":1714964121912},{"_id":"themes/freemind/layout/_partial/post/jiathis.ejs","hash":"6fbf47f67e6f18fe4fea7fff6b564d29512469b5","modified":1684294058214},{"_id":"themes/freemind/layout/_partial/post/comment_footer.ejs","hash":"fefc355eb4d61d08ffca7f6439fecb146696265e","modified":1714964121912},{"_id":"themes/freemind/source/js/spin.min.js","hash":"f91e2b661f4feb976b5e260bdc2366763ad13562","modified":1714964121959},{"_id":"themes/freemind/source/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1684294058258},{"_id":"themes/freemind/layout/_partial/post/pagination.ejs","hash":"68ea473404ec0606f7855c06eb1cd4fb3dafe550","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/meta.ejs","hash":"70b3b1dc3b039db3ef6f5e88709d0d4d5a8034a5","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/entry.ejs","hash":"4d152fc69ba6042b652aa70584564e20ef070e9b","modified":1714964121912},{"_id":"themes/freemind/layout/_partial/post/recommended_posts.ejs","hash":"68c27c333534a23d1037a2bfd136bef1468389cb","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/tag.ejs","hash":"db79c3d2b77c64c354f48f2eb6b648108e986857","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/slogan.ejs","hash":"99b66f7b36f1bf1707c5ce5156c79359799539eb","modified":1714964121913},{"_id":"themes/freemind/layout/_partial/post/title_top.ejs","hash":"b8558cf461df2211a072180bdf8b709eb7d135c4","modified":1714964121914},{"_id":"themes/freemind/layout/_partial/post/title.ejs","hash":"a22fb024c8aaefdc04eee8587a184309e17e9232","modified":1714964121914},{"_id":"themes/freemind/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1684294058250},{"_id":"themes/freemind/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1684294058251},{"_id":"themes/freemind/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1684294058250},{"_id":"themes/freemind/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1684294058252},{"_id":"themes/freemind/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1684294058252},{"_id":"themes/freemind/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1684294058253},{"_id":"themes/freemind/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1684294058252},{"_id":"themes/freemind/source/css/themes/default.css","hash":"32f758d295c7037f247d300f2481b5d7d4f3b100","modified":1714964121923},{"_id":"themes/freemind/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1684294058251},{"_id":"themes/freemind/source/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1684294058245},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1684294058249},{"_id":"themes/freemind/source/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1714964121957},{"_id":"themes/freemind/source/css/themes/bootstrap.css","hash":"11197c2fc2925b34cc98a3f4ec67ffdd9f36a760","modified":1714964121919},{"_id":"themes/freemind/source/css/themes/cosmo.css","hash":"bcb36ab2b547571fa4125e05e1074abba6bd5670","modified":1714964121921},{"_id":"themes/freemind/source/css/themes/cyborg.css","hash":"4320dbfd9543f6ef1cc703d83d85c6652f9272d0","modified":1714964121922},{"_id":"themes/freemind/source/css/themes/cerulean.css","hash":"7fee0903cce12483ae3f37d330ef693826a5a61f","modified":1714964121921},{"_id":"themes/freemind/source/css/themes/journal.css","hash":"b77cda6baedc3852c64f5664206356b3057b4781","modified":1714964121925},{"_id":"themes/freemind/source/css/themes/paper.css","hash":"1ae57ddb500a85b8ca8e7d2897e55cb2ba4cf1bc","modified":1714964121926},{"_id":"themes/freemind/source/css/themes/flatly.css","hash":"a95865761e69d0daf75660e24d9f5f316482ea55","modified":1714964121924},{"_id":"themes/freemind/source/css/themes/readable.css","hash":"af59c50f83bba69a4fef7d0ac32e309c903b4511","modified":1714964121928},{"_id":"themes/freemind/source/css/themes/sandstone.css","hash":"5878440ffa7e1656214bafd8b7f39d736219807a","modified":1714964121929},{"_id":"themes/freemind/source/css/themes/simplex.css","hash":"b8165c48cf72e54c1f8ae1a550a04a64e6ce1929","modified":1714964121931},{"_id":"themes/freemind/source/css/themes/slate.css","hash":"3859265e9fcdb579f40a2ef7a5bd8dbead2d13ca","modified":1714964121934},{"_id":"themes/freemind/source/css/themes/spacelab.css","hash":"fa4efbf50ca392c25e9b6395d6221696ec6573b6","modified":1714964121935},{"_id":"themes/freemind/source/css/themes/superhero.css","hash":"cc4ce979e1def77b7c9b250d97d0baf3e0a3f845","modified":1714964121935},{"_id":"themes/freemind/source/css/themes/united.css","hash":"857151fa534842d0f8e862b2067f22905a1b3382","modified":1714964121936},{"_id":"themes/freemind/source/css/themes/lumen.css","hash":"5c23c4a98aec86b8483040e0ca602d3a4574f32c","modified":1714964121925},{"_id":"themes/freemind/source/css/themes/darkly.css","hash":"581ff4339a616fe26b4dc1b6c1d1ad7946b83de6","modified":1714964121923},{"_id":"themes/freemind/source/css/themes/yeti.css","hash":"7cb64c45bed521321e0a4a57e05e3d1c87721f16","modified":1714964121937},{"_id":"themes/freemind/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1684294058248},{"_id":"source/_posts/lsm-tree-1-2023-05-17.md","hash":"ecdafb4abc12597fba98eaa56f7b5fdcb6d92f0b","modified":1714963932101},{"_id":"source/.DS_Store","hash":"b00b8f7a99ff3a6b75efc410be50f61f4a579433","modified":1682326446420},{"_id":"source/_drafts/lsm-tree-2-20230517.md","hash":"c0d0ca02a8471176e528b0e0ee8ed96fa6845de4","modified":1714963891126},{"_id":"source/HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","hash":"d00f26d86a9ed0f18217896e5ed67a877836d8ab","modified":1643724682008},{"_id":"source/_posts/big-data-paper-big-picture.md","hash":"ccbcf56371d1e5d3db66a4e80620bb5983f32569","modified":1714963932101},{"_id":"source/HTML/2010/12/09/hello-world-1/index.html","hash":"b7f672733e1544662e607889962dc7e2ff1dece4","modified":1643724682006},{"_id":"source/HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","hash":"0ebfa804c365dc70ea2e37a323fbc48e2963857d","modified":1643724682008},{"_id":"source/HTML/2010/12/14/red-hat9-command-messy-code/index.html","hash":"b8511a068efe0a825516424a6a807f518834fa50","modified":1643724682008},{"_id":"source/HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","hash":"a0b458ff43182267b6a0bb6d85d03ffa142b8f78","modified":1643724682007},{"_id":"source/HTML/2010/12/22/linux-shell-problem/index.html","hash":"4e01c5a3d4746a7e9f8cdeeb4d8a70009c62aeec","modified":1643724682009},{"_id":"source/HTML/2010/12/16/wordpress-link-order/index.html","hash":"4112ccf19e134969ef45dd6f982933f36bb8f093","modified":1643724682009},{"_id":"source/HTML/2010/12/14/linux-rename/index.html","hash":"9d612e51ee296c6ce0e9baaa750f72c49f99470d","modified":1643724682007},{"_id":"source/HTML/2010/12/30/linux-fork-test/index.html","hash":"d70a5871ad8b47faf6a41be054559ed2099699d8","modified":1643724682010},{"_id":"source/HTML/2010/12/23/linux-single-user-config/index.html","hash":"41a1c7ca16e86feba1e6bdc0cfc64e5a47668a44","modified":1643724682010},{"_id":"source/HTML/2010/12/31/linux-fork-2/index.html","hash":"9ddcf3b5ef334232628a464c054176ca39a325c5","modified":1643724682011},{"_id":"source/HTML/2010/12/30/wordpress-clickchar-plugin/index.html","hash":"f29d93933c20f5cbecbc332ed620e24481940de3","modified":1643724682011},{"_id":"source/HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","hash":"8792c869577319964af72d1e12680887faf5d65f","modified":1643724682012},{"_id":"source/HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","hash":"c7671d8d7bb5d368a426bd4dbb9d77bff2659754","modified":1643724682012},{"_id":"source/HTML/2011/02/10/networkflow-1-maximum-matching/index.html","hash":"bcdb2deb83feb707c0125e6c7430e5fab733cf25","modified":1643724682012},{"_id":"source/HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","hash":"103e1306fe629a15de363c25db4194d1c8aa0e61","modified":1643724682013},{"_id":"source/HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","hash":"9cbf3bd17f36d430e18187c241aae6377ad0da39","modified":1643724682014},{"_id":"source/HTML/2010/12/23/linux-grub-encrypt/index.html","hash":"4f414c75abba66766dfb58c1ba0f655d25dfc668","modified":1643724682010},{"_id":"source/HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","hash":"a6870b51f201fc9cc1f460a5f36bd87c3b96c13c","modified":1643724682014},{"_id":"source/HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","hash":"0bfc284b03ed350bb4227fe04396a5bd44a3cb1c","modified":1643724682015},{"_id":"source/HTML/2011/03/07/usaco-4-3-3-street-race/index.html","hash":"bf00799ad8ac89113d39464e8bf08dd6299f920e","modified":1643724682016},{"_id":"source/HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","hash":"42f2bcc74e794aa3757c92ca9c29ab8b9da8f5a9","modified":1643724682015},{"_id":"source/HTML/2011/02/27/networkflow-sap/index.html","hash":"72f316e2e41aaaa4fe89bb4dd98d4317d8cfae6d","modified":1643724682015},{"_id":"source/HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","hash":"367c0d2ebaaa6e7a348b3862e34358eba6490f68","modified":1643724682013},{"_id":"source/HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","hash":"036e41c9402c101a928cb8b8ca958dd1bf82c8c9","modified":1643724682018},{"_id":"source/HTML/2011/03/17/poj-1704-game/index.html","hash":"fddc4e2410614c3a7078395254ace1797cf5fc3a","modified":1643724682017},{"_id":"source/HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","hash":"c9c0874db9d75d18fea253724226f928cee1b29f","modified":1643724682016},{"_id":"source/HTML/2011/03/18/another-ux-strong-password/index.html","hash":"ce2d0804d9df70cce8a61d12d1306a8428dc10b4","modified":1643724682018},{"_id":"source/HTML/2011/03/22/c-cow-problem/index.html","hash":"9b6583d3037c8507c697d948de624b4ff1a2411f","modified":1643724682019},{"_id":"source/HTML/2011/03/15/hdu-1730-game/index.html","hash":"86d41ced94481000ffc8df4a012af2efe4e6f81a","modified":1643724682017},{"_id":"source/HTML/2011/03/19/networkflow-5-round-table/index.html","hash":"ea36968262bacdeb21939f52b2d38277f804753f","modified":1643724682019},{"_id":"source/HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","hash":"e3452f98ef670c2ed7444846a103a4c301eb60df","modified":1643724682020},{"_id":"source/HTML/2011/03/24/hdu-3389/index.html","hash":"1337e0432e89c41b226dde340a01e0ca699ba4e8","modified":1643724682020},{"_id":"source/HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","hash":"36c1fdb176ea126f01d21a9e1c53b375136e2869","modified":1643724682021},{"_id":"source/HTML/2011/03/29/pointers-on-c-8-array/index.html","hash":"d349f5f698b296af66067118a0705d4544f0548b","modified":1643724682022},{"_id":"source/HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","hash":"6ca3126283b597c9d5148ad698015cc407df8996","modified":1643724682017},{"_id":"source/HTML/2011/03/29/segment-tree-my-templete/index.html","hash":"355b3a7fa94eec5e5f478280f43fa8b6e3bc91e3","modified":1643724682022},{"_id":"source/HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","hash":"2949947bc26404766155bbaeacc5ef4dbe237632","modified":1643724682018},{"_id":"source/HTML/2011/03/30/pointers-on-c-9-string/index.html","hash":"424b0332899bd8e3c356f7cf5964b0fd6cdc1211","modified":1643724682024},{"_id":"source/HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","hash":"82579e26e984e553bb0f2adb471823c6bfebb75f","modified":1643724682021},{"_id":"source/HTML/2011/03/31/poj-2478-eular-function/index.html","hash":"fa99d98b10fd1e5db61489036eed11294b79b29d","modified":1643724682025},{"_id":"source/HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","hash":"524c4c732ec73544fd340fae7ee53a9b6d77b239","modified":1643724682023},{"_id":"source/HTML/2011/03/30/c-string-point-two-dimension/index.html","hash":"58708fcb8ffba3acaa38b9c882cbf959bb7b598d","modified":1643724682023},{"_id":"source/HTML/2011/05/02/ball-union-zoj-3350/index.html","hash":"8cbb82a3be70cc60a24e129b740a2012560b6d08","modified":1643724682034},{"_id":"source/HTML/2011/05/04/permalink-change/index.html","hash":"69b1c5b855b539e77084fc25a41dd73873f4ed2a","modified":1643724682034},{"_id":"source/HTML/2011/05/12/recent-life/index.html","hash":"883c2a340ed6bb52561b4e83725370b3958c9bfa","modified":1643724682035},{"_id":"source/HTML/2011/05/08/gcj-2011-klion26/index.html","hash":"ad887c11e2a3ed3d61d47ef1b98604658ddede50","modified":1643724682035},{"_id":"source/HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","hash":"5ab2c014286103dd584f13a3f550faa9799b5cb6","modified":1643724682024},{"_id":"source/HTML/2011/05/05/computational-geometry-hdu-2857/index.html","hash":"d1d7cbee12bc15dca86d0aa89774670aeb4a46e7","modified":1643724682034},{"_id":"source/HTML/2011/05/13/factor-num-hdu-1299/index.html","hash":"b9113a538cee1221fe008d3096fdf96ff31cbbad","modified":1643724682036},{"_id":"source/HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","hash":"18d3f7f49503c036f21edf5dd3c0fa81ff327f9e","modified":1643724682037},{"_id":"source/HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","hash":"addd4a410964b3e69498495ed082ade0a430c8f6","modified":1643724682020},{"_id":"source/HTML/2011/07/09/fedora13-h3c/index.html","hash":"59a8264b0c5cedc1e9bf67fb63015dc489dbb82d","modified":1643724682038},{"_id":"source/HTML/2011/05/16/sg-function-hdu-2873/index.html","hash":"cb57dc1f27fad14dd8acb0c0b80e7bd5731f55e5","modified":1643724682036},{"_id":"source/HTML/2011/07/19/cg-hdu-3834/index.html","hash":"39d047e463509a230b67c0edd776580fc5db4824","modified":1643724682039},{"_id":"source/HTML/2011/05/18/number-theory-hdu-2879/index.html","hash":"ef7ec4bd95b42f7ee4ec9e7bde96e1710c972d1a","modified":1643724682036},{"_id":"source/HTML/2011/07/25/half-plan-cross/index.html","hash":"fe71d156e99bc3c25b2cadf11c1cf658cd63f0bd","modified":1643724682039},{"_id":"source/HTML/2011/05/12/number-theory-poj-3358/index.html","hash":"7fb44db3ffb65ed728614dd429adc6c141c3c0bd","modified":1643724682035},{"_id":"source/HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","hash":"3908576594d237c6c804c1b8752446488abd9129","modified":1643724682025},{"_id":"source/HTML/2011/07/03/hdu-3074-bit-inver/index.html","hash":"f9f58fc223530af8f2b69f75c8f65ecfb5d8f17d","modified":1643724682038},{"_id":"source/HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","hash":"9fd5ba0ed21ee57515033fba964f0990d9dc4d62","modified":1643724682037},{"_id":"source/HTML/2011/04/06/pointers-on-c-link-list/index.html","hash":"8d9bff69889c75f147862cc0a01d8cd43005803d","modified":1643724682025},{"_id":"source/HTML/2011/04/09/pointers-on-c-advanced-point/index.html","hash":"2f4367843a73a7bd90426a48ef7a09094397db9e","modified":1643724682028},{"_id":"source/HTML/2011/04/08/why-am-i-cancer/index.html","hash":"ce0296801768a68ba57cfb69a860e2298d61ae2b","modified":1643724682027},{"_id":"source/HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","hash":"ce65978cdce22f4dffa5d2c29660edec522a1376","modified":1643724682026},{"_id":"source/HTML/2011/04/10/usaco-5-3-4big-barn/index.html","hash":"8860de52be4ed4ea9b0765ab2d3bbdac5fa5362e","modified":1643724682028},{"_id":"source/HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","hash":"e6095a0851aa63f8819f3b3154ebe1229c2bf651","modified":1643724682028},{"_id":"source/HTML/2011/04/18/poj-2480/index.html","hash":"4143146c12ad472ca5c32d1c178061f1e556d715","modified":1643724682031},{"_id":"source/HTML/2011/04/12/pointers-on-c-preprocessor/index.html","hash":"1e915680cefc0d37eb7fc9057f73f80640f3c361","modified":1643724682029},{"_id":"source/HTML/2011/04/15/eular-function-2/index.html","hash":"1c77fb3ed96cc13efd55da70f9fa5898fb274c88","modified":1643724682030},{"_id":"source/HTML/2011/04/20/math-education/index.html","hash":"c9ee2a68ccf1e2e110b841dcaac6df9a079fcf10","modified":1643724682032},{"_id":"source/HTML/2011/04/11/drab-queue-poj-2823/index.html","hash":"7f2834f5709489d837e70785b3dc8d81909a125c","modified":1643724682029},{"_id":"source/HTML/2011/04/19/eular-function-hdu-3307/index.html","hash":"85eadd67b4e3e79aa3dd45a864a293ab1fffccb4","modified":1643724682031},{"_id":"source/HTML/2011/04/23/5th-csu-acm-competition/index.html","hash":"c5f5f1dfafb7a0b2c88532cdc766e4a05924723e","modified":1643724682032},{"_id":"source/HTML/2011/08/03/csu-summer-training-team-1/index.html","hash":"a9146de61bc23003df5ed8803d90f9c5a913c8e0","modified":1643724682040},{"_id":"source/HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","hash":"741a65ff9e2f723f6f73f15297eae911addf20e9","modified":1643724682041},{"_id":"source/HTML/2011/12/13/windows-mpi/index.html","hash":"1e17e6ae682e6bda42f3d29175152a13262ee133","modified":1643724682041},{"_id":"source/HTML/2012/03/26/replay-email/index.html","hash":"b62467076fd17850deceaf7ecbcc45b589c17f7f","modified":1643724682044},{"_id":"source/HTML/2011/08/20/reverse-poj-3761/index.html","hash":"eaa188dc8535815d7ce9bffa1a1d0f6ab832a747","modified":1643724682040},{"_id":"source/HTML/2011/12/22/fuck-csdn/index.html","hash":"85bf2255512e61dce31cc6b814a16bb1a06b9e50","modified":1643724682042},{"_id":"source/HTML/2012/03/29/game-theory-prove/index.html","hash":"359138454377c3be0c1b56514c52ca5b3c92fda5","modified":1643724682044},{"_id":"source/HTML/2011/06/22/xp-fedora-double-os/index.html","hash":"6201f0b3b333237c1bae23a2ddac8772eeec2fb6","modified":1643724682037},{"_id":"source/HTML/2012/03/29/github-create-project/index.html","hash":"0dfe30c40e5eb7844774431c3a2f23198c3aa98e","modified":1643724682045},{"_id":"source/HTML/2012/03/29/user-chrome-cross-gfw/index.html","hash":"4513b37b2fa4274bf23f3d26d416ff6e3789059e","modified":1643724682045},{"_id":"source/HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","hash":"9b9fb81db0fda767d55b5e78a4f2fa6e757edd76","modified":1643724682044},{"_id":"source/HTML/2012/04/19/vmware-ubuntu-fedora/index.html","hash":"8311e538ee43fc48dc8336f1e8aeea5c6331718b","modified":1643724682046},{"_id":"source/HTML/2011/08/29/usaco-5-4-5-5/index.html","hash":"769be6d46db0548217c05c07e4860129033f79aa","modified":1643724682041},{"_id":"source/HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","hash":"e157551e80201ba43816db752149292b8652428f","modified":1643724682045},{"_id":"source/HTML/2011/04/30/primitive-root-poj-1284/index.html","hash":"3677d61cb738099c66dfb5b5b236b8121b0e7166","modified":1643724682033},{"_id":"source/HTML/2012/10/08/scheme-and-the-little-scheme/index.html","hash":"56664152df6cf144b1975769db42c2b981d15bfc","modified":1643724682047},{"_id":"source/HTML/2012/02/12/xp-office-2010-error-1406/index.html","hash":"309a061c7eb2f3112632e8bf7490d189503990b7","modified":1643724682043},{"_id":"source/HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","hash":"85984e0025114e68467f589991a06c8ffaa4d51b","modified":1643724682048},{"_id":"source/HTML/2012/02/12/2011-2012-plan/index.html","hash":"71634c372770d753da885f58a7bf60878ab33cd1","modified":1643724682042},{"_id":"source/HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","hash":"debdbac50dc17fd3c5b614f03bb21a00ecca4546","modified":1643724682048},{"_id":"source/HTML/2012/09/21/wordpress-fatal-error/index.html","hash":"2a442a68173b4fce7e336794c2ff3838c549681c","modified":1643724682046},{"_id":"source/HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","hash":"76ad45bbf89459b45a081ab691182a4f0a39e2fd","modified":1643724682049},{"_id":"source/HTML/2012/10/23/google-adsense/index.html","hash":"7f28cdd569711be433560f1e31463818286911d4","modified":1643724682048},{"_id":"source/HTML/2015/02/18/everything-about-2014/index.html","hash":"2f493ee0acf299b62fb842834a40b0b20ab74501","modified":1643724682071},{"_id":"source/HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","hash":"ff019f186e2020408b4af8aac5da3ce078a2b3ed","modified":1643724682046},{"_id":"source/HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","hash":"4ebd787ed4427933d25ba086df66812dc3ca969e","modified":1643724682047},{"_id":"source/HTML/2012/11/06/chrome-https-connection/index.html","hash":"8817e0e1990c6271d34c574b496746e1fdaf9e96","modified":1643724682049},{"_id":"source/HTML/2012/11/13/fedora-13-opengl/index.html","hash":"223fe001ae8c8eaad09243692c58f39797a1d3a1","modified":1643724682050},{"_id":"source/HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","hash":"e6dcd1b34818b59331bd5421e68807b8375e7cbc","modified":1643724682051},{"_id":"source/HTML/2012/12/03/first-linux-module-lvm/index.html","hash":"50363b09aab678ec614add1999e312fc028eccab","modified":1643724682052},{"_id":"source/HTML/2015/03/08/github-blog-math-expression-support/index.html","hash":"b3707a34d281f86d99634603ad6c86682022f539","modified":1643724682071},{"_id":"source/HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","hash":"c779ecf5bb840156602d4e4a9b75f854270e798a","modified":1643724682053},{"_id":"source/HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","hash":"d1514c712d734a68cc4a21a7b262b54338d6c68f","modified":1643724682052},{"_id":"source/HTML/2012/12/28/vi-basic-command/index.html","hash":"c1fd2538f7ed5779741cca84cb53c47747de1080","modified":1643724682054},{"_id":"source/HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","hash":"d76f0134014c6008e0bf5627769a3808f9c196d9","modified":1643724682054},{"_id":"source/HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","hash":"eae4508b0e08848cc07061a2edf65136c047f367","modified":1643724682050},{"_id":"source/HTML/2012/11/05/display-views-count-without-plugin/index.html","hash":"170455239edd0b92cb00f015c71c534caa6f239f","modified":1643724682049},{"_id":"source/HTML/2015/07/16/a-brief-view-of-storm/index.html","hash":"18ad2ee494e1e375be7cf151bcf560e25b380597","modified":1643724682072},{"_id":"source/HTML/2015/07/17/experiment-of-storm-grouping/index.html","hash":"ceba78b47c4b939eaa92f10b2a60d863dff64927","modified":1643724682072},{"_id":"source/HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","hash":"959eb55f92a0557fadc1cf98d8077aa616a16943","modified":1643724682053},{"_id":"source/HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","hash":"b0fc82a4eb3e6dabce657dd181d82f9b4579c767","modified":1643724682050},{"_id":"source/HTML/2013/06/21/linux-command-shell-scripts-3/index.html","hash":"cc02b67fe6b334d3cdb5a591f2c6a3ff6ddc1c2d","modified":1643724682057},{"_id":"source/HTML/2015/01/03/algorithm-series/index.html","hash":"ed92e0310f87d3c364dcd78c774400e6903920d5","modified":1643724682070},{"_id":"source/HTML/2013/03/26/some-easy-math-problems/index.html","hash":"bd52608dc88b955289ab0b83fcbb70f6a28ba3a9","modified":1643724682056},{"_id":"source/HTML/2015/01/17/recursion/index.html","hash":"dc0b244273f32538a38fcfab2c5b21a3f17bcad1","modified":1643724682071},{"_id":"source/HTML/2013/03/07/matlab-2012-libsvm/index.html","hash":"1ecbc0ff571a3ff77a0a2f173803cd0058537506","modified":1643724682055},{"_id":"source/HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","hash":"9dd9d42dddcd5cc12c3eabf6c3221957269072f8","modified":1643724682054},{"_id":"source/HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","hash":"88b9e5845a51380275b92d7f946b3d6c648d0317","modified":1643724682055},{"_id":"source/HTML/2013/05/24/linux-command-shell-script/index.html","hash":"e4f74909181a7993d7a169db1bbf5bc91f13a7dc","modified":1643724682056},{"_id":"source/HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","hash":"9b581bf973ffb69fb6ef3876abf189df2f270d24","modified":1643724682055},{"_id":"source/HTML/2013/05/25/linux-command-shell-script-2/index.html","hash":"660de3bdba29ae879081204cbeb700fe6c0dd592","modified":1643724682057},{"_id":"source/HTML/2013/09/11/algorithms-chapter-5/index.html","hash":"c564bc5386b16a1d705a34a56050844c3a994a78","modified":1643724682059},{"_id":"source/HTML/2015/07/26/redis-pqsort-c/index.html","hash":"bba306f57d736b57d049aafa8ed46c2065888575","modified":1643724682073},{"_id":"source/HTML/2013/11/23/nonviolent-communication/index.html","hash":"d406c0c3172245f6a82cf5deee6ce166eae38dca","modified":1643724682060},{"_id":"source/HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","hash":"82d36c8517042ef23e2d8332c1597e64d5fcb7a3","modified":1643724682051},{"_id":"source/HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","hash":"9257cd557d24b0bcf7e9507aade7661b45550c14","modified":1643724682058},{"_id":"source/HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","hash":"6ead7918a944d417397e5868072fdf1fab346114","modified":1643724682060},{"_id":"source/HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","hash":"c2bcf4368c7f66803db18f0bdca992b62589ce13","modified":1643724682059},{"_id":"source/HTML/2013/12/22/spiral-matrix/index.html","hash":"8e60f7d0cd3aa07bce75d7ccc2429f48f297c40f","modified":1643724682061},{"_id":"source/HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","hash":"653cc7e6134f408d2bf6ef5b4baef2ff6a9a5213","modified":1643724682058},{"_id":"source/HTML/2015/01/05/dynamic-programming/index.html","hash":"5c2b33b12f3678d29b218f7dd9156aa0f4837382","modified":1643724682070},{"_id":"source/HTML/2013/12/20/level-order-of-a-tree/index.html","hash":"285fb2b9009dc7a3e669606966f6397a15a8f359","modified":1643724682061},{"_id":"source/HTML/2013/12/25/string-to-integer-atoi/index.html","hash":"22bb768145b16cfcb5d0aa8d3f53d68620955fa9","modified":1643724682062},{"_id":"source/HTML/2014/01/04/reverse-linked-list/index.html","hash":"83f47b7831e6bac426b97c0b5e702a34b9d8fe32","modified":1643724682062},{"_id":"source/HTML/2014/05/17/srm-620-randomgraph/index.html","hash":"8d270188239744e368be7712f76434b660733e99","modified":1643724682065},{"_id":"source/HTML/2014/05/02/linux-daemon/index.html","hash":"abc0023d724844942b9e18c817a9834c672d2180","modified":1643724682063},{"_id":"source/HTML/2014/07/08/select-and-poll/index.html","hash":"7a14b906892095d57df1a2bca4ebfa373c7b8ff4","modified":1643724682067},{"_id":"source/HTML/2014/05/09/linux-dbm/index.html","hash":"55ed02163c72f206e8f6c161da26d8f95829d1c0","modified":1643724682064},{"_id":"source/HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","hash":"db9ef606df87803f8aa1f03cfac9d420b836815b","modified":1643724682065},{"_id":"source/HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","hash":"b998856c1cd03791f9871e29a3fb67f0419ee31f","modified":1643724682066},{"_id":"source/HTML/2014/12/29/show-me-the-code/index.html","hash":"33839380a5fc0bfd350b37984d773fd03bca4e08","modified":1643724682069},{"_id":"source/HTML/2014/10/01/2014-code-interview/index.html","hash":"e96908acaf4524dc8212a525462d3692c1247f44","modified":1643724682068},{"_id":"source/HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","hash":"f8cd2064c6e5e8a86fab6eac020c68047f3a1763","modified":1643724682067},{"_id":"source/HTML/2014/11/02/least-recently-used-algorithm/index.html","hash":"96ef6699657a2ba1ad3c0ca82d31f731ab76061b","modified":1643724682068},{"_id":"source/HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","hash":"8daaf24f274afa5f0327662a71b2613b1fab1783","modified":1643724682086},{"_id":"source/HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","hash":"d882f309c5f1a39ae7ca429a961f532ea8b8882a","modified":1643724682079},{"_id":"source/HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","hash":"ec31779b528ed09f506877e2bcf6adfa7383649f","modified":1643724682063},{"_id":"source/HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","hash":"2d9da928131019bf15c6744f60bc02c07b0d8c33","modified":1643724682079},{"_id":"source/HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","hash":"f4f7fec1b22bccabe1bd7a79bb6352f3e489b922","modified":1643724682088},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","hash":"7699406d15851ad17f951a1f7660d4deb92c36c5","modified":1643724682086},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","hash":"aff0e9812ba29b116f0f96926f0e33a3836f3859","modified":1643724682088},{"_id":"source/HTML/2017/04/15/从现在开始写作/index.html","hash":"87050076f545bf2bbb92e5671c77cf5acb5d7df8","modified":1643724682080},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/heap.png","hash":"0c1fef5a8029ad0b014accabb99643d379fe9728","modified":1643724682102},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","hash":"803ccaa5a84e2038a71c241c8f0c20cec8fc92b8","modified":1643724682102},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","hash":"93df46d81b75a432d96f265ea284f7ebe6b618bd","modified":1643724682101},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","hash":"619be4d8137910edeb88a0b15244bb6b98cf149d","modified":1643724682103},{"_id":"source/HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","hash":"b8933906174963a6adcf1bc2f8dcd6780028647c","modified":1643724682063},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","hash":"80a4c4addd3d2a14b5b3962b3ddf8bbff05ba94a","modified":1643724682104},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/index.html","hash":"0139042152839a6f409b95cc265f43458ef5b085","modified":1643724682102},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/index.html","hash":"d8549ae2fa5ff6b5b5158f9aacc76e7cf52f6ef9","modified":1643724682088},{"_id":"source/HTML/2017/11/09/django-configuration-in-action/index.html","hash":"8b251415b5c8b8baffe7dbb2d559f6250b404493","modified":1643724682111},{"_id":"source/HTML/2017/11/20/git-inside/index.html","hash":"6b66a98b48161b57054a387c0f08ddc62ca80482","modified":1643724682125},{"_id":"source/HTML/2017/11/20/git-inside/second_version.png","hash":"e59d7a09b90276cf2b4e5549d536e6eb4baec1e3","modified":1643724682125},{"_id":"source/HTML/2017/11/20/git-inside/third_version.png","hash":"9709165c96e8819d43a4883c6e298a3bb0880b2b","modified":1643724682126},{"_id":"source/HTML/2017/11/27/TaskScheduler/index.html","hash":"8e038fa63a5d4b94e100333bf8725d5c20707246","modified":1643724682126},{"_id":"source/HTML/2017/11/20/git-inside/project.png","hash":"5d67e33edc164fba66bad512494a9150a5f30a43","modified":1643724682125},{"_id":"source/HTML/2017/11/20/git-inside/first_version.png","hash":"54e8ea80ea1cb233d004ac59187bef668760a5a5","modified":1643724682124},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/index.html","hash":"a0af3351a38a4b7d5c56335a70b46a5f96f849a0","modified":1643724682104},{"_id":"source/HTML/2017/05/10/Python-代码实践小结/index.html","hash":"2401c3b0b3d81a6cfa7f6f32c5f3e09808e9e10f","modified":1643724682080},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","hash":"417ed4955c04a665047a8c1d4a047c2e319ffb7d","modified":1643724682085},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","hash":"1854eb10195cf3c7d8bee5af081cf6c366c0d081","modified":1643724682085},{"_id":"source/HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","hash":"ae0679f95981e1d47528d18577fceeace85a6789","modified":1643724682086},{"_id":"source/HTML/2017/12/03/tasksetmanager/index.html","hash":"6cb3f510289f2ba55cbafebf54a991d3c184b761","modified":1643724682126},{"_id":"source/HTML/2018/01/06/线程堆栈分析/dead_lock.png","hash":"1907d024bd977bd2cdcd4fd7087a570f85cd03f1","modified":1643724682133},{"_id":"source/HTML/2014/09/26/epoll-and-select/index.html","hash":"5780e77e5115af9153c6c9e853b8c16e2ba53d99","modified":1643724682068},{"_id":"source/HTML/2017/12/22/millwheel/index.html","hash":"465f898abc9391335f0077756166b6b5fdc38c02","modified":1643724682132},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","hash":"64d49ecfd0dfa44aa5e190d1a1ba95cefa05a4bf","modified":1643724682136},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","hash":"1b6baef088696107131a6d42f7e276a6e7f31b54","modified":1643724682135},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","hash":"542074b5807114f4b5826beb68959eb739fdc307","modified":1643724682136},{"_id":"source/HTML/2014/06/20/nginx-http-filter-module/index.html","hash":"c711dde8d5e3be8ec04d31067b5e7c6ec76d10ad","modified":1643724682066},{"_id":"source/HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","hash":"692e03184900637b7403d0c5971fb16623f96507","modified":1643724682052},{"_id":"source/HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","hash":"ca3ca02c20f8241a56ce39e201b0cfe3be05a05e","modified":1643724682074},{"_id":"source/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","hash":"28bd4bf7dc6e99e099e3ab4a2f7d52c496ccee2e","modified":1643724682135},{"_id":"source/HTML/2017/05/20/hello-world/index.html","hash":"145a865036933138f693a8cdfb9f33b13b335227","modified":1643724682085},{"_id":"source/HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","hash":"82d39cc63cd0c81393792642c85ac32a3d6f8fa3","modified":1643724682073},{"_id":"source/HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","hash":"39e325676157faa1b7e3ec20d904269061e91563","modified":1643724682074},{"_id":"source/HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","hash":"d767079446a5a30613f66ac1675fed2efb49ec25","modified":1643724682143},{"_id":"source/HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","hash":"e49d498bcee312ae53d3d169fb74ded91cbe40ae","modified":1643724682075},{"_id":"source/HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","hash":"bdea1f44fa837be7018ce252df06f7e2deee7d62","modified":1643724682075},{"_id":"source/HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","hash":"95986ac60590773d6f13c7c52d51b1f661f6b8c3","modified":1643724682076},{"_id":"source/HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","hash":"d434e15f34b66346cd8103aba9d995b06b1138d0","modified":1643724682077},{"_id":"source/HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","hash":"01defd7cefffce8fdb83c051a7e04b2b36aac52d","modified":1643724682076},{"_id":"source/HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","hash":"7b43c9caf380a235e3e5cdac32b2fc80ee7408da","modified":1643724682076},{"_id":"source/HTML/2016/01/20/how-to-read-a-book/index.html","hash":"81753186b230d3ff472bdace328e8d00216cb942","modified":1643724682073},{"_id":"source/HTML/2016/06/11/asking-the-right-questions/index.html","hash":"0e6c9eb110ffb864faba87efb79df9d073278ff0","modified":1643724682074},{"_id":"source/HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","hash":"c695ff41752a3b2d3fd5ffcfda5badfd1e068947","modified":1643724682078},{"_id":"source/HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","hash":"a25ebfb11f7eb8afdedbb23d518bbd680747a0c9","modified":1643724682077},{"_id":"source/HTML/2018/04/06/Flink-State/index.html","hash":"b8572bef962a1ca47403498c2ec6e006c23a5075","modified":1643724682138},{"_id":"source/HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","hash":"517f6d0ca1bc55b7055756a884089c4738eeaae5","modified":1643724682078},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","hash":"1bcc9daeeb35f814bd11bd85b928d40121dccec2","modified":1643724682144},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","hash":"9cd11ba354c60652df9db5e8ed5286b423403ea0","modified":1643724682144},{"_id":"source/HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","hash":"e7aa6ff7dc089ca8dad134e8ac2eebbdbb79ab46","modified":1643724682144},{"_id":"source/HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","hash":"703c859e1cfd53f019ea18d4d3f6231a7226b09c","modified":1643724682078},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","hash":"3f226ad5ca9b70a361a8bca470a3c004a0d1df52","modified":1643724682137},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","hash":"f7af32b296824e12591be667d703c9ed1a1a2131","modified":1643724682138},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","hash":"e472be0e0f5bd1b3277fa70e36237f5dd08125ce","modified":1643724682137},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","hash":"2d64e51ba17035c65a910b37307ddb86b24715ad","modified":1643724682137},{"_id":"source/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","hash":"acb23a5745277e2ce339293d305b344c1b8341f4","modified":1643724682137},{"_id":"source/HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","hash":"4eb8b29c028144121b843ba6f0bf4ef58ad8cab1","modified":1643724682021},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/stage.jpg","hash":"4367aad746772f13fcd5deea7e5d447227ec733f","modified":1643724682110},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","hash":"976cca190ae3cb79be8723d653b16827cd14b079","modified":1643724682084},{"_id":"source/HTML/2018/01/06/线程堆栈分析/index.html","hash":"0fd08b6223e764cd3e473a258587b21761c3c2a0","modified":1643724682133},{"_id":"source/HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","hash":"6e8f4af4b02a6ad9237f8351b6b112db17fb4ae3","modified":1643724682130},{"_id":"source/HTML/2017/12/22/millwheel/figure13_latency.jpg","hash":"e342fda0902b5f6f1078834d0e24f8edc83ba6e7","modified":1643724682129},{"_id":"source/HTML/2017/12/22/millwheel/figure16_cache.jpg","hash":"00dd49d86f87be1213470c27b2ccec755c3bc824","modified":1643724682131},{"_id":"source/HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","hash":"85afa904c53280fa8b872da8425d517c5985203c","modified":1643724682131},{"_id":"source/HTML/2018/04/06/Flink-State/state-hierarchy.png","hash":"03bafd829b1f6e57121911ad584a0e12407593ae","modified":1643724682139},{"_id":"source/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","hash":"ab3352884e349d7418c3ad3a5492526adf21eec5","modified":1643724682087},{"_id":"source/HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","hash":"cb2a883863b50fc6daa50edddfccdd4233a758d0","modified":1643724682128},{"_id":"source/HTML/2017/12/22/millwheel/figure12_transaction.jpg","hash":"70a5993db631cfaec318db3736ac22aae312b434","modified":1643724682129},{"_id":"source/HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","hash":"a2db1790b8cde62c95d1842364764743a4fe4fea","modified":1643724682090},{"_id":"source/HTML/2018/01/06/线程堆栈分析/wait_sleep.png","hash":"9a1ddf0166cd279ff294d08436c5cd0be9c89dd6","modified":1643724682134},{"_id":"source/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","hash":"f77ee44c9974e019b0682db58ddb8bc3292a6f71","modified":1643724682083},{"_id":"source/HTML/2017/10/16/spark-dagscheduler/procesure.jpg","hash":"3a9919b0782b34a3814109f78d01c2a1d90d7322","modified":1643724682108},{"_id":"source/HTML/2018/04/06/Flink-State/state-rescale.png","hash":"82c7ba867236708d14bd489ecafd20b57e39b392","modified":1643724682143},{"_id":"source/HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","hash":"8a0149f4a702fc3cd3beb85019a2668a4aa7ac1d","modified":1643724682099},{"_id":"source/HTML/2017/11/20/git-inside/file_tree.png","hash":"5febfd253e17c6678e82659af7546d77ef7b0a82","modified":1643724682122},{"_id":"public/search.xml","hash":"2d77cbb1077921f83b0beec504e40cfcb0ec988f","modified":1741440724110},{"_id":"public/2022/04/16/big-data-paper-big-picture/index.html","hash":"e454693d36aa3d70a6c17bcfb6b741cd3ccd6d1c","modified":1735806225965},{"_id":"public/archives/index.html","hash":"4bac4e128aa533b0b7854a8d0ee0b2bffb422ad6","modified":1741440724110},{"_id":"public/archives/2022/index.html","hash":"3859378943f10360652f78cecdf2bd3b13f996d0","modified":1735806330138},{"_id":"public/archives/2022/04/index.html","hash":"9d72852094c96fa2e86a2be23c5bc0324f839852","modified":1735806330138},{"_id":"public/archives/2023/index.html","hash":"070978e03daa9e97955b07fa7dd3755554b3cd03","modified":1741440724110},{"_id":"public/archives/2023/04/index.html","hash":"2d6cdbdb09bcdc1c7ec696e53f5fb417e459da2a","modified":1741440724110},{"_id":"public/index.html","hash":"93caa8a23fb8e8d7c24a53b84596534d97acbfb6","modified":1741440724110},{"_id":"public/tags/大数据-全局认识-偏见-论文-系统/index.html","hash":"538ffa2b12e3026efb8fa750341daa42379ed76f","modified":1735806330138},{"_id":"public/tags/lsm/index.html","hash":"7ecc22ab23207d709a9a290a449065ea3b5722df","modified":1741440724110},{"_id":"public/tags/lsm-tree/index.html","hash":"8553f99cc97c6374fa33427d90e10aa4c0c427a8","modified":1741440724110},{"_id":"public/tags/minimum-global-awareness/index.html","hash":"a6371a7b0f55445249d7f99b7e79e1dd85dee305","modified":1741440724110},{"_id":"public/tags/paper/index.html","hash":"7034b6f052a240933542273ea68bcd3a61c3d0ab","modified":1741440724110},{"_id":"public/2023/04/24/lsm-tree-1-2023-05-17/index.html","hash":"e3e4c5824d4869c4fc319da1ac3968c5fda270a3","modified":1741440724110},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1684381410492},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1684381410492},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1684381410492},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1684381410492},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1684381410492},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1684381410492},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1684381410492},{"_id":"public/img/github-sprite.png","hash":"4d7ee33beaaebf002ba57a172d159e46194ae481","modified":1684381410492},{"_id":"public/img/glyphicons-halflings-white.png","hash":"a25c4705320fd63c33790e666872910e702b9bf6","modified":1684381410492},{"_id":"public/img/glyphicons-halflings.png","hash":"84f613631b07d4fe22acbab50e551c0fe04bd78b","modified":1684381410492},{"_id":"public/img/grid-18px-masked.png","hash":"1379b689836f9fcccd88aa729c4034d6b36e1f3c","modified":1684381410492},{"_id":"public/img/grid-baseline-20px.png","hash":"43b8d0c9b39f5ce07ecfde036fd13f835c129238","modified":1684381410492},{"_id":"public/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1684381410492},{"_id":"public/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1684381410492},{"_id":"public/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1684381410492},{"_id":"public/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1684381410492},{"_id":"public/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1684381410492},{"_id":"public/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1684381410492},{"_id":"public/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1684381410492},{"_id":"public/HTML/2010/12/12/usaco-4-1-4-cryptcowgraphy/index.html","hash":"a0b458ff43182267b6a0bb6d85d03ffa142b8f78","modified":1684381410492},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1684381410492},{"_id":"public/HTML/2010/12/09/hello-world-1/index.html","hash":"b7f672733e1544662e607889962dc7e2ff1dece4","modified":1684381410492},{"_id":"public/HTML/2010/12/15/xampp-apache-cant-work-80-port/index.html","hash":"d00f26d86a9ed0f18217896e5ed67a877836d8ab","modified":1684381410492},{"_id":"public/HTML/2010/12/15/vmware-redhat9-cant-mount/index.html","hash":"0ebfa804c365dc70ea2e37a323fbc48e2963857d","modified":1684381410492},{"_id":"public/HTML/2010/12/14/red-hat9-command-messy-code/index.html","hash":"b8511a068efe0a825516424a6a807f518834fa50","modified":1684381410492},{"_id":"public/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1684381410492},{"_id":"public/HTML/2010/12/16/wordpress-link-order/index.html","hash":"4112ccf19e134969ef45dd6f982933f36bb8f093","modified":1684381410492},{"_id":"public/HTML/2010/12/22/linux-shell-problem/index.html","hash":"4e01c5a3d4746a7e9f8cdeeb4d8a70009c62aeec","modified":1684381410492},{"_id":"public/HTML/2010/12/30/linux-fork-test/index.html","hash":"d70a5871ad8b47faf6a41be054559ed2099699d8","modified":1684381410492},{"_id":"public/HTML/2010/12/31/linux-fork-2/index.html","hash":"9ddcf3b5ef334232628a464c054176ca39a325c5","modified":1684381410492},{"_id":"public/HTML/2010/12/14/linux-rename/index.html","hash":"9d612e51ee296c6ce0e9baaa750f72c49f99470d","modified":1684381410492},{"_id":"public/HTML/2010/12/23/linux-single-user-config/index.html","hash":"41a1c7ca16e86feba1e6bdc0cfc64e5a47668a44","modified":1684381410492},{"_id":"public/HTML/2010/12/23/linux-grub-encrypt/index.html","hash":"4f414c75abba66766dfb58c1ba0f655d25dfc668","modified":1684381410492},{"_id":"public/HTML/2010/12/30/wordpress-clickchar-plugin/index.html","hash":"f29d93933c20f5cbecbc332ed620e24481940de3","modified":1684381410492},{"_id":"public/HTML/2011/02/10/usaco-4-1-2-fence-rails/index.html","hash":"8792c869577319964af72d1e12680887faf5d65f","modified":1684381410492},{"_id":"public/HTML/2011/02/11/usaco-4-2-2-the-perfect-stall-dinic/index.html","hash":"103e1306fe629a15de363c25db4194d1c8aa0e61","modified":1684381410492},{"_id":"public/HTML/2011/02/10/networkflow-1-maximum-matching/index.html","hash":"bcdb2deb83feb707c0125e6c7430e5fab733cf25","modified":1684381410492},{"_id":"public/HTML/2011/02/10/usaco-4-2-1-drainage-ditches/index.html","hash":"c7671d8d7bb5d368a426bd4dbb9d77bff2659754","modified":1684381410492},{"_id":"public/HTML/2011/02/21/usaco-4-2-4-cowcycle/index.html","hash":"9cbf3bd17f36d430e18187c241aae6377ad0da39","modified":1684381410492},{"_id":"public/HTML/2011/02/26/usaco-4-3-1-buy-low-buy-lower/index.html","hash":"a6870b51f201fc9cc1f460a5f36bd87c3b96c13c","modified":1684381410492},{"_id":"public/HTML/2011/02/12/usaco-4-2-3-job-processing/index.html","hash":"367c0d2ebaaa6e7a348b3862e34358eba6490f68","modified":1684381410492},{"_id":"public/HTML/2011/03/06/usaco-4-3-2-the-primes/index.html","hash":"0bfc284b03ed350bb4227fe04396a5bd44a3cb1c","modified":1684381410492},{"_id":"public/HTML/2011/03/14/usaco-4-3-4-letter-game/index.html","hash":"c9c0874db9d75d18fea253724226f928cee1b29f","modified":1684381410492},{"_id":"public/HTML/2011/03/07/usaco-4-3-3-street-race/index.html","hash":"bf00799ad8ac89113d39464e8bf08dd6299f920e","modified":1684381410492},{"_id":"public/HTML/2011/02/27/networkflow-sap/index.html","hash":"72f316e2e41aaaa4fe89bb4dd98d4317d8cfae6d","modified":1684381410492},{"_id":"public/HTML/2011/03/03/networkflow-24-2-minimum-cut/index.html","hash":"42f2bcc74e794aa3757c92ca9c29ab8b9da8f5a9","modified":1684381410492},{"_id":"public/HTML/2011/03/17/poj-1704-game/index.html","hash":"fddc4e2410614c3a7078395254ace1797cf5fc3a","modified":1684381410492},{"_id":"public/HTML/2011/03/18/usaco-4-4-1-shuttle-puzzle/index.html","hash":"036e41c9402c101a928cb8b8ca958dd1bf82c8c9","modified":1684381410492},{"_id":"public/HTML/2011/03/22/c-cow-problem/index.html","hash":"9b6583d3037c8507c697d948de624b4ff1a2411f","modified":1684381410492},{"_id":"public/HTML/2011/03/22/usaco-4-4-3-frame-up/index.html","hash":"e3452f98ef670c2ed7444846a103a4c301eb60df","modified":1684381410492},{"_id":"public/HTML/2011/03/18/another-ux-strong-password/index.html","hash":"ce2d0804d9df70cce8a61d12d1306a8428dc10b4","modified":1684381410492},{"_id":"public/HTML/2011/03/15/hdu-1730-game/index.html","hash":"86d41ced94481000ffc8df4a012af2efe4e6f81a","modified":1684381410492},{"_id":"public/HTML/2011/03/19/networkflow-5-round-table/index.html","hash":"ea36968262bacdeb21939f52b2d38277f804753f","modified":1684381410492},{"_id":"public/HTML/2011/03/16/usaco-4-4-2-pollutant-control/index.html","hash":"6ca3126283b597c9d5148ad698015cc407df8996","modified":1684381410492},{"_id":"public/HTML/2011/03/28/usaco-5-1-3-musical-themes/index.html","hash":"36c1fdb176ea126f01d21a9e1c53b375136e2869","modified":1684381410492},{"_id":"public/HTML/2011/03/24/hdu-3389/index.html","hash":"1337e0432e89c41b226dde340a01e0ca699ba4e8","modified":1684381410492},{"_id":"public/HTML/2011/03/29/pointers-on-c-8-array/index.html","hash":"d349f5f698b296af66067118a0705d4544f0548b","modified":1684381410492},{"_id":"public/HTML/2011/03/29/segment-tree-my-templete/index.html","hash":"355b3a7fa94eec5e5f478280f43fa8b6e3bc91e3","modified":1684381410492},{"_id":"public/HTML/2011/03/30/pointers-on-c-10-struct-union/index.html","hash":"524c4c732ec73544fd340fae7ee53a9b6d77b239","modified":1684381410492},{"_id":"public/HTML/2011/03/19/networkflow-24-3-minimum-path-cover/index.html","hash":"2949947bc26404766155bbaeacc5ef4dbe237632","modified":1684381410492},{"_id":"public/HTML/2011/03/30/c-string-point-two-dimension/index.html","hash":"58708fcb8ffba3acaa38b9c882cbf959bb7b598d","modified":1684381410492},{"_id":"public/HTML/2011/03/30/pointers-on-c-9-string/index.html","hash":"424b0332899bd8e3c356f7cf5964b0fd6cdc1211","modified":1684381410492},{"_id":"public/HTML/2011/03/25/usaco-5-1-1-fencing-the-cows/index.html","hash":"82579e26e984e553bb0f2adb471823c6bfebb75f","modified":1684381410492},{"_id":"public/HTML/2011/05/04/permalink-change/index.html","hash":"69b1c5b855b539e77084fc25a41dd73873f4ed2a","modified":1684381410492},{"_id":"public/HTML/2011/03/31/poj-2478-eular-function/index.html","hash":"fa99d98b10fd1e5db61489036eed11294b79b29d","modified":1684381410492},{"_id":"public/HTML/2011/03/30/usaco-5-2-1-snail-trails/index.html","hash":"5ab2c014286103dd584f13a3f550faa9799b5cb6","modified":1684381410492},{"_id":"public/HTML/2011/05/02/ball-union-zoj-3350/index.html","hash":"8cbb82a3be70cc60a24e129b740a2012560b6d08","modified":1684381410492},{"_id":"public/HTML/2011/05/05/computational-geometry-hdu-2857/index.html","hash":"d1d7cbee12bc15dca86d0aa89774670aeb4a46e7","modified":1684381410492},{"_id":"public/HTML/2011/03/25/undefined-reference-to-sqrt-c/index.html","hash":"addd4a410964b3e69498495ed082ade0a430c8f6","modified":1684381410492},{"_id":"public/HTML/2011/05/12/recent-life/index.html","hash":"883c2a340ed6bb52561b4e83725370b3958c9bfa","modified":1684381410492},{"_id":"public/HTML/2011/05/08/gcj-2011-klion26/index.html","hash":"ad887c11e2a3ed3d61d47ef1b98604658ddede50","modified":1684381410492},{"_id":"public/HTML/2011/05/16/sg-function-hdu-2873/index.html","hash":"cb57dc1f27fad14dd8acb0c0b80e7bd5731f55e5","modified":1684381410492},{"_id":"public/HTML/2011/05/13/factor-num-hdu-1299/index.html","hash":"b9113a538cee1221fe008d3096fdf96ff31cbbad","modified":1684381410492},{"_id":"public/HTML/2011/07/09/fedora13-h3c/index.html","hash":"59a8264b0c5cedc1e9bf67fb63015dc489dbb82d","modified":1684381410492},{"_id":"public/HTML/2011/05/30/south-central-china-invite-competition-by-klion26/index.html","hash":"18d3f7f49503c036f21edf5dd3c0fa81ff327f9e","modified":1684381410492},{"_id":"public/HTML/2011/07/19/cg-hdu-3834/index.html","hash":"39d047e463509a230b67c0edd776580fc5db4824","modified":1684381410492},{"_id":"public/HTML/2011/05/18/number-theory-hdu-2879/index.html","hash":"ef7ec4bd95b42f7ee4ec9e7bde96e1710c972d1a","modified":1684381410492},{"_id":"public/HTML/2011/05/12/number-theory-poj-3358/index.html","hash":"7fb44db3ffb65ed728614dd429adc6c141c3c0bd","modified":1684381410492},{"_id":"public/HTML/2011/07/03/hdu-3074-bit-inver/index.html","hash":"f9f58fc223530af8f2b69f75c8f65ecfb5d8f17d","modified":1684381410492},{"_id":"public/HTML/2011/04/06/pointers-on-c-link-list/index.html","hash":"8d9bff69889c75f147862cc0a01d8cd43005803d","modified":1684381410492},{"_id":"public/HTML/2011/07/25/half-plan-cross/index.html","hash":"fe71d156e99bc3c25b2cadf11c1cf658cd63f0bd","modified":1684381410492},{"_id":"public/HTML/2011/05/23/mon-monsterkill-xiangtan-by-klion26/index.html","hash":"9fd5ba0ed21ee57515033fba964f0990d9dc4d62","modified":1684381410492},{"_id":"public/HTML/2011/04/02/pointers-on-c-11-dynamical-memory/index.html","hash":"3908576594d237c6c804c1b8752446488abd9129","modified":1684381410492},{"_id":"public/HTML/2011/04/07/usaco-5-2-2-electric-fences/index.html","hash":"ce65978cdce22f4dffa5d2c29660edec522a1376","modified":1684381410492},{"_id":"public/HTML/2011/04/09/pointers-on-c-advanced-point/index.html","hash":"2f4367843a73a7bd90426a48ef7a09094397db9e","modified":1684381410492},{"_id":"public/HTML/2011/04/10/usaco-5-2-3-wisconsin-squares/index.html","hash":"e6095a0851aa63f8819f3b3154ebe1229c2bf651","modified":1684381410492},{"_id":"public/HTML/2011/04/08/why-am-i-cancer/index.html","hash":"ce0296801768a68ba57cfb69a860e2298d61ae2b","modified":1684381410492},{"_id":"public/HTML/2011/04/10/usaco-5-3-4big-barn/index.html","hash":"8860de52be4ed4ea9b0765ab2d3bbdac5fa5362e","modified":1684381410492},{"_id":"public/HTML/2011/04/12/pointers-on-c-preprocessor/index.html","hash":"1e915680cefc0d37eb7fc9057f73f80640f3c361","modified":1684381410492},{"_id":"public/HTML/2011/04/18/poj-2480/index.html","hash":"4143146c12ad472ca5c32d1c178061f1e556d715","modified":1684381410492},{"_id":"public/HTML/2011/04/15/eular-function-2/index.html","hash":"1c77fb3ed96cc13efd55da70f9fa5898fb274c88","modified":1684381410492},{"_id":"public/HTML/2011/04/11/drab-queue-poj-2823/index.html","hash":"7f2834f5709489d837e70785b3dc8d81909a125c","modified":1684381410492},{"_id":"public/HTML/2011/04/19/eular-function-hdu-3307/index.html","hash":"85eadd67b4e3e79aa3dd45a864a293ab1fffccb4","modified":1684381410492},{"_id":"public/HTML/2011/04/20/math-education/index.html","hash":"c9ee2a68ccf1e2e110b841dcaac6df9a079fcf10","modified":1684381410492},{"_id":"public/HTML/2011/08/03/csu-summer-training-team-1/index.html","hash":"a9146de61bc23003df5ed8803d90f9c5a913c8e0","modified":1684381410492},{"_id":"public/HTML/2011/08/20/reverse-poj-3761/index.html","hash":"eaa188dc8535815d7ce9bffa1a1d0f6ab832a747","modified":1684381410492},{"_id":"public/HTML/2011/04/23/5th-csu-acm-competition/index.html","hash":"c5f5f1dfafb7a0b2c88532cdc766e4a05924723e","modified":1684381410492},{"_id":"public/HTML/2011/08/29/usaco-5-4-5-5/index.html","hash":"769be6d46db0548217c05c07e4860129033f79aa","modified":1684381410492},{"_id":"public/HTML/2011/11/27/fuzhou-a-hdu-4121/index.html","hash":"741a65ff9e2f723f6f73f15297eae911addf20e9","modified":1684381410492},{"_id":"public/HTML/2011/12/13/windows-mpi/index.html","hash":"1e17e6ae682e6bda42f3d29175152a13262ee133","modified":1684381410492},{"_id":"public/HTML/2012/03/26/replay-email/index.html","hash":"b62467076fd17850deceaf7ecbcc45b589c17f7f","modified":1684381410492},{"_id":"public/HTML/2011/06/22/xp-fedora-double-os/index.html","hash":"6201f0b3b333237c1bae23a2ddac8772eeec2fb6","modified":1684381410492},{"_id":"public/HTML/2011/12/22/fuck-csdn/index.html","hash":"85bf2255512e61dce31cc6b814a16bb1a06b9e50","modified":1684381410492},{"_id":"public/HTML/2012/03/29/github-create-project/index.html","hash":"0dfe30c40e5eb7844774431c3a2f23198c3aa98e","modified":1684381410492},{"_id":"public/HTML/2012/03/29/game-theory-prove/index.html","hash":"359138454377c3be0c1b56514c52ca5b3c92fda5","modified":1684381410492},{"_id":"public/HTML/2012/03/29/user-chrome-cross-gfw/index.html","hash":"4513b37b2fa4274bf23f3d26d416ff6e3789059e","modified":1684381410492},{"_id":"public/HTML/2012/03/29/github-port-22-error-bad-file-number/index.html","hash":"e157551e80201ba43816db752149292b8652428f","modified":1684381410492},{"_id":"public/HTML/2012/03/02/e3-80-8a-e6-ad-a4-e7-94-9f-e6-9c-aa-e5-ae-8c-e6-88-90-e3-80-8b-e4-ba-8e-e5-a8-9f/index.html","hash":"9b9fb81db0fda767d55b5e78a4f2fa6e757edd76","modified":1684381410492},{"_id":"public/HTML/2011/04/30/primitive-root-poj-1284/index.html","hash":"3677d61cb738099c66dfb5b5b236b8121b0e7166","modified":1684381410492},{"_id":"public/HTML/2012/04/19/vmware-ubuntu-fedora/index.html","hash":"8311e538ee43fc48dc8336f1e8aeea5c6331718b","modified":1684381410492},{"_id":"public/HTML/2012/10/17/structure-and-interpretation-of-computer-programs-1-2/index.html","hash":"85984e0025114e68467f589991a06c8ffaa4d51b","modified":1684381410492},{"_id":"public/HTML/2012/10/08/scheme-and-the-little-scheme/index.html","hash":"56664152df6cf144b1975769db42c2b981d15bfc","modified":1684381410492},{"_id":"public/HTML/2012/10/16/structure-and-interpretation-of-computer-programs-1-1/index.html","hash":"debdbac50dc17fd3c5b614f03bb21a00ecca4546","modified":1684381410492},{"_id":"public/HTML/2012/02/12/xp-office-2010-error-1406/index.html","hash":"309a061c7eb2f3112632e8bf7490d189503990b7","modified":1684381410492},{"_id":"public/HTML/2012/02/12/2011-2012-plan/index.html","hash":"71634c372770d753da885f58a7bf60878ab33cd1","modified":1684381410492},{"_id":"public/HTML/2012/10/23/google-adsense/index.html","hash":"7f28cdd569711be433560f1e31463818286911d4","modified":1684381410492},{"_id":"public/HTML/2012/09/27/concrete-mathematics-chapter-1-homework-exercises/index.html","hash":"4ebd787ed4427933d25ba086df66812dc3ca969e","modified":1684381410492},{"_id":"public/HTML/2012/09/21/wordpress-fatal-error/index.html","hash":"2a442a68173b4fce7e336794c2ff3838c549681c","modified":1684381410492},{"_id":"public/HTML/2012/10/23/structure-and-interpretation-of-computer-programs-1-3/index.html","hash":"76ad45bbf89459b45a081ab691182a4f0a39e2fd","modified":1684381410492},{"_id":"public/HTML/2015/02/18/everything-about-2014/index.html","hash":"2f493ee0acf299b62fb842834a40b0b20ab74501","modified":1684381410492},{"_id":"public/HTML/2012/09/26/concrete-mathmatics-chapter-1/index.html","hash":"ff019f186e2020408b4af8aac5da3ce078a2b3ed","modified":1684381410492},{"_id":"public/HTML/2012/11/06/chrome-https-connection/index.html","hash":"8817e0e1990c6271d34c574b496746e1fdaf9e96","modified":1684381410492},{"_id":"public/HTML/2012/11/21/apue-chapter-3-excise-3-2/index.html","hash":"e6dcd1b34818b59331bd5421e68807b8375e7cbc","modified":1684381410492},{"_id":"public/HTML/2012/11/08/vc-6-clistctr-add-image-and-cant-display/index.html","hash":"b0fc82a4eb3e6dabce657dd181d82f9b4579c767","modified":1684381410492},{"_id":"public/HTML/2012/11/13/fedora-13-opengl/index.html","hash":"223fe001ae8c8eaad09243692c58f39797a1d3a1","modified":1684381410492},{"_id":"public/HTML/2012/11/26/fedora-13-movie-mkv-mp4-rmvb-rm-song/index.html","hash":"82d36c8517042ef23e2d8332c1597e64d5fcb7a3","modified":1684381410492},{"_id":"public/HTML/2015/03/08/github-blog-math-expression-support/index.html","hash":"b3707a34d281f86d99634603ad6c86682022f539","modified":1684381410492},{"_id":"public/HTML/2012/12/12/fedora-13-texlive2012-install-chinese-configure/index.html","hash":"c779ecf5bb840156602d4e4a9b75f854270e798a","modified":1684381410492},{"_id":"public/HTML/2012/12/03/first-linux-module-lvm/index.html","hash":"50363b09aab678ec614add1999e312fc028eccab","modified":1684381410492},{"_id":"public/HTML/2012/12/10/implicit-declaration-of-function-class-device-create/index.html","hash":"d1514c712d734a68cc4a21a7b262b54338d6c68f","modified":1684381410492},{"_id":"public/HTML/2012/12/27/too-many-levels-of-symbolic-links/index.html","hash":"d76f0134014c6008e0bf5627769a3808f9c196d9","modified":1684381410492},{"_id":"public/HTML/2012/12/28/vi-basic-command/index.html","hash":"c1fd2538f7ed5779741cca84cb53c47747de1080","modified":1684381410492},{"_id":"public/HTML/2012/12/26/fedora-13-update-to-fedora-15/index.html","hash":"959eb55f92a0557fadc1cf98d8077aa616a16943","modified":1684381410492},{"_id":"public/HTML/2012/11/15/advanced-programming-in-the-unix-environment-apue-h/index.html","hash":"eae4508b0e08848cc07061a2edf65136c047f367","modified":1684381410492},{"_id":"public/HTML/2015/07/17/experiment-of-storm-grouping/index.html","hash":"ceba78b47c4b939eaa92f10b2a60d863dff64927","modified":1684381410492},{"_id":"public/HTML/2015/07/16/a-brief-view-of-storm/index.html","hash":"18ad2ee494e1e375be7cf151bcf560e25b380597","modified":1684381410492},{"_id":"public/HTML/2012/11/05/display-views-count-without-plugin/index.html","hash":"170455239edd0b92cb00f015c71c534caa6f239f","modified":1684381410492},{"_id":"public/HTML/2013/06/21/linux-command-shell-scripts-3/index.html","hash":"cc02b67fe6b334d3cdb5a591f2c6a3ff6ddc1c2d","modified":1684381410492},{"_id":"public/HTML/2013/03/26/some-easy-math-problems/index.html","hash":"bd52608dc88b955289ab0b83fcbb70f6a28ba3a9","modified":1684381410492},{"_id":"public/HTML/2015/01/17/recursion/index.html","hash":"dc0b244273f32538a38fcfab2c5b21a3f17bcad1","modified":1684381410492},{"_id":"public/HTML/2015/01/03/algorithm-series/index.html","hash":"ed92e0310f87d3c364dcd78c774400e6903920d5","modified":1684381410492},{"_id":"public/HTML/2013/03/07/matlab-2012-libsvm/index.html","hash":"1ecbc0ff571a3ff77a0a2f173803cd0058537506","modified":1684381410492},{"_id":"public/HTML/2013/01/02/fedora-15-install-opencv-2-4/index.html","hash":"9dd9d42dddcd5cc12c3eabf6c3221957269072f8","modified":1684381410492},{"_id":"public/HTML/2013/01/21/github-pages-jekyll-blog-free/index.html","hash":"88b9e5845a51380275b92d7f946b3d6c648d0317","modified":1684381410492},{"_id":"public/HTML/2013/01/03/fedora-15-yum-rpm-problem/index.html","hash":"9b581bf973ffb69fb6ef3876abf189df2f270d24","modified":1684381410492},{"_id":"public/HTML/2013/05/25/linux-command-shell-script-2/index.html","hash":"660de3bdba29ae879081204cbeb700fe6c0dd592","modified":1684381410492},{"_id":"public/HTML/2013/05/24/linux-command-shell-script/index.html","hash":"e4f74909181a7993d7a169db1bbf5bc91f13a7dc","modified":1684381410492},{"_id":"public/HTML/2013/11/23/nonviolent-communication/index.html","hash":"d406c0c3172245f6a82cf5deee6ce166eae38dca","modified":1684381410492},{"_id":"public/HTML/2013/09/11/algorithms-chapter-5/index.html","hash":"c564bc5386b16a1d705a34a56050844c3a994a78","modified":1684381410492},{"_id":"public/HTML/2015/07/26/redis-pqsort-c/index.html","hash":"bba306f57d736b57d049aafa8ed46c2065888575","modified":1684381410492},{"_id":"public/HTML/2013/11/28/use-vundle-to-manage-vim-plugin/index.html","hash":"6ead7918a944d417397e5868072fdf1fab346114","modified":1684381410492},{"_id":"public/HTML/2013/07/20/algorithms-chapter-3-homework-sol/index.html","hash":"9257cd557d24b0bcf7e9507aade7661b45550c14","modified":1684381410492},{"_id":"public/HTML/2013/10/16/algorithms-chapter-6-dynamic-programming/index.html","hash":"c2bcf4368c7f66803db18f0bdca992b62589ce13","modified":1684381410492},{"_id":"public/HTML/2013/12/22/spiral-matrix/index.html","hash":"8e60f7d0cd3aa07bce75d7ccc2429f48f297c40f","modified":1684381410492},{"_id":"public/HTML/2013/12/20/level-order-of-a-tree/index.html","hash":"285fb2b9009dc7a3e669606966f6397a15a8f359","modified":1684381410492},{"_id":"public/HTML/2013/12/25/string-to-integer-atoi/index.html","hash":"22bb768145b16cfcb5d0aa8d3f53d68620955fa9","modified":1684381410492},{"_id":"public/HTML/2015/01/05/dynamic-programming/index.html","hash":"5c2b33b12f3678d29b218f7dd9156aa0f4837382","modified":1684381410492},{"_id":"public/HTML/2013/07/28/algorithms-chapter-4-and-some-exercises/index.html","hash":"653cc7e6134f408d2bf6ef5b4baef2ff6a9a5213","modified":1684381410492},{"_id":"public/HTML/2014/05/17/srm-620-randomgraph/index.html","hash":"8d270188239744e368be7712f76434b660733e99","modified":1684381410492},{"_id":"public/HTML/2014/01/04/reverse-linked-list/index.html","hash":"83f47b7831e6bac426b97c0b5e702a34b9d8fe32","modified":1684381410492},{"_id":"public/HTML/2014/05/02/linux-daemon/index.html","hash":"abc0023d724844942b9e18c817a9834c672d2180","modified":1684381410492},{"_id":"public/HTML/2014/05/09/linux-dbm/index.html","hash":"55ed02163c72f206e8f6c161da26d8f95829d1c0","modified":1684381410492},{"_id":"public/HTML/2014/05/27/using-gdb-to-debug-nginx/index.html","hash":"db9ef606df87803f8aa1f03cfac9d420b836815b","modified":1684381410492},{"_id":"public/HTML/2014/07/08/select-and-poll/index.html","hash":"7a14b906892095d57df1a2bca4ebfa373c7b8ff4","modified":1684381410492},{"_id":"public/HTML/2014/06/16/nginx-advancd-data-struct-1/index.html","hash":"b998856c1cd03791f9871e29a3fb67f0419ee31f","modified":1684381410492},{"_id":"public/HTML/2014/08/25/the-hardwaresoftware-interface-csapp-lab2-bomb/index.html","hash":"f8cd2064c6e5e8a86fab6eac020c68047f3a1763","modified":1684381410492},{"_id":"public/HTML/2014/11/02/least-recently-used-algorithm/index.html","hash":"96ef6699657a2ba1ad3c0ca82d31f731ab76061b","modified":1684381410492},{"_id":"public/HTML/2014/10/01/2014-code-interview/index.html","hash":"e96908acaf4524dc8212a525462d3692c1247f44","modified":1684381410492},{"_id":"public/HTML/2014/12/29/show-me-the-code/index.html","hash":"33839380a5fc0bfd350b37984d773fd03bca4e08","modified":1684381410492},{"_id":"public/HTML/2017/01/15/spark-streaming-e5-be-80-hdfs-e8-bf-bd-e5-8a-a0-lzo-e6-96-87-e4-bb-b6/index.html","hash":"2d9da928131019bf15c6744f60bc02c07b0d8c33","modified":1684381410492},{"_id":"public/HTML/2017/06/01/如何在不重启-Spark-Streaming-作业的情况下，增加消费的-topic/index.html","hash":"8daaf24f274afa5f0327662a71b2613b1fab1783","modified":1684381410492},{"_id":"public/HTML/2017/02/16/spark-streaming-consume-kafka-at-00-second-of-every-minute/index.html","hash":"d882f309c5f1a39ae7ca429a961f532ea8b8882a","modified":1684381410492},{"_id":"public/HTML/2014/01/07/binary-tree-traversal-without-recursive/index.html","hash":"ec31779b528ed09f506877e2bcf6adfa7383649f","modified":1684381410492},{"_id":"public/HTML/2017/06/20/风险不仅仅是事件发生的概率/index.html","hash":"f4f7fec1b22bccabe1bd7a79bb6352f3e489b922","modified":1684381410492},{"_id":"public/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/index.html","hash":"aff0e9812ba29b116f0f96926f0e33a3836f3859","modified":1684381410492},{"_id":"public/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/executor.jpg","hash":"7699406d15851ad17f951a1f7660d4deb92c36c5","modified":1684381410492},{"_id":"public/HTML/2017/04/15/从现在开始写作/index.html","hash":"87050076f545bf2bbb92e5671c77cf5acb5d7df8","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/bitmap.jpeg","hash":"803ccaa5a84e2038a71c241c8f0c20cec8fc92b8","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/heap.png","hash":"0c1fef5a8029ad0b014accabb99643d379fe9728","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/index.html","hash":"0139042152839a6f409b95cc265f43458ef5b085","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/bibop.jpeg","hash":"93df46d81b75a432d96f265ea284f7ebe6b618bd","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/lazy-sweep.png","hash":"619be4d8137910edeb88a0b15244bb6b98cf149d","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/multilink.jpeg","hash":"80a4c4addd3d2a14b5b3962b3ddf8bbff05ba94a","modified":1684381410492},{"_id":"public/HTML/2014/02/28/how-to-think-like-a-computer-scientist/index.html","hash":"b8933906174963a6adcf1bc2f8dcd6780028647c","modified":1684381410492},{"_id":"public/HTML/2017/11/09/django-configuration-in-action/index.html","hash":"8b251415b5c8b8baffe7dbb2d559f6250b404493","modified":1684381410492},{"_id":"public/HTML/2017/07/14/tmux-简单使用指南/index.html","hash":"d8549ae2fa5ff6b5b5158f9aacc76e7cf52f6ef9","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/second_version.png","hash":"e59d7a09b90276cf2b4e5549d536e6eb4baec1e3","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/project.png","hash":"5d67e33edc164fba66bad512494a9150a5f30a43","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/index.html","hash":"6b66a98b48161b57054a387c0f08ddc62ca80482","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/third_version.png","hash":"9709165c96e8819d43a4883c6e298a3bb0880b2b","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/first_version.png","hash":"54e8ea80ea1cb233d004ac59187bef668760a5a5","modified":1684381410492},{"_id":"public/HTML/2017/11/27/TaskScheduler/index.html","hash":"8e038fa63a5d4b94e100333bf8725d5c20707246","modified":1684381410492},{"_id":"public/HTML/2017/10/16/spark-dagscheduler/index.html","hash":"a0af3351a38a4b7d5c56335a70b46a5f96f849a0","modified":1684381410492},{"_id":"public/HTML/2017/05/10/Python-代码实践小结/index.html","hash":"2401c3b0b3d81a6cfa7f6f32c5f3e09808e9e10f","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_sample.png","hash":"1854eb10195cf3c7d8bee5af081cf6c366c0d081","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/index.html","hash":"417ed4955c04a665047a8c1d4a047c2e319ffb7d","modified":1684381410492},{"_id":"public/HTML/2017/05/29/从源码级别分析-metric-core-的抽样算法/index.html","hash":"ae0679f95981e1d47528d18577fceeace85a6789","modified":1684381410492},{"_id":"public/HTML/2017/12/03/tasksetmanager/index.html","hash":"6cb3f510289f2ba55cbafebf54a991d3c184b761","modified":1684381410492},{"_id":"public/HTML/2018/01/06/线程堆栈分析/dead_lock.png","hash":"1907d024bd977bd2cdcd4fd7087a570f85cd03f1","modified":1684381410492},{"_id":"public/HTML/2014/09/26/epoll-and-select/index.html","hash":"5780e77e5115af9153c6c9e853b8c16e2ba53d99","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image1.png","hash":"28bd4bf7dc6e99e099e3ab4a2f7d52c496ccee2e","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image2.png","hash":"1b6baef088696107131a6d42f7e276a6e7f31b54","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/index.html","hash":"542074b5807114f4b5826beb68959eb739fdc307","modified":1684381410492},{"_id":"public/HTML/2018/02/28/通过-Java-线程堆栈进行性能瓶颈分析/image3.png","hash":"64d49ecfd0dfa44aa5e190d1a1ba95cefa05a4bf","modified":1684381410492},{"_id":"public/HTML/2018/09/09/一次-InputStream-read-使用不当导致的问题/index.html","hash":"d767079446a5a30613f66ac1675fed2efb49ec25","modified":1684381410492},{"_id":"public/HTML/2016/03/23/mit-6-824-2015-lab-1/index.html","hash":"82d39cc63cd0c81393792642c85ac32a3d6f8fa3","modified":1684381410492},{"_id":"public/HTML/2014/06/20/nginx-http-filter-module/index.html","hash":"c711dde8d5e3be8ec04d31067b5e7c6ec76d10ad","modified":1684381410492},{"_id":"public/HTML/2016/03/30/mit-6-824-lab-2-part-a/index.html","hash":"ca3ca02c20f8241a56ce39e201b0cfe3be05a05e","modified":1684381410492},{"_id":"public/HTML/2012/11/27/why-can-not-use-weixin-miliao/index.html","hash":"692e03184900637b7403d0c5971fb16623f96507","modified":1684381410492},{"_id":"public/HTML/2016/05/03/e6-88-91-e5-bf-83-e7-9b-ae-e4-b8-ad-e7-9a-84-e8-80-81-e5-b8-88/index.html","hash":"39e325676157faa1b7e3ec20d904269061e91563","modified":1684381410492},{"_id":"public/HTML/2017/05/20/hello-world/index.html","hash":"145a865036933138f693a8cdfb9f33b13b335227","modified":1684381410492},{"_id":"public/HTML/2016/07/14/spark-streaming-save-offset-to-zookeeper/index.html","hash":"e49d498bcee312ae53d3d169fb74ded91cbe40ae","modified":1684381410492},{"_id":"public/HTML/2016/07/15/spark-streaming-saving-offset-in-zookeeper-2/index.html","hash":"bdea1f44fa837be7018ce252df06f7e2deee7d62","modified":1684381410492},{"_id":"public/HTML/2016/10/26/e8-a6-81-e5-a4-9a-e5-bf-ab-e6-89-8d-e8-83-bd-e8-b7-91-e5-ae-8c-e4-b8-80-e5-9c-ba-e9-a9-ac-e6-8b-89-e6-9d-be/index.html","hash":"d434e15f34b66346cd8103aba9d995b06b1138d0","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/index.html","hash":"465f898abc9391335f0077756166b6b5fdc38c02","modified":1684381410492},{"_id":"public/HTML/2016/06/11/asking-the-right-questions/index.html","hash":"0e6c9eb110ffb864faba87efb79df9d073278ff0","modified":1684381410492},{"_id":"public/HTML/2016/10/22/storm-e7-9a-84-e5-8f-af-e9-9d-a0-e6-80-a7-e4-bf-9d-e8-af-81-e6-b5-8b-e8-af-95/index.html","hash":"01defd7cefffce8fdb83c051a7e04b2b36aac52d","modified":1684381410492},{"_id":"public/HTML/2016/08/27/spark-streaming-kafka-read-binlog-to-json/index.html","hash":"95986ac60590773d6f13c7c52d51b1f661f6b8c3","modified":1684381410492},{"_id":"public/HTML/2016/09/26/e4-b8-80-e7-a7-8d-e5-8f-af-e8-a1-8c-e7-9a-84-e8-8b-b1-e8-af-ad-e9-98-85-e8-af-bb-e5-ad-a6-e4-b9-a0-e6-96-b9-e6-b3-95/index.html","hash":"7b43c9caf380a235e3e5cdac32b2fc80ee7408da","modified":1684381410492},{"_id":"public/HTML/2016/11/01/spark-streaming-topic-partition-change-auto-adaptive/index.html","hash":"a25ebfb11f7eb8afdedbb23d518bbd680747a0c9","modified":1684381410492},{"_id":"public/HTML/2016/01/20/how-to-read-a-book/index.html","hash":"81753186b230d3ff472bdace328e8d00216cb942","modified":1684381410492},{"_id":"public/HTML/2016/11/26/spark-streaming-e5-be-80-hdfs-e5-86-99-e6-96-87-e4-bb-b6-ef-bc-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e6-96-87-e4-bb-b6-e5-90-8d/index.html","hash":"c695ff41752a3b2d3fd5ffcfda5badfd1e068947","modified":1684381410492},{"_id":"public/HTML/2016/12/02/spark-streaming-consume-kafka-message-from-specify-timestamp/index.html","hash":"517f6d0ca1bc55b7055756a884089c4738eeaae5","modified":1684381410492},{"_id":"public/HTML/2018/04/06/Flink-State/index.html","hash":"b8572bef962a1ca47403498c2ec6e006c23a5075","modified":1684381410492},{"_id":"public/HTML/2020/05/20/RocksDB-Single-CF-Result/list_state_result.html","hash":"1bcc9daeeb35f814bd11bd85b928d40121dccec2","modified":1684381410492},{"_id":"public/HTML/2020/05/20/RocksDB-Single-CF-Result/map_state_result.html","hash":"9cd11ba354c60652df9db5e8ed5286b423403ea0","modified":1684381410492},{"_id":"public/HTML/2020/05/20/RocksDB-Single-CF-Result/value_state_result.html","hash":"e7aa6ff7dc089ca8dad134e8ac2eebbdbb79ab46","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image2.png","hash":"e472be0e0f5bd1b3277fa70e36237f5dd08125ce","modified":1684381410492},{"_id":"public/HTML/2016/12/16/spark-streaming-ran-out-of-messages-before-reaching-ending-offset/index.html","hash":"703c859e1cfd53f019ea18d4d3f6231a7226b09c","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image1.png","hash":"3f226ad5ca9b70a361a8bca470a3c004a0d1df52","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image4.png","hash":"acb23a5745277e2ce339293d305b344c1b8341f4","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/index.html","hash":"f7af32b296824e12591be667d703c9ed1a1a2131","modified":1684381410492},{"_id":"public/HTML/2018/03/14/Java-内存泄漏分析和对内存设置/image3.png","hash":"2d64e51ba17035c65a910b37307ddb86b24715ad","modified":1684381410492},{"_id":"public/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1684381410492},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1684381410492},{"_id":"public/HTML/2011/03/27/usaco-5-1-2-starry-night/index.html","hash":"4eb8b29c028144121b843ba6f0bf4ef58ad8cab1","modified":1684381410492},{"_id":"public/HTML/2017/10/16/spark-dagscheduler/stage.jpg","hash":"4367aad746772f13fcd5deea7e5d447227ec733f","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver_ReceiverSupervisor.png","hash":"976cca190ae3cb79be8723d653b16827cd14b079","modified":1684381410492},{"_id":"public/HTML/2018/01/06/线程堆栈分析/index.html","hash":"0fd08b6223e764cd3e473a258587b21761c3c2a0","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure14_latency_scalability.jpg","hash":"6e8f4af4b02a6ad9237f8351b6b112db17fb4ae3","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure13_latency.jpg","hash":"e342fda0902b5f6f1078834d0e24f8edc83ba6e7","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure16_cache.jpg","hash":"00dd49d86f87be1213470c27b2ccec755c3bc824","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure15_lowwatermark.jpg","hash":"85afa904c53280fa8b872da8425d517c5985203c","modified":1684381410492},{"_id":"public/HTML/2018/04/06/Flink-State/state-hierarchy.png","hash":"03bafd829b1f6e57121911ad584a0e12407593ae","modified":1684381410492},{"_id":"public/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1684381410492},{"_id":"public/css/comment.css","hash":"acbef2bb5327b74fb68036ae238bc03514e4b4d8","modified":1684381410492},{"_id":"public/css/highlight-default.min.css","hash":"6ad10fd07f492660d5c8c8eaec6e74a94d277b4a","modified":1684381410492},{"_id":"public/css/google-fonts.css","hash":"91e629d0a0a531e920252788ed8863c26608c2b2","modified":1684381410492},{"_id":"public/css/highlight.css","hash":"98a031dd0991929ec23098db9dfde15ae662f031","modified":1684381410492},{"_id":"public/css/responsive.css","hash":"25136a75af5957a669d5c4782da8b8fa95f8fc55","modified":1684381410492},{"_id":"public/css/style.css","hash":"1c6958e4fa8ab11aca518b9a556fe2fad4976675","modified":1684381410492},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1684381410492},{"_id":"public/js/gallery.js","hash":"d19f1b1cc5b75e21ca1d643b6dae9490ead28b55","modified":1684381410492},{"_id":"public/js/spin.min.js","hash":"f91e2b661f4feb976b5e260bdc2366763ad13562","modified":1684381410492},{"_id":"public/js/search.js","hash":"6197e425941f107761d3cbfb0f06ad4a3f5f7427","modified":1684381410492},{"_id":"public/js/main.js","hash":"d78290344d95646172e488e0af2dade9740288f8","modified":1684381410492},{"_id":"public/js/timeago.min.js","hash":"d220fcc47be00effec6b5181b97cc0929d10031e","modified":1684381410492},{"_id":"public/css/themes/common.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1684381410492},{"_id":"public/css/themes/default.css","hash":"32f758d295c7037f247d300f2481b5d7d4f3b100","modified":1684381410492},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1684381410492},{"_id":"public/css/font-awesome.css","hash":"6df51eee1e75e450cb9cd71e925e6aa9ac2d6a9d","modified":1684381410492},{"_id":"public/js/bootstrap.min.js","hash":"6c264e0e0026ab5ece49350c6a8812398e696cbb","modified":1684381410492},{"_id":"public/js/comment.js","hash":"5cdafe054baa2ef66670ed46e6f862718e77bfcb","modified":1684381410492},{"_id":"public/js/highlight.min.js","hash":"02bb4cdaf43c85b7ee4ef6ccf1f3fe8e82fd3ceb","modified":1684381410492},{"_id":"public/js/marked.js","hash":"b1d4ef560ea01a5fe3a391a5933be5e7016f1d6a","modified":1684381410492},{"_id":"public/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1684381410492},{"_id":"public/css/themes/bootstrap.css","hash":"11197c2fc2925b34cc98a3f4ec67ffdd9f36a760","modified":1684381410492},{"_id":"public/css/themes/cyborg.css","hash":"4320dbfd9543f6ef1cc703d83d85c6652f9272d0","modified":1684381410492},{"_id":"public/css/themes/cosmo.css","hash":"bcb36ab2b547571fa4125e05e1074abba6bd5670","modified":1684381410492},{"_id":"public/css/themes/darkly.css","hash":"581ff4339a616fe26b4dc1b6c1d1ad7946b83de6","modified":1684381410492},{"_id":"public/css/themes/journal.css","hash":"b77cda6baedc3852c64f5664206356b3057b4781","modified":1684381410492},{"_id":"public/css/themes/cerulean.css","hash":"7fee0903cce12483ae3f37d330ef693826a5a61f","modified":1684381410492},{"_id":"public/css/themes/flatly.css","hash":"a95865761e69d0daf75660e24d9f5f316482ea55","modified":1684381410492},{"_id":"public/css/themes/paper.css","hash":"1ae57ddb500a85b8ca8e7d2897e55cb2ba4cf1bc","modified":1684381410492},{"_id":"public/css/themes/sandstone.css","hash":"5878440ffa7e1656214bafd8b7f39d736219807a","modified":1684381410492},{"_id":"public/css/themes/readable.css","hash":"af59c50f83bba69a4fef7d0ac32e309c903b4511","modified":1684381410492},{"_id":"public/css/themes/slate.css","hash":"3859265e9fcdb579f40a2ef7a5bd8dbead2d13ca","modified":1684381410492},{"_id":"public/css/themes/united.css","hash":"857151fa534842d0f8e862b2067f22905a1b3382","modified":1684381410492},{"_id":"public/css/themes/spacelab.css","hash":"fa4efbf50ca392c25e9b6395d6221696ec6573b6","modified":1684381410492},{"_id":"public/css/themes/superhero.css","hash":"cc4ce979e1def77b7c9b250d97d0baf3e0a3f845","modified":1684381410492},{"_id":"public/css/themes/simplex.css","hash":"b8165c48cf72e54c1f8ae1a550a04a64e6ce1929","modified":1684381410492},{"_id":"public/css/themes/lumen.css","hash":"5c23c4a98aec86b8483040e0ca602d3a4574f32c","modified":1684381410492},{"_id":"public/css/themes/yeti.css","hash":"7cb64c45bed521321e0a4a57e05e3d1c87721f16","modified":1684381410492},{"_id":"public/HTML/2017/06/03/Streaming-程序调用-Producer-close-hang-住问题追查复盘/hang_job.jpg","hash":"ab3352884e349d7418c3ad3a5492526adf21eec5","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure11_checkpoint.jpg","hash":"cb2a883863b50fc6daa50edddfccdd4233a758d0","modified":1684381410492},{"_id":"public/HTML/2017/12/22/millwheel/figure12_transaction.jpg","hash":"70a5993db631cfaec318db3736ac22aae312b434","modified":1684381410492},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1684381410492},{"_id":"public/HTML/2017/07/14/tmux-简单使用指南/tmux_pic.png","hash":"a2db1790b8cde62c95d1842364764743a4fe4fea","modified":1684381410492},{"_id":"public/HTML/2018/01/06/线程堆栈分析/wait_sleep.png","hash":"9a1ddf0166cd279ff294d08436c5cd0be9c89dd6","modified":1684381410492},{"_id":"public/HTML/2017/05/19/Streaming-中-Receiver-相关源码分析/Receiver.png","hash":"f77ee44c9974e019b0682db58ddb8bc3292a6f71","modified":1684381410492},{"_id":"public/HTML/2017/10/16/spark-dagscheduler/procesure.jpg","hash":"3a9919b0782b34a3814109f78d01c2a1d90d7322","modified":1684381410492},{"_id":"public/HTML/2018/04/06/Flink-State/state-rescale.png","hash":"82c7ba867236708d14bd489ecafd20b57e39b392","modified":1684381410492},{"_id":"public/HTML/2017/09/17/GC-标记-清除算法/BFS_DFS.jpeg","hash":"8a0149f4a702fc3cd3beb85019a2668a4aa7ac1d","modified":1684381410492},{"_id":"public/HTML/2017/11/20/git-inside/file_tree.png","hash":"5febfd253e17c6678e82659af7546d77ef7b0a82","modified":1684381410492},{"_id":"source/HTML/index.html","hash":"8745060c44b14b220875c178d8847406a85d5d93","modified":1684389826803},{"_id":"source/CNAME","hash":"eb7b0e24dca15e45f872f668a9aaa07f7af695f3","modified":1735806128524},{"_id":"public/CNAME","hash":"eb7b0e24dca15e45f872f668a9aaa07f7af695f3","modified":1735806225965},{"_id":"source/_drafts/big-data-paper-big-picture.md","hash":"ccbcf56371d1e5d3db66a4e80620bb5983f32569","modified":1735806049866},{"_id":"source/_posts/maotai-basic-2025-02-08.md","hash":"ed1e6bf5cbb9c4dbf053969f13a0e1fffc00c212","modified":1740213214890},{"_id":"source/_posts/.maotai-basic-2025-02-08.md.swp","hash":"4ef745ceeaa8a8bb7a674ea4b4b6b92648ea73a5","modified":1739968238244},{"_id":"public/2025/02/22/maotai-basic-2025-02-08/index.html","hash":"4cbb3f3a615ffff5f7aa818c2c5dd9713143500e","modified":1741440724110},{"_id":"public/archives/2025/index.html","hash":"880dd5365dcd5a0a14394f160e0bed24acf96d73","modified":1741440724110},{"_id":"public/archives/2025/02/index.html","hash":"c498f0c919de67e1755289e048deab7fa8504c52","modified":1741440724110},{"_id":"public/tags/stock/index.html","hash":"6b4c9f71b50ec7b7882802874a3451d165a516b8","modified":1741440724110},{"_id":"public/tags/maotai/index.html","hash":"4e6301ee32040af0cc807e9ea001e2b181032007","modified":1741440724110},{"_id":"public/tags/company-analysis/index.html","hash":"08be3e38e6e0ff485ef3af344d4b58f981808a70","modified":1741440724110},{"_id":"public/tags/wine/index.html","hash":"4556236f93011c594573ba95fc83d6f845e59863","modified":1741440724110}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"# 现在的研究\n\n主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》\n\n1 LSM 现在的现状，以及可能的优化方向，不同优化的收益\n\n# 开源实现\n都有哪些开源的实现\n在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现\n\n现在 OceanBase 中的 L0 使用 B-Treee & Hash 的结构实现。\n\nOceanBase 中有多种 compaction，且作用都不一样\n","source":"_drafts/lsm-tree-2-20230517.md","raw":"# 现在的研究\n\n主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》\n\n1 LSM 现在的现状，以及可能的优化方向，不同优化的收益\n\n# 开源实现\n都有哪些开源的实现\n在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现\n\n现在 OceanBase 中的 L0 使用 B-Treee & Hash 的结构实现。\n\nOceanBase 中有多种 compaction，且作用都不一样\n","slug":"lsm-tree-2-20230517","published":0,"date":"2024-05-06T02:51:31.126Z","updated":"2024-05-06T02:51:31.126Z","_id":"clhsl7av800002uv95nyq507i","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"现在的研究\"><a href=\"#现在的研究\" class=\"headerlink\" title=\"现在的研究\"></a>现在的研究</h1><p>主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》</p>\n<p>1 LSM 现在的现状，以及可能的优化方向，不同优化的收益</p>\n<h1 id=\"开源实现\"><a href=\"#开源实现\" class=\"headerlink\" title=\"开源实现\"></a>开源实现</h1><p>都有哪些开源的实现<br>在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现</p>\n<p>现在 OceanBase 中的 L0 使用 B-Treee &amp; Hash 的结构实现。</p>\n<p>OceanBase 中有多种 compaction，且作用都不一样</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"现在的研究\"><a href=\"#现在的研究\" class=\"headerlink\" title=\"现在的研究\"></a>现在的研究</h1><p>主要参考两个论文：LSM-Based Storage Techniques：A Survey；《Constructing and analyzing the LSM design space》</p>\n<p>1 LSM 现在的现状，以及可能的优化方向，不同优化的收益</p>\n<h1 id=\"开源实现\"><a href=\"#开源实现\" class=\"headerlink\" title=\"开源实现\"></a>开源实现</h1><p>都有哪些开源的实现<br>在 《Constructing and Analyzing the LSM compaction Design Space》的 Instruction 中有提到很多具体的实现</p>\n<p>现在 OceanBase 中的 L0 使用 B-Treee &amp; Hash 的结构实现。</p>\n<p>OceanBase 中有多种 compaction，且作用都不一样</p>\n"},{"title":"lsm-tree","date":"2023-04-24T08:53:32.000Z","toc":true,"_content":"\n> 文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。\n\nLSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。\n\n<!-- more -->\n\n# 起始\n## 1 LSM-Tree 的缘起\n\nLSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。\n\n在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。\n\n由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。\n\n## 2 LSM-Tree 的结构，以及主要流程\nLSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。\n\n两层 LSM-Tree 的结构如下所示：\n\n![tow-component-lsm](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png)\n\n上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。\n\n对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:\n\n- insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。\n- get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。\n- delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i & L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。\n- update：update 可以看作是 delete&insert 的组合\n\nLSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： \n\n![rolling-merge](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png)\n\n## 3 LSM-Tree 相关的定量分析\n上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。\n\n### 双层 LSM-Tree 的 IO 定量分析\n本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。\n\n以下对比内容基于 1995 年的硬件架构：\n\n- 1MByte 内存需要 100$\n- 1MByte 磁盘的存储需要 1$\n- 随机访问 I/O 成本是 25$\n- 顺序访问的 I/O 成本是 2.5$\n\n同时为了后面描述方便，定义变量如下:\n\n- $COST_d$ 表示磁盘存储 1MByte 所需要的成本\n- $COST_m $ 表示内存中存储 1MByte 所需要的成本\n- $ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）\n- $ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）\n\n内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。\n\n假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S * COST_d, H * COST_P $，其中 $ S*COST_d $ 表示存储所需成本，$ H * COST_P $ 则表示随机 I/O 访问的成本。\n\n当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S * COST_m + S*COST_d $ 其中， $ S*COST_M $ 表示内存的成本，$ S*COST_d $ 表示磁盘的存储所需成本。\n\n综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：\n\n$ COST-TOT = min(max(S*COST_d, H*COST_P), S*COST_m + S*COST_d) $\n\n通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义\n\n- $ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点\n- $ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点\n\n> 对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。\n\n根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。\n\n根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），-- 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。\n\n\n我们使用[3] 中的给的结论来计算 \"五分钟规则\" 的参考区间 --  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式\n\n- $ \\frac{1}{ \\tau } * COST_P = pagesize * COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）\n\n那么 $ \\tau = (\\frac{1}{pagesize} * \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize * T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 `$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO`。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。\n\n### B-Tree 和 LSM-Tree 的定量分析对比\n在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。\n\n#### B-Tree 的定量分析\n> 假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。\n\n根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示\n\n$ COST_{B-ins} = COST_P * (D_e + 1) $\n\n#### LSM 的定量分析\n\n由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。\n\n首先定义一些变量如下\n\n- $ S_e $ 表示 entry（index entry） 的大小（byte 为单位）\n- $ S_p $ 表示 page size 的大小（byte 为单位）\n- $ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）\n- $ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）\n- M 表示 rolling merge 的过程中平均有多少个 entry 插入到 __每个__ C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into __each__ single page leaf node of the C1 tree during the rolling merge)\n\n每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。\n\n根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）\n\n$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）\n\n#### 对比\n\n观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式\n\n$ COST_{LSM-ins} / COST_{B-ins} = K1 * (COST_{\\pi}/COST_{P}) * (1 / M) $  \n\n其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数\n\n上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。\n\n在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。\n\n### 多 component LSM-Tree 的分析\n上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。\n\n> 为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。\n\n上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M <= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M < K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。\n\n为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。\n\n在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。\n\n下图是一个多层 LSM-Tree 的结构\n\n![multi-component-lsm-tree](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png)\n\n对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, ... C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。\n\n接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。\n\n首先定义一些在定量分析中需要的参数与假设\n- $ S(C_i) $ -- 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）\n- $ S_i $ -- 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$\n- $ r_i = S_i / S_{i-1} $  -- 表示相邻两层中的总大小比例\n- S -- 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$\n- R -- C0 接受到的插入速度（假设速度相对稳定），单位 byte/s\n- 每层的中数据量保持稳定，且接近该层的阈值\n- 每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry\n- C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除\n\n\n假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定\n问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。\n\n证明过程如下：\n1. 由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。\n2. 如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i * R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) * R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) * ((2 * r_1 + 1) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 2) + (2*r_K + 1)). 其中 $ (2 * r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i * R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)*R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)\n6. 简化 H 后得到 $ H + (R / S_P) * ((2 * r_1 + 2) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $\n7. 需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $\n8. 也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。\n9. 通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。\n9. 在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）\n\n> 其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $。\n\n根据已知条件与上述证明可得\n- $ S = S_0 + r * S_0 + r^2 * S_0 + ... + r^K * S_0 $\n- $ H = (2R / S_p)*(K * (1 + r) - 1/ 2) -- 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小\n\n也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。\n\n\n可以使用两层 LSM-Tree 进行具体的推演\n```\n两层的 LSM-Tree 中\n- K = 1， r = S_1 / S_0\n- H  = \\frac{2R}{S_P}(K*(1+r) - \\frac{1}{2})\n- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)\n- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data\n- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)\n- C = COST_tot / (COST_d * S_1)\n\n当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) \n```\n\n其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。\n\n最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。\n\n> 个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。\n\n对于 t < 1 的情况，s = t 的成本是最小的，但是 t > 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2}（通过 C = 2*t^{1/2} 以及 C = COST_tot / (COST_d * S_1) 然后换算得到），也就是说当 t > 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）\n\n对于 t <= 1 的情况来说，C = s + 1 = t + 1 <= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)\n\n### 具体例子计算 B-Tree 和 LSM-Tree 的成本分析\n上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。\n\n\n1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本\n- R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）\n- 总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days\n\n如果使用 B-Tree 的话，成本如下\n\n- 由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 * 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 * 25$ = 50,000$\n- 然后非叶子节点需要缓存，具体的缓存成本计算如下\n\t- 假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间\n\t- 64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $\n\t- 忽略其他一些细小的成本开销\n- B-Tree 的总成本 = 50000$ + 6400$ = 56400 $\n\n两层 LSM-Tree 的话，成本如下\n- 首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$\n- 根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s\n- 假设单 page 大小 4K 的情况下，根据 H 以及 H = (2*R/S_P)*(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb\n- 20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$\n- 总成本是 9200 + 2200 = 11400$\n\n大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右\n\n2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本\n- R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）\n- 576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days\n\nB-Tree 的情况下\n- 需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 * (160000 / 16)) * 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）\n- buffer 非叶子节点的成本不变，也就是 6400$\n- 总成本 = 500,000$ + 6400$ = 506400$\n\n两层 LSM-Tree 的情况\n- 首先通过 t 的公式计算得到 t = 2*((R/S_p)/S_1)*(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 > 1\n- 通过公式得到最低成本 = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存\n- 额外增加 2M 的内存用于 merge，200$ \n- 总成本 ~ 27329$\n\n对于三层 LSM-Tree 的情况\n- C_2 需要 9.2G 存储，总成本 9.2*1000*1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700\n- 根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23\n- C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$\n- C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）\n- 另外增加 4MB 用于 rolling merge，也就是 400$\n- 总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$\n\n对比可知 三层 LSM 的成本（11700$） < 两层 LSM 的成本（27329$） < B-Tree 的成本（506400$）\n\n## 4 未来可能的优化\n- 为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）\n- 插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。\n\n\n# Ref\n[1] [The Log-Structured Merge-Tree (LSM-Tree)](https://www.cs.umb.edu/~poneil/lsmtree.pdf)  \n[2] [The Five Minute Rule](https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf)  \n[3] [Database Buffer and Disk Configuring and the Battle of the Bottlenecks]()  \n[4] [GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989]()  \n","source":"_posts/lsm-tree-1-2023-05-17.md","raw":"---\ntitle: lsm-tree\ndate: 2023-04-24 16:53:32\ntags: \n    - lsm\n    - lsm-tree\n    - minimum-global-awareness\n    - paper\ntoc: true\n---\n\n> 文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。\n\nLSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。\n\n<!-- more -->\n\n# 起始\n## 1 LSM-Tree 的缘起\n\nLSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。\n\n在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。\n\n由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。\n\n## 2 LSM-Tree 的结构，以及主要流程\nLSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。\n\n两层 LSM-Tree 的结构如下所示：\n\n![tow-component-lsm](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png)\n\n上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。\n\n对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:\n\n- insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。\n- get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。\n- delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i & L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。\n- update：update 可以看作是 delete&insert 的组合\n\nLSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： \n\n![rolling-merge](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png)\n\n## 3 LSM-Tree 相关的定量分析\n上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。\n\n### 双层 LSM-Tree 的 IO 定量分析\n本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。\n\n以下对比内容基于 1995 年的硬件架构：\n\n- 1MByte 内存需要 100$\n- 1MByte 磁盘的存储需要 1$\n- 随机访问 I/O 成本是 25$\n- 顺序访问的 I/O 成本是 2.5$\n\n同时为了后面描述方便，定义变量如下:\n\n- $COST_d$ 表示磁盘存储 1MByte 所需要的成本\n- $COST_m $ 表示内存中存储 1MByte 所需要的成本\n- $ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）\n- $ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）\n\n内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。\n\n假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S * COST_d, H * COST_P $，其中 $ S*COST_d $ 表示存储所需成本，$ H * COST_P $ 则表示随机 I/O 访问的成本。\n\n当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S * COST_m + S*COST_d $ 其中， $ S*COST_M $ 表示内存的成本，$ S*COST_d $ 表示磁盘的存储所需成本。\n\n综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：\n\n$ COST-TOT = min(max(S*COST_d, H*COST_P), S*COST_m + S*COST_d) $\n\n通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义\n\n- $ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点\n- $ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点\n\n> 对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。\n\n根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。\n\n根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），-- 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。\n\n\n我们使用[3] 中的给的结论来计算 \"五分钟规则\" 的参考区间 --  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式\n\n- $ \\frac{1}{ \\tau } * COST_P = pagesize * COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）\n\n那么 $ \\tau = (\\frac{1}{pagesize} * \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize * T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 `$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO`。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。\n\n### B-Tree 和 LSM-Tree 的定量分析对比\n在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。\n\n#### B-Tree 的定量分析\n> 假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。\n\n根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示\n\n$ COST_{B-ins} = COST_P * (D_e + 1) $\n\n#### LSM 的定量分析\n\n由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。\n\n首先定义一些变量如下\n\n- $ S_e $ 表示 entry（index entry） 的大小（byte 为单位）\n- $ S_p $ 表示 page size 的大小（byte 为单位）\n- $ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）\n- $ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）\n- M 表示 rolling merge 的过程中平均有多少个 entry 插入到 __每个__ C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into __each__ single page leaf node of the C1 tree during the rolling merge)\n\n每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。\n\n根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）\n\n$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）\n\n#### 对比\n\n观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式\n\n$ COST_{LSM-ins} / COST_{B-ins} = K1 * (COST_{\\pi}/COST_{P}) * (1 / M) $  \n\n其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数\n\n上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。\n\n在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。\n\n### 多 component LSM-Tree 的分析\n上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。\n\n> 为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。\n\n上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M <= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M < K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。\n\n为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。\n\n在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。\n\n下图是一个多层 LSM-Tree 的结构\n\n![multi-component-lsm-tree](https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png)\n\n对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, ... C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。\n\n接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。\n\n首先定义一些在定量分析中需要的参数与假设\n- $ S(C_i) $ -- 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）\n- $ S_i $ -- 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$\n- $ r_i = S_i / S_{i-1} $  -- 表示相邻两层中的总大小比例\n- S -- 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$\n- R -- C0 接受到的插入速度（假设速度相对稳定），单位 byte/s\n- 每层的中数据量保持稳定，且接近该层的阈值\n- 每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry\n- C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除\n\n\n假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定\n问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。\n\n证明过程如下：\n1. 由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。\n2. 如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i * R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) * R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) * ((2 * r_1 + 1) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 2) + (2*r_K + 1)). 其中 $ (2 * r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i * R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)*R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)\n6. 简化 H 后得到 $ H + (R / S_P) * ((2 * r_1 + 2) + (2 * r_2 + 2) + ... + (2*r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $\n7. 需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $\n8. 也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。\n9. 通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。\n9. 在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）\n\n> 其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} * C * \\prod\\limits_{1}^{K-1} r_j^{-1} $。\n\n根据已知条件与上述证明可得\n- $ S = S_0 + r * S_0 + r^2 * S_0 + ... + r^K * S_0 $\n- $ H = (2R / S_p)*(K * (1 + r) - 1/ 2) -- 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小\n\n也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。\n\n\n可以使用两层 LSM-Tree 进行具体的推演\n```\n两层的 LSM-Tree 中\n- K = 1， r = S_1 / S_0\n- H  = \\frac{2R}{S_P}(K*(1+r) - \\frac{1}{2})\n- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)\n- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data\n- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)\n- C = COST_tot / (COST_d * S_1)\n\n当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) \n```\n\n其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。\n\n最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。\n\n> 个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。\n\n对于 t < 1 的情况，s = t 的成本是最小的，但是 t > 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2}（通过 C = 2*t^{1/2} 以及 C = COST_tot / (COST_d * S_1) 然后换算得到），也就是说当 t > 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）\n\n对于 t <= 1 的情况来说，C = s + 1 = t + 1 <= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)\n\n### 具体例子计算 B-Tree 和 LSM-Tree 的成本分析\n上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。\n\n\n1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本\n- R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）\n- 总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days\n\n如果使用 B-Tree 的话，成本如下\n\n- 由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 * 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 * 25$ = 50,000$\n- 然后非叶子节点需要缓存，具体的缓存成本计算如下\n\t- 假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间\n\t- 64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $\n\t- 忽略其他一些细小的成本开销\n- B-Tree 的总成本 = 50000$ + 6400$ = 56400 $\n\n两层 LSM-Tree 的话，成本如下\n- 首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$\n- 根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s\n- 假设单 page 大小 4K 的情况下，根据 H 以及 H = (2*R/S_P)*(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb\n- 20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$\n- 总成本是 9200 + 2200 = 11400$\n\n大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右\n\n2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本\n- R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）\n- 576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days\n\nB-Tree 的情况下\n- 需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 * (160000 / 16)) * 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）\n- buffer 非叶子节点的成本不变，也就是 6400$\n- 总成本 = 500,000$ + 6400$ = 506400$\n\n两层 LSM-Tree 的情况\n- 首先通过 t 的公式计算得到 t = 2*((R/S_p)/S_1)*(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 > 1\n- 通过公式得到最低成本 = 2[(COST_m*S_1) * (2*COST_\\pi*R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存\n- 额外增加 2M 的内存用于 merge，200$ \n- 总成本 ~ 27329$\n\n对于三层 LSM-Tree 的情况\n- C_2 需要 9.2G 存储，总成本 9.2*1000*1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700\n- 根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23\n- C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$\n- C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）\n- 另外增加 4MB 用于 rolling merge，也就是 400$\n- 总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$\n\n对比可知 三层 LSM 的成本（11700$） < 两层 LSM 的成本（27329$） < B-Tree 的成本（506400$）\n\n## 4 未来可能的优化\n- 为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）\n- 插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。\n\n\n# Ref\n[1] [The Log-Structured Merge-Tree (LSM-Tree)](https://www.cs.umb.edu/~poneil/lsmtree.pdf)  \n[2] [The Five Minute Rule](https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf)  \n[3] [Database Buffer and Disk Configuring and the Battle of the Bottlenecks]()  \n[4] [GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989]()  \n","slug":"lsm-tree-1-2023-05-17","published":1,"updated":"2024-05-06T02:52:12.101Z","_id":"clhsl7avl00042uv91n8t5gkt","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。</p>\n</blockquote>\n<p>LSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。</p>\n<span id=\"more\"></span>\n<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><h2 id=\"1-LSM-Tree-的缘起\"><a href=\"#1-LSM-Tree-的缘起\" class=\"headerlink\" title=\"1 LSM-Tree 的缘起\"></a>1 LSM-Tree 的缘起</h2><p>LSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。</p>\n<p>在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。</p>\n<p>由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。</p>\n<h2 id=\"2-LSM-Tree-的结构，以及主要流程\"><a href=\"#2-LSM-Tree-的结构，以及主要流程\" class=\"headerlink\" title=\"2 LSM-Tree 的结构，以及主要流程\"></a>2 LSM-Tree 的结构，以及主要流程</h2><p>LSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。</p>\n<p>两层 LSM-Tree 的结构如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png\" alt=\"tow-component-lsm\"></p>\n<p>上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。</p>\n<p>对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:</p>\n<ul>\n<li>insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。</li>\n<li>get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。</li>\n<li>delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i &amp; L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。</li>\n<li>update：update 可以看作是 delete&amp;insert 的组合</li>\n</ul>\n<p>LSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： </p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png\" alt=\"rolling-merge\"></p>\n<h2 id=\"3-LSM-Tree-相关的定量分析\"><a href=\"#3-LSM-Tree-相关的定量分析\" class=\"headerlink\" title=\"3 LSM-Tree 相关的定量分析\"></a>3 LSM-Tree 相关的定量分析</h2><p>上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。</p>\n<h3 id=\"双层-LSM-Tree-的-IO-定量分析\"><a href=\"#双层-LSM-Tree-的-IO-定量分析\" class=\"headerlink\" title=\"双层 LSM-Tree 的 IO 定量分析\"></a>双层 LSM-Tree 的 IO 定量分析</h3><p>本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。</p>\n<p>以下对比内容基于 1995 年的硬件架构：</p>\n<ul>\n<li>1MByte 内存需要 100$</li>\n<li>1MByte 磁盘的存储需要 1$</li>\n<li>随机访问 I/O 成本是 25$</li>\n<li>顺序访问的 I/O 成本是 2.5$</li>\n</ul>\n<p>同时为了后面描述方便，定义变量如下:</p>\n<ul>\n<li>$COST_d$ 表示磁盘存储 1MByte 所需要的成本</li>\n<li>$COST_m $ 表示内存中存储 1MByte 所需要的成本</li>\n<li>$ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）</li>\n<li>$ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）</li>\n</ul>\n<p>内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。</p>\n<p>假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S <em> COST_d, H </em> COST_P $，其中 $ S<em>COST_d $ 表示存储所需成本，$ H </em> COST_P $ 则表示随机 I/O 访问的成本。</p>\n<p>当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S <em> COST_m + S</em>COST_d $ 其中， $ S<em>COST_M $ 表示内存的成本，$ S</em>COST_d $ 表示磁盘的存储所需成本。</p>\n<p>综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：</p>\n<p>$ COST-TOT = min(max(S<em>COST_d, H</em>COST_P), S<em>COST_m + S</em>COST_d) $</p>\n<p>通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线</p>\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n<p>通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义</p>\n<ul>\n<li>$ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点</li>\n<li>$ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点</li>\n</ul>\n<blockquote>\n<p>对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。</p>\n</blockquote>\n<p>根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。</p>\n<p>根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），— 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。</p>\n<p>我们使用[3] 中的给的结论来计算 “五分钟规则” 的参考区间 —  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式</p>\n<ul>\n<li>$ \\frac{1}{ \\tau } <em> COST_P = pagesize </em> COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）</li>\n</ul>\n<p>那么 $ \\tau = (\\frac{1}{pagesize} <em> \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize </em> T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 <code>$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO</code>。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。</p>\n<h3 id=\"B-Tree-和-LSM-Tree-的定量分析对比\"><a href=\"#B-Tree-和-LSM-Tree-的定量分析对比\" class=\"headerlink\" title=\"B-Tree 和 LSM-Tree 的定量分析对比\"></a>B-Tree 和 LSM-Tree 的定量分析对比</h3><p>在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。</p>\n<h4 id=\"B-Tree-的定量分析\"><a href=\"#B-Tree-的定量分析\" class=\"headerlink\" title=\"B-Tree 的定量分析\"></a>B-Tree 的定量分析</h4><blockquote>\n<p>假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。</p>\n</blockquote>\n<p>根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示</p>\n<p>$ COST_{B-ins} = COST_P * (D_e + 1) $</p>\n<h4 id=\"LSM-的定量分析\"><a href=\"#LSM-的定量分析\" class=\"headerlink\" title=\"LSM 的定量分析\"></a>LSM 的定量分析</h4><p>由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。</p>\n<p>首先定义一些变量如下</p>\n<ul>\n<li>$ S_e $ 表示 entry（index entry） 的大小（byte 为单位）</li>\n<li>$ S_p $ 表示 page size 的大小（byte 为单位）</li>\n<li>$ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）</li>\n<li>$ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）</li>\n<li>M 表示 rolling merge 的过程中平均有多少个 entry 插入到 <strong>每个</strong> C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into <strong>each</strong> single page leaf node of the C1 tree during the rolling merge)</li>\n</ul>\n<p>每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。</p>\n<p>根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）</p>\n<p>$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）</p>\n<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><p>观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式</p>\n<p>$ COST_{LSM-ins} / COST_{B-ins} = K1 <em> (COST_{\\pi}/COST_{P}) </em> (1 / M) $  </p>\n<p>其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数</p>\n<p>上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。</p>\n<p>在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。</p>\n<h3 id=\"多-component-LSM-Tree-的分析\"><a href=\"#多-component-LSM-Tree-的分析\" class=\"headerlink\" title=\"多 component LSM-Tree 的分析\"></a>多 component LSM-Tree 的分析</h3><p>上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。</p>\n<blockquote>\n<p>为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。</p>\n</blockquote>\n<p>上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M &lt;= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M &lt; K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。</p>\n<p>为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。</p>\n<p>在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。</p>\n<p>下图是一个多层 LSM-Tree 的结构</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png\" alt=\"multi-component-lsm-tree\"></p>\n<p>对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, … C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。</p>\n<p>接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。</p>\n<p>首先定义一些在定量分析中需要的参数与假设</p>\n<ul>\n<li>$ S(C_i) $ — 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）</li>\n<li>$ S_i $ — 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$</li>\n<li>$ r_i = S_i / S_{i-1} $  — 表示相邻两层中的总大小比例</li>\n<li>S — 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$</li>\n<li>R — C0 接受到的插入速度（假设速度相对稳定），单位 byte/s</li>\n<li>每层的中数据量保持稳定，且接近该层的阈值</li>\n<li>每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry</li>\n<li>C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除</li>\n</ul>\n<p>假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定<br>问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。</p>\n<p>证明过程如下：</p>\n<ol>\n<li>由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。</li>\n<li>如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i <em> R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) </em> R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) <em> ((2 </em> r_1 + 1) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 2) + (2<em>r_K + 1)). 其中 $ (2 </em> r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i <em> R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)</em>R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)</li>\n<li>简化 H 后得到 $ H + (R / S_P) <em> ((2 </em> r_1 + 2) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $</li>\n<li>需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $</li>\n<li>也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。</li>\n<li>通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。</li>\n<li>在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）</li>\n</ol>\n<blockquote>\n<p>其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $。</p>\n</blockquote>\n<p>根据已知条件与上述证明可得</p>\n<ul>\n<li>$ S = S_0 + r <em> S_0 + r^2 </em> S_0 + … + r^K * S_0 $</li>\n<li>$ H = (2R / S_p)<em>(K </em> (1 + r) - 1/ 2) — 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小</li>\n</ul>\n<p>也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。</p>\n<p>可以使用两层 LSM-Tree 进行具体的推演<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两层的 LSM-Tree 中</span><br><span class=\"line\">- K = 1， r = S_1 / S_0</span><br><span class=\"line\">- H  = \\frac&#123;2R&#125;&#123;S_P&#125;(K*(1+r) - \\frac&#123;1&#125;&#123;2&#125;)</span><br><span class=\"line\">- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)</span><br><span class=\"line\">- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data</span><br><span class=\"line\">- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)</span><br><span class=\"line\">- C = COST_tot / (COST_d * S_1)</span><br><span class=\"line\"></span><br><span class=\"line\">当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) </span><br></pre></td></tr></table></figure></p>\n<p>其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。</p>\n<p>最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。</p>\n<blockquote>\n<p>个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。</p>\n</blockquote>\n<p>对于 t &lt; 1 的情况，s = t 的成本是最小的，但是 t &gt; 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2}（通过 C = 2<em>t^{1/2} 以及 C = COST_tot / (COST_d </em> S_1) 然后换算得到），也就是说当 t &gt; 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）</p>\n<p>对于 t &lt;= 1 的情况来说，C = s + 1 = t + 1 &lt;= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)</p>\n<h3 id=\"具体例子计算-B-Tree-和-LSM-Tree-的成本分析\"><a href=\"#具体例子计算-B-Tree-和-LSM-Tree-的成本分析\" class=\"headerlink\" title=\"具体例子计算 B-Tree 和 LSM-Tree 的成本分析\"></a>具体例子计算 B-Tree 和 LSM-Tree 的成本分析</h3><p>上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。</p>\n<p>1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）</li>\n<li>总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>如果使用 B-Tree 的话，成本如下</p>\n<ul>\n<li>由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 <em> 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 </em> 25$ = 50,000$</li>\n<li>然后非叶子节点需要缓存，具体的缓存成本计算如下<ul>\n<li>假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间</li>\n<li>64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $</li>\n<li>忽略其他一些细小的成本开销</li>\n</ul>\n</li>\n<li>B-Tree 的总成本 = 50000$ + 6400$ = 56400 $</li>\n</ul>\n<p>两层 LSM-Tree 的话，成本如下</p>\n<ul>\n<li>首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$</li>\n<li>根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s</li>\n<li>假设单 page 大小 4K 的情况下，根据 H 以及 H = (2<em>R/S_P)</em>(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb</li>\n<li>20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$</li>\n<li>总成本是 9200 + 2200 = 11400$</li>\n</ul>\n<p>大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右</p>\n<p>2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）</li>\n<li>576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>B-Tree 的情况下</p>\n<ul>\n<li>需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 <em> (160000 / 16)) </em> 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）</li>\n<li>buffer 非叶子节点的成本不变，也就是 6400$</li>\n<li>总成本 = 500,000$ + 6400$ = 506400$</li>\n</ul>\n<p>两层 LSM-Tree 的情况</p>\n<ul>\n<li>首先通过 t 的公式计算得到 t = 2<em>((R/S_p)/S_1)</em>(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 &gt; 1</li>\n<li>通过公式得到最低成本 = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存</li>\n<li>额外增加 2M 的内存用于 merge，200$ </li>\n<li>总成本 ~ 27329$</li>\n</ul>\n<p>对于三层 LSM-Tree 的情况</p>\n<ul>\n<li>C_2 需要 9.2G 存储，总成本 9.2<em>1000</em>1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700</li>\n<li>根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23</li>\n<li>C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$</li>\n<li>C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）</li>\n<li>另外增加 4MB 用于 rolling merge，也就是 400$</li>\n<li>总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$</li>\n</ul>\n<p>对比可知 三层 LSM 的成本（11700$） &lt; 两层 LSM 的成本（27329$） &lt; B-Tree 的成本（506400$）</p>\n<h2 id=\"4-未来可能的优化\"><a href=\"#4-未来可能的优化\" class=\"headerlink\" title=\"4 未来可能的优化\"></a>4 未来可能的优化</h2><ul>\n<li>为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）</li>\n<li>插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。</li>\n</ul>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.cs.umb.edu/~poneil/lsmtree.pdf\">The Log-Structured Merge-Tree (LSM-Tree)</a><br>[2] <a href=\"https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf\">The Five Minute Rule</a><br>[3] <a href=\"\">Database Buffer and Disk Configuring and the Battle of the Bottlenecks</a><br>[4] <a href=\"\">GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989</a>  </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。</p>\n</blockquote>\n<p>LSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。</p>","more":"<h1 id=\"起始\"><a href=\"#起始\" class=\"headerlink\" title=\"起始\"></a>起始</h1><h2 id=\"1-LSM-Tree-的缘起\"><a href=\"#1-LSM-Tree-的缘起\" class=\"headerlink\" title=\"1 LSM-Tree 的缘起\"></a>1 LSM-Tree 的缘起</h2><p>LSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。</p>\n<p>在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。</p>\n<p>由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。</p>\n<h2 id=\"2-LSM-Tree-的结构，以及主要流程\"><a href=\"#2-LSM-Tree-的结构，以及主要流程\" class=\"headerlink\" title=\"2 LSM-Tree 的结构，以及主要流程\"></a>2 LSM-Tree 的结构，以及主要流程</h2><p>LSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。</p>\n<p>两层 LSM-Tree 的结构如下所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png\" alt=\"tow-component-lsm\"></p>\n<p>上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。</p>\n<p>对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:</p>\n<ul>\n<li>insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。</li>\n<li>get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。</li>\n<li>delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i &amp; L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。</li>\n<li>update：update 可以看作是 delete&amp;insert 的组合</li>\n</ul>\n<p>LSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： </p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png\" alt=\"rolling-merge\"></p>\n<h2 id=\"3-LSM-Tree-相关的定量分析\"><a href=\"#3-LSM-Tree-相关的定量分析\" class=\"headerlink\" title=\"3 LSM-Tree 相关的定量分析\"></a>3 LSM-Tree 相关的定量分析</h2><p>上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。</p>\n<h3 id=\"双层-LSM-Tree-的-IO-定量分析\"><a href=\"#双层-LSM-Tree-的-IO-定量分析\" class=\"headerlink\" title=\"双层 LSM-Tree 的 IO 定量分析\"></a>双层 LSM-Tree 的 IO 定量分析</h3><p>本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。</p>\n<p>以下对比内容基于 1995 年的硬件架构：</p>\n<ul>\n<li>1MByte 内存需要 100$</li>\n<li>1MByte 磁盘的存储需要 1$</li>\n<li>随机访问 I/O 成本是 25$</li>\n<li>顺序访问的 I/O 成本是 2.5$</li>\n</ul>\n<p>同时为了后面描述方便，定义变量如下:</p>\n<ul>\n<li>$COST_d$ 表示磁盘存储 1MByte 所需要的成本</li>\n<li>$COST_m $ 表示内存中存储 1MByte 所需要的成本</li>\n<li>$ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）</li>\n<li>$ COST_\\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）</li>\n</ul>\n<p>内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。</p>\n<p>假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S <em> COST_d, H </em> COST_P $，其中 $ S<em>COST_d $ 表示存储所需成本，$ H </em> COST_P $ 则表示随机 I/O 访问的成本。</p>\n<p>当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S <em> COST_m + S</em>COST_d $ 其中， $ S<em>COST_M $ 表示内存的成本，$ S</em>COST_d $ 表示磁盘的存储所需成本。</p>\n<p>综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：</p>\n<p>$ COST-TOT = min(max(S<em>COST_d, H</em>COST_P), S<em>COST_m + S</em>COST_d) $</p>\n<p>通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线</p>\n<Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> \n\n<p>通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义</p>\n<ul>\n<li>$ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点</li>\n<li>$ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点</li>\n</ul>\n<blockquote>\n<p>对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。</p>\n</blockquote>\n<p>根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。</p>\n<p>根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），— 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\\pi} / COST_P = \\frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。</p>\n<p>我们使用[3] 中的给的结论来计算 “五分钟规则” 的参考区间 —  $ \\tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式</p>\n<ul>\n<li>$ \\frac{1}{ \\tau } <em> COST_P = pagesize </em> COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）</li>\n</ul>\n<p>那么 $ \\tau = (\\frac{1}{pagesize} <em> \\frac{COST_P}{COST_m}) = \\frac{1}{pagesize </em> T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 <code>$\\tau = 1/(0.004 * 4) = 62.5 seconds/IO</code>。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。</p>\n<h3 id=\"B-Tree-和-LSM-Tree-的定量分析对比\"><a href=\"#B-Tree-和-LSM-Tree-的定量分析对比\" class=\"headerlink\" title=\"B-Tree 和 LSM-Tree 的定量分析对比\"></a>B-Tree 和 LSM-Tree 的定量分析对比</h3><p>在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。</p>\n<h4 id=\"B-Tree-的定量分析\"><a href=\"#B-Tree-的定量分析\" class=\"headerlink\" title=\"B-Tree 的定量分析\"></a>B-Tree 的定量分析</h4><blockquote>\n<p>假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。</p>\n</blockquote>\n<p>根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示</p>\n<p>$ COST_{B-ins} = COST_P * (D_e + 1) $</p>\n<h4 id=\"LSM-的定量分析\"><a href=\"#LSM-的定量分析\" class=\"headerlink\" title=\"LSM 的定量分析\"></a>LSM 的定量分析</h4><p>由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。</p>\n<p>首先定义一些变量如下</p>\n<ul>\n<li>$ S_e $ 表示 entry（index entry） 的大小（byte 为单位）</li>\n<li>$ S_p $ 表示 page size 的大小（byte 为单位）</li>\n<li>$ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）</li>\n<li>$ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）</li>\n<li>M 表示 rolling merge 的过程中平均有多少个 entry 插入到 <strong>每个</strong> C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into <strong>each</strong> single page leaf node of the C1 tree during the rolling merge)</li>\n</ul>\n<p>每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。</p>\n<p>根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）</p>\n<p>$ COST_{LSM-ins} = 2 * COST_{\\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）</p>\n<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><p>观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式</p>\n<p>$ COST_{LSM-ins} / COST_{B-ins} = K1 <em> (COST_{\\pi}/COST_{P}) </em> (1 / M) $  </p>\n<p>其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数</p>\n<p>上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。</p>\n<p>在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。</p>\n<h3 id=\"多-component-LSM-Tree-的分析\"><a href=\"#多-component-LSM-Tree-的分析\" class=\"headerlink\" title=\"多 component LSM-Tree 的分析\"></a>多 component LSM-Tree 的分析</h3><p>上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。</p>\n<blockquote>\n<p>为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。</p>\n</blockquote>\n<p>上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M &lt;= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M &lt; K1 * COST_{\\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。</p>\n<p>为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。</p>\n<p>在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。</p>\n<p>下图是一个多层 LSM-Tree 的结构</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png\" alt=\"multi-component-lsm-tree\"></p>\n<p>对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, … C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。</p>\n<p>接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。</p>\n<p>首先定义一些在定量分析中需要的参数与假设</p>\n<ul>\n<li>$ S(C_i) $ — 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）</li>\n<li>$ S_i $ — 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$</li>\n<li>$ r_i = S_i / S_{i-1} $  — 表示相邻两层中的总大小比例</li>\n<li>S — 表示所有层中叶子节点的总大小，也就是 $S = \\sigma{1}{i} S_i$</li>\n<li>R — C0 接受到的插入速度（假设速度相对稳定），单位 byte/s</li>\n<li>每层的中数据量保持稳定，且接近该层的阈值</li>\n<li>每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry</li>\n<li>C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除</li>\n</ul>\n<p>假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定<br>问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。</p>\n<p>证明过程如下：</p>\n<ol>\n<li>由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。</li>\n<li>如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i <em> R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) </em> R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) <em> ((2 </em> r_1 + 1) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 2) + (2<em>r_K + 1)). 其中 $ (2 </em> r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i <em> R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)</em>R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)</li>\n<li>简化 H 后得到 $ H + (R / S_P) <em> ((2 </em> r_1 + 2) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\\sigma{1}{K} r_i + K - \\frac{1}{2}) $</li>\n<li>需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $</li>\n<li>也就是希望在 $ \\prod\\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \\sigma{1}{K} r_i $ 的最小值。</li>\n<li>通过求偏导，得到 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \\prod\\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\\frac{1}/{K}} $ 情况下求的最小值。</li>\n<li>在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）</li>\n</ol>\n<blockquote>\n<p>其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \\frac{1}{r_j} <em> C </em> \\prod\\limits_{1}^{K-1} r_j^{-1} $。</p>\n</blockquote>\n<p>根据已知条件与上述证明可得</p>\n<ul>\n<li>$ S = S_0 + r <em> S_0 + r^2 </em> S_0 + … + r^K * S_0 $</li>\n<li>$ H = (2R / S_p)<em>(K </em> (1 + r) - 1/ 2) — 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小</li>\n</ul>\n<p>也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。</p>\n<p>可以使用两层 LSM-Tree 进行具体的推演<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两层的 LSM-Tree 中</span><br><span class=\"line\">- K = 1， r = S_1 / S_0</span><br><span class=\"line\">- H  = \\frac&#123;2R&#125;&#123;S_P&#125;(K*(1+r) - \\frac&#123;1&#125;&#123;2&#125;)</span><br><span class=\"line\">- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\\pi * H)</span><br><span class=\"line\">- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data</span><br><span class=\"line\">- t = 2 ((R/S_p) / S_1) * (COST_\\pi /COST_d) * (COST_m / COST_d)</span><br><span class=\"line\">- C = COST_tot / (COST_d * S_1)</span><br><span class=\"line\"></span><br><span class=\"line\">当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) </span><br></pre></td></tr></table></figure></p>\n<p>其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。</p>\n<p>最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。</p>\n<blockquote>\n<p>个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。</p>\n</blockquote>\n<p>对于 t &lt; 1 的情况，s = t 的成本是最小的，但是 t &gt; 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2}（通过 C = 2<em>t^{1/2} 以及 C = COST_tot / (COST_d </em> S_1) 然后换算得到），也就是说当 t &gt; 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）</p>\n<p>对于 t &lt;= 1 的情况来说，C = s + 1 = t + 1 &lt;= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)</p>\n<h3 id=\"具体例子计算-B-Tree-和-LSM-Tree-的成本分析\"><a href=\"#具体例子计算-B-Tree-和-LSM-Tree-的成本分析\" class=\"headerlink\" title=\"具体例子计算 B-Tree 和 LSM-Tree 的成本分析\"></a>具体例子计算 B-Tree 和 LSM-Tree 的成本分析</h3><p>上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。</p>\n<p>1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）</li>\n<li>总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>如果使用 B-Tree 的话，成本如下</p>\n<ul>\n<li>由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 <em> 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 </em> 25$ = 50,000$</li>\n<li>然后非叶子节点需要缓存，具体的缓存成本计算如下<ul>\n<li>假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间</li>\n<li>64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $</li>\n<li>忽略其他一些细小的成本开销</li>\n</ul>\n</li>\n<li>B-Tree 的总成本 = 50000$ + 6400$ = 56400 $</li>\n</ul>\n<p>两层 LSM-Tree 的话，成本如下</p>\n<ul>\n<li>首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$</li>\n<li>根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\\pi = 9200 / 2.5 ~ 3700 page/s</li>\n<li>假设单 page 大小 4K 的情况下，根据 H 以及 H = (2<em>R/S_P)</em>(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb</li>\n<li>20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$</li>\n<li>总成本是 9200 + 2200 = 11400$</li>\n</ul>\n<p>大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右</p>\n<p>2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本</p>\n<ul>\n<li>R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）</li>\n<li>576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days</li>\n</ul>\n<p>B-Tree 的情况下</p>\n<ul>\n<li>需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 <em> (160000 / 16)) </em> 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）</li>\n<li>buffer 非叶子节点的成本不变，也就是 6400$</li>\n<li>总成本 = 500,000$ + 6400$ = 506400$</li>\n</ul>\n<p>两层 LSM-Tree 的情况</p>\n<ul>\n<li>首先通过 t 的公式计算得到 t = 2<em>((R/S_p)/S_1)</em>(COST_\\pi/COST_d)*(COST_m/COST_d) ~ 2.2 &gt; 1</li>\n<li>通过公式得到最低成本 = 2[(COST_m<em>S_1) </em> (2<em>COST_\\pi</em>R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存</li>\n<li>额外增加 2M 的内存用于 merge，200$ </li>\n<li>总成本 ~ 27329$</li>\n</ul>\n<p>对于三层 LSM-Tree 的情况</p>\n<ul>\n<li>C_2 需要 9.2G 存储，总成本 9.2<em>1000</em>1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700</li>\n<li>根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23</li>\n<li>C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$</li>\n<li>C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）</li>\n<li>另外增加 4MB 用于 rolling merge，也就是 400$</li>\n<li>总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$</li>\n</ul>\n<p>对比可知 三层 LSM 的成本（11700$） &lt; 两层 LSM 的成本（27329$） &lt; B-Tree 的成本（506400$）</p>\n<h2 id=\"4-未来可能的优化\"><a href=\"#4-未来可能的优化\" class=\"headerlink\" title=\"4 未来可能的优化\"></a>4 未来可能的优化</h2><ul>\n<li>为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）</li>\n<li>插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。</li>\n</ul>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.cs.umb.edu/~poneil/lsmtree.pdf\">The Log-Structured Merge-Tree (LSM-Tree)</a><br>[2] <a href=\"https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf\">The Five Minute Rule</a><br>[3] <a href=\"\">Database Buffer and Disk Configuring and the Battle of the Bottlenecks</a><br>[4] <a href=\"\">GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989</a>  </p>"},{"title":"big_data_paper_big_picture","date":"2022-04-16T04:40:34.000Z","_content":"\n\n# 大数据全局认识：回到过去，展望未来\n\n\n大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。\n\n全局认识的数据集以及\n论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；\n插入一张自动分析得到的图片\n\n人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的\n\n阅读论文摘要的过程，有几个特别深刻\n\n论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择\n\n\n\n[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）","source":"_drafts/big-data-paper-big-picture.md","raw":"---\ntitle: big_data_paper_big_picture\ndate: 2022-04-16 12:40:34\ntags: 大数据, 全局认识, 偏见, 论文, 系统\n---\n\n\n# 大数据全局认识：回到过去，展望未来\n\n\n大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。\n\n全局认识的数据集以及\n论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；\n插入一张自动分析得到的图片\n\n人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的\n\n阅读论文摘要的过程，有几个特别深刻\n\n论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择\n\n\n\n[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）","slug":"big-data-paper-big-picture","published":0,"updated":"2025-01-02T08:20:49.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5f2gbxw0000y8mk40oneky3","content":"<h1 id=\"大数据全局认识：回到过去，展望未来\"><a href=\"#大数据全局认识：回到过去，展望未来\" class=\"headerlink\" title=\"大数据全局认识：回到过去，展望未来\"></a>大数据全局认识：回到过去，展望未来</h1><p>大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。</p>\n<p>全局认识的数据集以及<br>论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；<br>插入一张自动分析得到的图片</p>\n<p>人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的</p>\n<p>阅读论文摘要的过程，有几个特别深刻</p>\n<p>论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择</p>\n<p>[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"大数据全局认识：回到过去，展望未来\"><a href=\"#大数据全局认识：回到过去，展望未来\" class=\"headerlink\" title=\"大数据全局认识：回到过去，展望未来\"></a>大数据全局认识：回到过去，展望未来</h1><p>大数据发展至今，各种技术层出不穷，需求也越来越多，在整个发展的历史河流中，有一些关键的 人/论文/系统，本系列文章则希望对对这些关键知识一窥究竟，从而在面对茫茫多的技术中能够更从容的做出更好的决策。</p>\n<p>全局认识的数据集以及<br>论文主要来自于各大顶级会议[1]，系统则主要来自于开源系统，人则是论文的主要作者或者系统的核心成员。其中论文的分析主要有两种：1）使用系统分析（参考下图）；2）人肉阅读摘要进行分析；<br>插入一张自动分析得到的图片</p>\n<p>人肉阅读一定会有偏见，同时大量阅读的时候一些共性现象也会明显的显现出来。比如 XML 数据库曾经红极一时，现在基本很难看到，现在很多流行的技术也都能在之前的论文中看到对应的</p>\n<p>阅读论文摘要的过程，有几个特别深刻</p>\n<p>论文主要从 如下一些会议选择选自如下会议[1]，系统主要从开源社区选择</p>\n<p>[1] 会议列表：VLDB、SOSP、ICDE、HPCA、SIGMOD、FAST、NSDI, OSDI（可能会有变化）</p>\n"},{"title":"maotai-basic","toc":true,"_content":"\n> 本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。\n\n茅台的香型有三种典型体 -- 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]\n- 酱香体：具有酱香味，且味感优雅细腻\n- 窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。\n- 醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。\n\n<!-- more -->\n\n茅台酒有多个独特的作法：\n- 茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期\n- 茅台酒全年生产用料--高粱，要在两个月内两次投完。\n- 茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。\n- 茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。\n- 成熟了的曲药要经过 6 个月以上的贮存才能使用。\n- 茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。\n- 同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。\n- 生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。\n\n\n茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png)\n\n\n因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。\n\n陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。\n\n茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。\n\n堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。\n\n茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。\n\n制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：\n- 生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。\n- 制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。\n- 制曲温度高在 60 摄氏度以上，俗称高温大曲。\n在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。\n\n白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。\n\n茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。\n\n制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png)\n\n- 第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）\n- 由于基酒不好喝，因此需要陈酿。\n  - 基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）\n  - 盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）\n- 精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。\n\n\n茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。\n\n茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。\n\n\n系列酒\n- 2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。\n- 2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。\n- 系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935\n\n\n公司的经营模式：采购原料 -- 生产产品-- 销售产品。\n原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；\n产品生产工艺流程为：制曲 -- 制酒 -- 贮存 -- 勾兑 -- 包装\n销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。\n\n# Ref\n[1] https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\n","source":"_posts/maotai-basic-2025-02-08.md","raw":"---\ntitle: maotai-basic\ntags: \n    - stock\n    - maotai\n    - company-analysis\n    - wine\ntoc: true\n---\n\n> 本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。\n\n茅台的香型有三种典型体 -- 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]\n- 酱香体：具有酱香味，且味感优雅细腻\n- 窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。\n- 醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。\n\n<!-- more -->\n\n茅台酒有多个独特的作法：\n- 茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期\n- 茅台酒全年生产用料--高粱，要在两个月内两次投完。\n- 茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。\n- 茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。\n- 成熟了的曲药要经过 6 个月以上的贮存才能使用。\n- 茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。\n- 同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。\n- 生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。\n\n\n茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。\n\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png)\n\n\n因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。\n\n陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。\n\n茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。\n\n堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。\n\n茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。\n\n制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：\n- 生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。\n- 制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。\n- 制曲温度高在 60 摄氏度以上，俗称高温大曲。\n在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。\n\n白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。\n\n茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。\n\n制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。\n![](https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png)\n\n- 第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）\n- 由于基酒不好喝，因此需要陈酿。\n  - 基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）\n  - 盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）\n- 精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。\n\n\n茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。\n\n茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。\n\n\n系列酒\n- 2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。\n- 2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。\n- 系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935\n\n\n公司的经营模式：采购原料 -- 生产产品-- 销售产品。\n原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；\n产品生产工艺流程为：制曲 -- 制酒 -- 贮存 -- 勾兑 -- 包装\n销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。\n\n# Ref\n[1] https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\n","slug":"maotai-basic-2025-02-08","published":1,"date":"2025-02-22T08:33:34.889Z","updated":"2025-02-22T08:33:34.890Z","_id":"cm7esg5hw0000dhjo0zq785ir","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。</p>\n</blockquote>\n<p>茅台的香型有三种典型体 — 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]</p>\n<ul>\n<li>酱香体：具有酱香味，且味感优雅细腻</li>\n<li>窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。</li>\n<li>醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。</li>\n</ul>\n<span id=\"more\"></span>\n<p>茅台酒有多个独特的作法：</p>\n<ul>\n<li>茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期</li>\n<li>茅台酒全年生产用料—高粱，要在两个月内两次投完。</li>\n<li>茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。</li>\n<li>茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。</li>\n<li>成熟了的曲药要经过 6 个月以上的贮存才能使用。</li>\n<li>茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。</li>\n<li>同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。</li>\n<li>生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。</li>\n</ul>\n<p>茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png\" alt=\"\"></p>\n<p>因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。</p>\n<p>陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。</p>\n<p>茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。</p>\n<p>堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。</p>\n<p>茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。</p>\n<p>制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：</p>\n<ul>\n<li>生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。</li>\n<li>制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。</li>\n<li>制曲温度高在 60 摄氏度以上，俗称高温大曲。<br>在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。</li>\n</ul>\n<p>白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。</p>\n<p>茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。</p>\n<p>制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png\" alt=\"\"></p>\n<ul>\n<li>第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）</li>\n<li>由于基酒不好喝，因此需要陈酿。<ul>\n<li>基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）</li>\n<li>盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）</li>\n</ul>\n</li>\n<li>精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。</li>\n</ul>\n<p>茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。</p>\n<p>茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。</p>\n<p>系列酒</p>\n<ul>\n<li>2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。</li>\n<li>2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。</li>\n<li>系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935</li>\n</ul>\n<p>公司的经营模式：采购原料 — 生产产品— 销售产品。<br>原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；<br>产品生产工艺流程为：制曲 — 制酒 — 贮存 — 勾兑 — 包装<br>销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\">https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。</p>\n</blockquote>\n<p>茅台的香型有三种典型体 — 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]</p>\n<ul>\n<li>酱香体：具有酱香味，且味感优雅细腻</li>\n<li>窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。</li>\n<li>醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。</li>\n</ul>","more":"<p>茅台酒有多个独特的作法：</p>\n<ul>\n<li>茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期</li>\n<li>茅台酒全年生产用料—高粱，要在两个月内两次投完。</li>\n<li>茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。</li>\n<li>茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。</li>\n<li>成熟了的曲药要经过 6 个月以上的贮存才能使用。</li>\n<li>茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。</li>\n<li>同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。</li>\n<li>生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。</li>\n</ul>\n<p>茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。</p>\n<p><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png\" alt=\"\"></p>\n<p>因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。</p>\n<p>陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。</p>\n<p>茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。</p>\n<p>堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。</p>\n<p>茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。</p>\n<p>制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：</p>\n<ul>\n<li>生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。</li>\n<li>制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。</li>\n<li>制曲温度高在 60 摄氏度以上，俗称高温大曲。<br>在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。</li>\n</ul>\n<p>白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。</p>\n<p>茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。</p>\n<p>制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。<br><img src=\"https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png\" alt=\"\"></p>\n<ul>\n<li>第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）</li>\n<li>由于基酒不好喝，因此需要陈酿。<ul>\n<li>基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）</li>\n<li>盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）</li>\n</ul>\n</li>\n<li>精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。</li>\n</ul>\n<p>茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。</p>\n<p>茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。</p>\n<p>系列酒</p>\n<ul>\n<li>2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。</li>\n<li>2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。</li>\n<li>系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935</li>\n</ul>\n<p>公司的经营模式：采购原料 — 生产产品— 销售产品。<br>原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；<br>产品生产工艺流程为：制曲 — 制酒 — 贮存 — 勾兑 — 包装<br>销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><p>[1] <a href=\"https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html\">https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avm00052uv9dbfaeevl","_id":"clhsl7avo00092uv9cxumdwj9"},{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avn00062uv929e1e35a","_id":"clhsl7avo000a2uv9h6pr1neq"},{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avn00072uv91lgc6b65","_id":"clhsl7avo000b2uv9b4pu3tj6"},{"post_id":"clhsl7avl00042uv91n8t5gkt","tag_id":"clhsl7avn00082uv9axbxck28","_id":"clhsl7avo000c2uv97710315w"},{"post_id":"cm5f2gbxw0000y8mk40oneky3","tag_id":"clhsl7avi00022uv94hujckvg","_id":"cm5f2gby10001y8mka5v5a99i"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i10001dhjohilg3h41","_id":"cm7esg5i20005dhjo11ye5l5r"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i20002dhjohfyx6u0m","_id":"cm7esg5i20006dhjo2dhr35rb"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i20003dhjoebqtcfox","_id":"cm7esg5i30007dhjo3iwg71b2"},{"post_id":"cm7esg5hw0000dhjo0zq785ir","tag_id":"cm7esg5i20004dhjo2zzvhqdh","_id":"cm7esg5i30008dhjoa4jibqff"}],"Tag":[{"name":"大数据, 全局认识, 偏见, 论文, 系统","_id":"clhsl7avi00022uv94hujckvg"},{"name":"lsm","_id":"clhsl7avm00052uv9dbfaeevl"},{"name":"lsm-tree","_id":"clhsl7avn00062uv929e1e35a"},{"name":"minimum-global-awareness","_id":"clhsl7avn00072uv91lgc6b65"},{"name":"paper","_id":"clhsl7avn00082uv9axbxck28"},{"name":"stock","_id":"cm7esg5i10001dhjohilg3h41"},{"name":"maotai","_id":"cm7esg5i20002dhjohfyx6u0m"},{"name":"company-analysis","_id":"cm7esg5i20003dhjoebqtcfox"},{"name":"wine","_id":"cm7esg5i20004dhjo2zzvhqdh"}]}}