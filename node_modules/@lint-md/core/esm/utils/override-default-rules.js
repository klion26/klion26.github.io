import { RULE_SEVERITY } from '../types';
export const overrideDefaultRules = (defaultRules, ruleConfig) => {
    const registeredRules = {};
    for (const [_, ruleValue] of Object.entries(defaultRules)) {
        registeredRules[ruleValue.meta.name] = {
            rule: ruleValue,
            options: {},
            severity: RULE_SEVERITY.ERROR
        };
    }
    for (const [ruleName, ruleConfigValue] of Object.entries(ruleConfig)) {
        const targetRule = registeredRules[ruleName];
        if (targetRule) {
            if (typeof ruleConfigValue === 'number') {
                targetRule.severity = ruleConfigValue;
            }
            else {
                if (ruleConfigValue.length === 2) {
                    const [severity, options] = ruleConfigValue;
                    targetRule.severity = severity;
                    targetRule.options = options;
                }
                else {
                    throw new Error(`[lint-md] 无效的规则配置 ${ruleName}`);
                }
            }
        }
        else {
            if (Array.isArray(ruleConfigValue)) {
                if (ruleConfigValue.length === 3) {
                    const [config, severity, options] = ruleConfigValue;
                    registeredRules[ruleName] = {
                        severity,
                        rule: config,
                        options
                    };
                }
                else {
                    throw new Error(`[lint-md] 第三方规则 ${ruleName} 的配置长度必须为 3`);
                }
            }
        }
    }
    return registeredRules;
};
//# sourceMappingURL=override-default-rules.js.map