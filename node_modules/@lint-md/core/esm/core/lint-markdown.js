import { overrideDefaultRules } from '../utils/override-default-rules';
import { RULE_SEVERITY } from '../types';
import { runLint } from './run-lint';
import { handleFixMode } from './handle-fix-mode';
export const lintMarkdownInternal = (markdown, rules, isFixMode) => {
    if (!isFixMode) {
        const lintResult = runLint(markdown, rules);
        return {
            lintResult,
            fixedResult: null
        };
    }
    else {
        return handleFixMode(markdown, rules);
    }
};
export const lintMarkdown = (markdown, rules = {}, isFixMode = true) => {
    const internalRuleConfig = require('../rules');
    const registeredRules = overrideDefaultRules(internalRuleConfig, rules);
    const registeredRuleEntries = Object.entries(registeredRules);
    const internalRules = registeredRuleEntries
        .filter((item) => {
        return item[1].severity !== RULE_SEVERITY.OFF;
    })
        .map((options) => {
        const value = options[1];
        return {
            rule: value.rule,
            options: value.options
        };
    });
    const { fixedResult, lintResult } = lintMarkdownInternal(markdown, internalRules, isFixMode);
    const reportDataWithSeverity = lintResult?.ruleManager.getReportData().map((item) => {
        const { loc, message, name, content } = item;
        return {
            loc,
            message,
            name,
            content,
            severity: registeredRules[name].severity
        };
    });
    return {
        lintResult: reportDataWithSeverity,
        fixedResult
    };
};
//# sourceMappingURL=lint-markdown.js.map