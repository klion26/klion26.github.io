import { parseMd } from '@lint-md/parser';
import { createEmitter } from '../utils/emitter';
import { createTraverser } from '../utils/traverser';
import { createRuleManager } from '../utils/rule-manager';
export const runLint = (markdown, allRuleConfigs) => {
    const ast = parseMd(markdown);
    const nodeQueue = [];
    const ruleManager = createRuleManager(markdown);
    const traverser = createTraverser({
        onEnter: (node) => {
            nodeQueue.push({
                isEntering: true,
                node
            });
            nodeQueue.push({
                isEntering: false,
                node
            });
        }
    });
    const emitter = createEmitter();
    for (const { rule, options } of allRuleConfigs) {
        const ruleContext = ruleManager.createRuleContext({ rule, options }, {
            ast,
            markdown
        });
        const ruleSelectors = rule.create(ruleContext);
        for (const selector of Object.keys(ruleSelectors)) {
            emitter.on(selector, ruleSelectors[selector]);
        }
    }
    traverser.traverse(ast, null);
    for (const nodeQueueItem of nodeQueue) {
        const { node, isEntering } = nodeQueueItem;
        try {
            if (isEntering && node.type) {
                emitter.emit(node.type, node);
            }
        }
        catch (e) {
            console.log(e);
        }
    }
    return {
        ruleManager
    };
};
//# sourceMappingURL=run-lint.js.map