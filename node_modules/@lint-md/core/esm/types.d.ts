import type { MarkdownNode, MarkdownNodePosition } from '@lint-md/parser';
import type { createFixer } from './utils/fixer';
import type { createRuleManager } from './utils/rule-manager';
export declare type TextRange = number[];
export interface FixConfig {
    range: TextRange;
    text: string;
    data?: any;
}
export interface ReportOption {
    name: string;
    content: string;
    message: string;
    loc: {
        start: MarkdownNodePosition;
        end: MarkdownNodePosition;
    };
    fix?: (fixer: ReturnType<typeof createFixer>) => FixConfig;
}
export declare type LintMdRuleContext = ReturnType<ReturnType<typeof createRuleManager>['createRuleContext']>;
export interface LintMdRule {
    create: (context: LintMdRuleContext) => Record<string, (node: MarkdownNode) => void>;
    meta: {
        name: string;
    };
}
export interface NodeQueue {
    node: MarkdownNode;
    isEntering: boolean;
}
export interface TraverserOptions {
    onEnter?: (node: MarkdownNode, parent: MarkdownNode) => void;
    onLeave?: (node: MarkdownNode, parent: MarkdownNode) => void;
}
export interface LintMdRuleWithOptions {
    rule: LintMdRule;
    options?: Record<string, any>;
}
export declare type LintMdRuleConfig = number | [number, Record<string, any>] | [LintMdRule, number, Record<string, any>];
export declare type LintMdRulesConfig = Record<string, LintMdRuleConfig>;
export declare enum RULE_SEVERITY {
    OFF = 0,
    WARN = 1,
    ERROR = 2
}
export declare type RegisteredRules = Record<string, LintMdRuleWithOptions & {
    severity: number;
}>;
