"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_text_nodes_1 = require("../utils/get-text-nodes");
const checkAndReportTextNode = (ctx, node, pos) => {
    if (!node && node.type !== 'text') {
        return;
    }
    let finalTrimmedText = null;
    if (pos === 'between') {
        if (node.value.trim() !== node.value) {
            finalTrimmedText = node.value.trim();
        }
    }
    else if (pos === 'start-only') {
        if (node.value.trimStart() !== node.value) {
            finalTrimmedText = node.value.trimStart();
        }
    }
    else {
        if (node.value.trimEnd() !== node.value) {
            finalTrimmedText = node.value.trimEnd();
        }
    }
    if (finalTrimmedText !== null) {
        ctx.report({
            loc: node.position,
            message: '链接内容前后不能有空格，请删除链接中的前后空格',
            fix: (fixer) => {
                return fixer.replaceTextRange([
                    node.position.start.offset,
                    node.position.end.offset
                ], finalTrimmedText);
            }
        });
    }
};
const noSpaceInLink = {
    meta: {
        name: 'no-space-in-link'
    },
    create: (context) => {
        return {
            link: (node) => {
                const childTextNodeList = (0, get_text_nodes_1.getTextNodes)(node);
                if (childTextNodeList.length === 1) {
                    checkAndReportTextNode(context, childTextNodeList[0], 'between');
                }
                else if (childTextNodeList.length > 1) {
                    const startItem = childTextNodeList[0];
                    const endItem = childTextNodeList[childTextNodeList.length - 1];
                    checkAndReportTextNode(context, startItem, 'start-only');
                    checkAndReportTextNode(context, endItem, 'end-only');
                }
            }
        };
    }
};
exports.default = noSpaceInLink;
//# sourceMappingURL=no-space-in-link.js.map