"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const runReport = (ctx, node, value, type) => {
    ctx.report({
        loc: node.position,
        message: '行内代码内容，前后不能有空格，请删除行内代码中的前后空格',
        fix: (fixer) => {
            return fixer.replaceTextRange([
                node.position.start.offset,
                node.position.end.offset
            ], type === 'long' ? `\`\`\`${value}\`\`\`` : `\`${value}\``);
        }
    });
};
const noSpaceInInlineCode = {
    meta: {
        name: 'no-space-in-inline-code'
    },
    create: (context) => {
        return {
            inlineCode: (node) => {
                const { position } = node;
                const result = context.markdown.slice(position.start.offset, position.end.offset);
                if (result.startsWith('```')) {
                    const internalContent = result.slice(3, -3);
                    if (internalContent.trim() !== internalContent) {
                        runReport(context, node, internalContent.trim(), 'long');
                    }
                }
                else {
                    const internalContent = result.slice(1, -1);
                    if (internalContent.trim() !== internalContent) {
                        runReport(context, node, internalContent.trim(), 'short');
                    }
                }
            }
        };
    }
};
exports.default = noSpaceInInlineCode;
//# sourceMappingURL=no-space-in-inline-code.js.map