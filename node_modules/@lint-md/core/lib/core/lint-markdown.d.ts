import type { LintMdRuleWithOptions, LintMdRulesConfig } from '../types';
export declare const lintMarkdownInternal: (markdown: string, rules: LintMdRuleWithOptions[], isFixMode: boolean) => {
    lintResult: {
        ruleManager: {
            getReportData: () => import("../types").ReportOption[];
            getAllFixes: () => {
                targetRule: string;
                range: import("../types").TextRange;
                text: string;
                data?: any;
            }[];
            createRuleContext: (ruleConfig: LintMdRuleWithOptions, data?: any) => any;
        };
    };
    fixedResult: {
        result: string;
        notAppliedFixes: import("../types").FixConfig[];
    };
} | {
    lintResult: {
        ruleManager: {
            getReportData: () => import("../types").ReportOption[];
            getAllFixes: () => {
                targetRule: string;
                range: import("../types").TextRange;
                text: string;
                data?: any;
            }[];
            createRuleContext: (ruleConfig: LintMdRuleWithOptions, data?: any) => any;
        };
    };
    fixedResult: null;
};
export declare const lintMarkdown: (markdown: string, rules?: LintMdRulesConfig, isFixMode?: boolean) => {
    lintResult: {
        loc: {
            start: import("@lint-md/parser").MarkdownNodePosition;
            end: import("@lint-md/parser").MarkdownNodePosition;
        };
        message: string;
        name: string;
        content: string;
        severity: number;
    }[];
    fixedResult: {
        result: string;
        notAppliedFixes: import("../types").FixConfig[];
    } | null;
};
