"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lintMarkdown = exports.lintMarkdownInternal = void 0;
const override_default_rules_1 = require("../utils/override-default-rules");
const types_1 = require("../types");
const run_lint_1 = require("./run-lint");
const handle_fix_mode_1 = require("./handle-fix-mode");
const lintMarkdownInternal = (markdown, rules, isFixMode) => {
    if (!isFixMode) {
        const lintResult = (0, run_lint_1.runLint)(markdown, rules);
        return {
            lintResult,
            fixedResult: null
        };
    }
    else {
        return (0, handle_fix_mode_1.handleFixMode)(markdown, rules);
    }
};
exports.lintMarkdownInternal = lintMarkdownInternal;
const lintMarkdown = (markdown, rules = {}, isFixMode = true) => {
    const internalRuleConfig = require('../rules');
    const registeredRules = (0, override_default_rules_1.overrideDefaultRules)(internalRuleConfig, rules);
    const registeredRuleEntries = Object.entries(registeredRules);
    const internalRules = registeredRuleEntries
        .filter((item) => {
        return item[1].severity !== types_1.RULE_SEVERITY.OFF;
    })
        .map((options) => {
        const value = options[1];
        return {
            rule: value.rule,
            options: value.options
        };
    });
    const { fixedResult, lintResult } = (0, exports.lintMarkdownInternal)(markdown, internalRules, isFixMode);
    const reportDataWithSeverity = lintResult?.ruleManager.getReportData().map((item) => {
        const { loc, message, name, content } = item;
        return {
            loc,
            message,
            name,
            content,
            severity: registeredRules[name].severity
        };
    });
    return {
        lintResult: reportDataWithSeverity,
        fixedResult
    };
};
exports.lintMarkdown = lintMarkdown;
//# sourceMappingURL=lint-markdown.js.map