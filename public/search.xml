<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分红以及投资复利-以茅台为例</title>
      <link href="/2025/04/09/invest-compond/"/>
      <url>/2025/04/09/invest-compond/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文尝试对上市公司分红以及投资复利进行一些分析，希望能够更好的了解投资的选择标准，以及操作标准。</p></blockquote><p>在 <a href="https://mp.weixin.qq.com/s/2KbUDJNn7-DLrqGPRHT0iA">赚钱机器茅台</a> 一文中，我们有提到分红相关的事情，这里我们仍旧以茅台为例分析下分红相关的内容。</p><span id="more"></span><h1 id="股本位"><a href="#股本位" class="headerlink" title="股本位"></a>股本位</h1><p>现在的生活中大家会以拥有 <em>本币本位/纸币本位</em> 的视角，也就是所有的价值/价格体系等都会锚定到本国法币的价值，同时也有一个 <em>金本位</em>，表示所有的价值都体现在包含多少黄金。</p><p>那么对于股市投资是不是可以有一种“股本位”的视角，那么所有的目的都是以 <em>股数</em> 作为衡量，我们的目的也将变成获取更多的 <em>股数</em>。</p><h1 id="分红以及投资收益"><a href="#分红以及投资收益" class="headerlink" title="分红以及投资收益"></a>分红以及投资收益</h1><p>接下来我们以茅台上市后股东收益来阐述分红，复利，收益等。</p><h2 id="分析情况说明"><a href="#分析情况说明" class="headerlink" title="分析情况说明"></a>分析情况说明</h2><p>首先描述下本文会使用到的一些情况</p><ol><li>本文假设股票可以零散买入，也就是没有最低股数要求，甚至可以买入小于 1 股（比如 0.01 股）</li><li>对于茅台整个上市历史的收益，起点为上市是购入 1 元茅台股（为了计算方便，不影响整体收益比例）</li><li>对于比较中最近十年的收益情况，起点为 2015 年选择一个市值高点，以市价买入 1 元茅台股票</li></ol><p>原始数据整理如下，数据来源[1]，股数计算公式参考图片中左上角的公式，市值是 股数 * 股价。</p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121251913.png" alt=""></p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121253102.png" alt=""></p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202504121254827.png" alt=""></p><h2 id="收益和股数"><a href="#收益和股数" class="headerlink" title="收益和股数"></a>收益和股数</h2><p>通过整体茅台的数据，绘制如下几张图，下图中展示了不同纬度情况下茅台股票的收益（总市值和总股数），其中</p><ul><li>ValueFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总市值</li><li>CountFromInit 表示从上市开始投入 1 元，然后分股继续持有，分红再买入后的总股数</li><li>ValueFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总市值</li><li>CountFrom2015 表示从 20150526 开始投入 1 元，然后分股继续持有，分红再买入后的总股数</li></ul><blockquote><p>选择 20150526 是因为当天市值是当年一个高值<br>下图中的每条线可以点击标题控制是否显示</p></blockquote><div id="echarts7404" style="width: 85%;height:400px;margin: 0 auto"></div><script src="https://unpkg.com/echarts@5.6.0/dist/echarts.min.js" ></script><script >  if (window.eChartecharts7404ResizeHandler) {    window.removeEventListener("resize", eChartecharts7404ResizeHandler);  }  var optionecharts7404 = {  legend: {    data: ['ValueFromInit', 'CountFromInit', 'ValueFrom2015', 'CountFrom2015']  },  tooltip: {    trigger: 'axis'  },  xAxis: {    type: 'category',    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']  },  yAxis: [    {      name: 'total-value',      type: 'value'    },    {      name: 'stock-count',      type: 'value'    }  ],  series: [    {      name: 'ValueFromInit',      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 24.64, 44.26, 56.68, 89.67, 157.71, 203.64, 305.67, 442.03, 433.51, 376.70, 376.17, 371.87, 344.64, 356.74],      type: 'line',      yAxisIndex: 0    },    {      name: 'ValueFrom2015',      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],      type: 'line',      yAxisIndex: 0    },    {      name: 'CountFromInit',      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.1732, 0.1938, 0.1980, 0.2010, 0.2039, 0.2069, 0.2093, 0.2112, 0.2135, 0.2162, 0.2190, 0.2220, 0.2265, 0.23],      type: 'line',      yAxisIndex: 1    },    {      name: 'CountFrom2015',      data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],      type: 'line',      yAxisIndex: 1    }  ]};  if (window.echarts !== undefined) {    var eChartecharts7404 = echarts.init(document.getElementById('echarts7404'));    eChartecharts7404.setOption(optionecharts7404);    var eChartecharts7404ResizeHandler = function() {      eChartecharts7404.resize();    };    window.addEventListener("resize", eChartecharts7404ResizeHandler);  }</script><p>下面的图中，20140625 之前的表示从上市开始投入 1 元后，总市值和总股数的情况，20140625 以及以后的情况则表示在 20140625 买入 1 元后的总市值和总股数情况，其中</p><ul><li>Value 表示对应时间的总市值</li><li>Count 表示对应时间的总股数</li></ul><blockquote><p>下图中的每条线可以点击标题控制是否显示</p></blockquote><div id="echarts9375" style="width: 85%;height:400px;margin: 0 auto"></div><script src="https://unpkg.com/echarts@5.6.0/dist/echarts.min.js" ></script><script >  if (window.eChartecharts9375ResizeHandler) {    window.removeEventListener("resize", eChartecharts9375ResizeHandler);  }  var optionecharts9375 = {  legend: {    data: ['Value', 'Count']  },  tooltip: {    trigger: 'axis'  },  xAxis: {    type: 'category',    data: ['20020725', '20030714', '20040701', '20050804', '20060519', '20060524', '20070713', '20080613', '20090701', '20100705', '20110701', '20120705', '20130607', '20140625', '20150717', '20160701', '20170707', '20180615', '20190628', '20200624', '20210625', '20220628', '20221226', '20230629', '20231219', '20240618', '20241219']  },  yAxis: [    {      name: 'total-value',      type: 'value'    },    {      name: 'stock-count',      type: 'value'    }  ],  series: [    {      name: 'Value',      data: [1.15, 0.93, 1.38, 3.47, 4.97, 5.05, 14.69, 19.29, 18.94, 16.52, 27.98, 37.33, 30.06, 1, 0.88, 1.12, 1.78, 3.13, 4.05, 6.08, 8.79, 8.62, 7.49, 7.48, 7.40, 6.86, 7.10],      type: 'line',      yAxisIndex: 0    },    {      name: 'Count',      data: [0.0356, 0.0394, 0.0517, 0.0626, 0.1257, 0.1275, 0.1283, 0.1290, 0.1301, 0.1313, 0.1460, 0.1483, 0.1532, 0.00344, 0.00385, 0.00394, 0.0040, 0.00405, 0.00411, 0.00416, 0.0042, 0.00425, 0.0043, 0.00436, 0.00441, 0.0045, 0.00457],      type: 'line',      yAxisIndex: 1    },  ]};  if (window.echarts !== undefined) {    var eChartecharts9375 = echarts.init(document.getElementById('echarts9375'));    eChartecharts9375.setOption(optionecharts9375);    var eChartecharts9375ResizeHandler = function() {      eChartecharts9375.resize();    };    window.addEventListener("resize", eChartecharts9375ResizeHandler);  }</script><h2 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h2><p>上面的信息可以分为如下几组的对比</p><ul><li>不同阶段十年的对比：2001 年到 2010 年这十年，与 2015 年到 2024 年这十年对比</li><li>十年和二十多年的对比：2001 年到 2012 年这 11 年，与 2001 年到 2014 年这 23 年对比</li><li>二十多年前后段和后半段的对比：2001 年到 2012 年，与 2012 年到 2024 年进行对比</li><li>对比分红再买入和分红不再买入的情况</li></ul><p>其中第一组可以发现 2001 年到 2010 年这十年总市值变为 <strong>16.56</strong>, 总股数是 <strong>0.1313</strong> 。也就是总市值变成了原来的 <strong>16</strong> 倍，股数变为原来的 <strong>3.6</strong> 倍左右；2015 年到 2024 年这十年总价值变成了 <strong>7.1</strong>，总股数变成了 <strong>0.00457</strong>, 总价值变成了原来的 <strong>7</strong> 倍左右，股数变成了原来的 <strong>1.3</strong> 倍。通过对比可以看出</p><ol><li>后面这十年总收益比前面十年少</li><li>后面这十年总股数增加的不如前十年多</li><li>总股数前十年比后十年多更多。这里可能有多个原因：1）前十年有过送股；2）前十年股价更低，同样分红的钱能买更多的股数</li></ol><p>第二组可以看出来，总共 24 年总市值变为 <strong>356.74</strong>，总股数变为 <strong>0.23</strong>，总市值是原来的 <strong>356</strong> 倍，总股数是原来的 <strong>6.4</strong> 倍；前 11 年总市值变为 <strong>37.33</strong>，总股数变为 <strong>0.1483</strong>, 总市值变为原来的 <strong>37</strong> 倍，总股数变为原来的 <strong>4</strong> 倍。这里可以看出来，时间长一倍，总市值不仅仅是多一倍，二十将近 <strong>10</strong> 倍，从原来的 <strong>37</strong> 倍变成了 <strong>356</strong> 倍。总股数由于后面股价上涨了，则增长不多。</p><p>第三组可以看出来，前面十二年总价值从 1 涨到 <strong>37.33</strong>，总股数从 <strong>0.0356</strong> 变为 <strong>0.1483</strong>；后面十二年，价值从 <strong>37.33</strong> 涨到 <strong>356.74</strong>,总股数从 <strong>0.1483</strong> 涨到 <strong>0.23</strong>。可以看出来</p><ol><li>前面十二年总价值涨了 <strong>37</strong> 倍，后面十二年总价值涨了将近 <strong>10</strong> 倍</li><li>前面十二年总股数涨到原来 <strong>4</strong> 倍，后面十二年总股数涨到 <strong>1.6</strong> 倍<br>可以大致认为，股数越多，总收益越多；股价更低的时候，股东总收益反而会更好。</li></ol><p>第四组 分红不再买入的情况下，总市值变为 <strong>248.27</strong>, 总股数变为 <strong>0.16</strong>。分红再买入的情况下，总市值变为 <strong>356.74</strong>，总股数变为 <strong>0.23</strong>。分红再投入的总收益会更高。从总收益来看差异还挺大，分红不再买入的情况下是 <strong>248</strong> 倍，分红再买入的情况下是 <strong>356</strong> 倍。</p><h2 id="整体结论"><a href="#整体结论" class="headerlink" title="整体结论"></a>整体结论</h2><ol><li>投资是有复利的，所以越早开始投资越好，投资的时间越长越好</li><li>对于好公司（上面的茅台），不管是否分红再投入，都能有不错的收益</li><li>对于好公司，分红应该再投入，收益会更多<br>3.1  分红可以理解为公司部分收益的处置权交给所有股东（而不是只有大股东），股东收到分红后至少有两个选择：1）继续买入；2）不买入该投资标的。那么这两种选择也会有不同的收益，如果不买入该投资标的的收益无法比过当前投资标的，则收益会变少 — 当然如果有正当使用需要则另说。<br>3.2  另外可以从股本位的视角来考虑，分红再买入是再增加整体股数，长远来看收益也会更好。</li><li>市值 = 股数 * 单价。股数和股票单价上涨均能导致市值上涨。<br>4.1. 市值短期受市场影响（市场内参与该股票交易所有人的预期），长期受公司内在价值影响。也就是说从长期来看公司股价会围绕公司价值波动。<br>4.2. 不管股价是否增长，股数增长均会提高整体市值，但是股价增长，会导致同样资金能够买到的股数变少。<br>4.3. 因此股价大幅增长对股东来说反而不是一个好事情:1）股价是否涨高，并不会影响公司的营业情况 — 也就是盈利、分红等；2）股价涨高导致能买的股数变少（实际情况下甚至由于股价过高，分红没法购买 1 手）。</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li>上面的所有分析，有一个前提：公司是一个好公司。</li><li>不是所有公司的收益率都如茅台，因此上述数据仅作参考。</li><li>我们可以多一个维度分析公司的收益情况。如果公司是好公司的情况下，整体收益可以由 &lt;股数 * 股价&gt; 决定，那么我们在用数据进行筛选公司的时候，可以考虑分红再买入后的情况。</li><li>既然上面说的分红再买入会更好，那是不是可以让公司不分红（变相的相当于再买入），分红的意义是啥呢？<br>4.1. 分红会从利润中出，公司分红表示有利润，同时如果公式有分红比例的话，会变相的约束公司不虚报利润（只可能隐藏利润） — 表明公司利润只会比表现出来的更好。也可以一定情看下监督公司一年经营情况<br>4.2. 分红后的钱股东有自由取决权，可以再买入，可以用于其他途径（生活，或者投资其他地方）</li><li>分红的情况是将当年的收益分配给股东的一种形式，可以有三种：现价分红；派发新股；转增股本[2]，这里说的分红主要是是现价分红。</li></ol><p>另外建议结合 <a href="https://mp.weixin.qq.com/s/MoGZimAdRqB-fWUWcMSqVQ">股市是一个好的投资渠道吗</a> 一起阅读（注意：里面茅台相关总收益/总股数计算有误，以本文为准），里面对不同投资标的进行一个分析</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>[1] <a href="https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml">https://vip.stock.finance.sina.com.cn/corp/go.php/vISSUE_ShareBonus/stockid/600519.phtml</a><br>[2] <a href="https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html">https://www.morganstanleysecurities.com.cn/investor/education-dividendpolicy.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> stock </tag>
            
            <tag> investment </tag>
            
            <tag> 分红 </tag>
            
            <tag> compond </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maotai-input-output</title>
      <link href="/2025/03/16/maotai-input-output/"/>
      <url>/2025/03/16/maotai-input-output/</url>
      
        <content type="html"><![CDATA[<p>本文尝试更详细的分析茅台以及所在行业的一些指标信息，希望对茅台是否赚钱，以及赚钱后是否能够归属小股东等有一个大体的认识，也希望能够更好的了解应该关注公司哪些指标以及信息。</p><span id="more"></span><p>对于股东来说，主要关注一个公司两点</p><ol><li>公司业务是否赚钱</li><li>公司业务赚钱之后，是否都归属于股份有限公司（股东所有)</li></ol><h1 id="茅台的业务"><a href="#茅台的业务" class="headerlink" title="茅台的业务"></a>茅台的业务</h1><p>茅台的业务主要是卖酒，在茅台酒的整条链路中，大致如下所示</p><p>[原材料提供商] —原材料—&gt; [茅台股份有限公司]  —酒—&gt; [直销/经销商] (—酒—&gt; [终端销售]) —酒—&gt; [终端客户]</p><p>其中 [终端销售] 这一环节可能没有，比如在直销或者电商等渠道</p><p>国信证券梳理[2]的销售渠道以及相关价格如下所示（2023 年出厂价涨价前）</p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231410651.png" alt=""></p><p>涨价后，大致修改如下所示</p><ul><li>原材料提供商<ul><li>茅台股份有限公司<ul><li>[直销] i茅台/数字营销平台  &lt;— 零售指导价 1499</li><li>茅台销售公司<ul><li>[经销] 一级经销商  &lt;— 拿酒成本是 出厂价 1199<ul><li>终端销售  &lt;— 一批价 按照[2] 大概 2300<ul><li>客户    &lt;— 实际购买价  散装大概 2600[3]，会持续有变动</li></ul></li></ul></li></ul></li><li>商超  &lt;—  1399 参考国信证券数据[2]</li><li>电商  &lt;—  1399 参考国信证券数据[2]</li><li>团购  &lt;— 零售指导价 1499</li></ul></li></ul></li></ul><p>其中出厂价是固定的(1199)，零售指导价是固定的(1499)，批价和终端价会随着市场需求的变动而变化。如果终端需求多，终端价会增加，从而会提高批价，反之则会导致终端价和批价下降。</p><p>其中出厂价/建议零售价/商超/电商/团购的 基本固定（变动周期较长），经销商相关的的销售链路，其中 [终端价] 和 [批价] 的差异为终端销售的利润，[批价] 和 [出厂价] 的差异则是经销商的利润。如果这两个利润过低甚至变负，则会影响整条链路上的整体酒销售。</p><p>下图展示了经销商在过去几年中的利润空间变化（其中灰色的区域是渠道利润，红色是出厂价，蓝色是批价）[2]</p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202504021431926.png" alt=""></p><h1 id="茅台是否赚钱"><a href="#茅台是否赚钱" class="headerlink" title="茅台是否赚钱"></a>茅台是否赚钱</h1><p>茅台的整体业务比较简单，主要是卖酒，然后还有部分金融业务。</p><p>首先看下最近几年的营收和成本，如下图所示<br><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231446109.png" alt=""></p><p>上图中可以看出几点</p><ul><li>利润主要来自于营业收入 — 也就是卖酒。</li><li>营业收入最近几年逐年增加</li><li>营业成本的增长率和营业收入的增长率差不多</li></ul><p>其中营业收入拆开来看的情况如下图所示<br><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202503231417076.png" alt=""></p><p>从图中可以看到</p><ul><li>最多的成本是税及附加 — 由于税率固定，这部分是卖的越多，税越多</li><li>营业成本逐年增加，但是增加的没有税多</li><li>管理费用/销售费用 逐年增加，但是增加不是很多，整体占比也不是很多</li></ul><p>另外从不同角度查看营业收入的情况。</p><p>茅台酒和系列酒的情况（单位：百万）</p><div class="table-container"><table><thead><tr><th>年份</th><th>茅台酒(占比/较上年涨幅)</th><th>系列酒(占比/较上年涨幅)</th></tr></thead><tbody><tr><td>2023</td><td>126589(85.9%/17.6%)</td><td>20629(14.1%/29.4%)</td></tr><tr><td>2022</td><td>107833(87.1%/15.3%)</td><td>15938(12.9%/26.5%)</td></tr><tr><td>2021</td><td>93464(88.1%/10.1%)</td><td>12594(11.9%/26%)</td></tr><tr><td>2020</td><td>84830(89.4%/11.9%)</td><td>9991(10.6%/4.7%)</td></tr><tr><td>2019</td><td>75802(88.8%/15.7%)</td><td>9542(11.2%/18.2%)</td></tr></tbody></table></div><p>经销和直销的收入情况（单位：百万）</p><div class="table-container"><table><thead><tr><th>年份</th><th>经销（占比/较上年涨幅)</th><th>直销（占比/较上年涨幅）</th></tr></thead><tbody><tr><td>2023</td><td>7998611.94(54.33%/7.5%)</td><td>6723287.69(45.67%/36.15%)</td></tr><tr><td>2022</td><td>7439359.47(60.10%/-9.4%)</td><td>4937873.77(39.9%/105%)</td></tr><tr><td>2021</td><td>8202992(77.34%/0.5%)</td><td>2402936(22.66%/81.48%)</td></tr><tr><td>2020</td><td>8158164.26(86.03%/377%)</td><td>1324035.65(13.97%/82.6%)</td></tr><tr><td>2019</td><td>7809590.86(91.5%/-)</td><td>724865.97(8.5%/-)</td></tr></tbody></table></div><p>经销和直销的酒量情况（单位：吨）</p><div class="table-container"><table><thead><tr><th>年份</th><th>经销（占比/较上年涨幅)</th><th>直销（占比/较上年涨幅）</th></tr></thead><tbody><tr><td>2023</td><td>57639.09(78.66%/1.1%)</td><td>15634.95(21.34%/39.76%)</td></tr><tr><td>2022</td><td>56989.75(83.59%/-6.1%)</td><td>11186.57(16.41%/95.04%)</td></tr><tr><td>2021</td><td>60702.99(91.36%/0.9%)</td><td>5735.70(8.64%/45.85%)</td></tr><tr><td>2020</td><td>60123.8(93.86%/-3.01%)</td><td>3932.08(6.14%/48.32%)</td></tr><tr><td>2019</td><td>61993.46(95.89%/-)</td><td>2651.84(4.11%/-)</td></tr></tbody></table></div><p>从上面的数据可以看到，经销的量基本没有太大变化，总收入稍微有些增长；直销的量和收入均有比较大的增长。</p><p>国内和国外销售情况（单位：百万），暂时国内销售占主要比例</p><div class="table-container"><table><thead><tr><th>年份</th><th>国内（占比/较上年涨幅)</th><th>国外（占比/较上年涨幅）</th></tr></thead><tbody><tr><td>2023</td><td>142868(97%/19.5%)</td><td>4350(3%/2.6%)</td></tr><tr><td>2022</td><td>119532(96.5%/15.5%)</td><td>4239(3.5%/61.9%)</td></tr><tr><td>2021</td><td>103440(97.5%/11.9%)</td><td>2618(2.5%/7.6%)</td></tr><tr><td>2020</td><td>92389(97.4%/12%)</td><td>2432(2.6%/-16.8%)</td></tr><tr><td>2019</td><td>82424(96.5%/16.6%)</td><td>2920(3.5%/0.9%)</td></tr></tbody></table></div><p>接下来查看预收账款（单位：百万）相关的情况 — 经销售需要预打款才能买到货（这个也变相的说明茅台不愁销量 — 这里的销量和终端销售公司的销量不完全是一个概念），可以每年有百亿级别的预收账款</p><div class="table-container"><table><thead><tr><th>年份</th><th>预售款（增长）</th></tr></thead><tbody><tr><td>2023</td><td>14,125(-8.7%)</td></tr><tr><td>2022</td><td>15,471(21.64%)</td></tr><tr><td>2021</td><td>12,718(4.5%)</td></tr><tr><td>2020</td><td>13,321(-3.0%</td></tr><tr><td>2019</td><td>13,740(-)</td></tr></tbody></table></div><p>然后再看下不同类型酒的销售额（单位：十亿），以及涨幅如下。从数据可以看出来，白酒持续在增长，但是其他类型酒的销售额则有不同类型的波动。</p><div class="table-container"><table><thead><tr><th>年份</th><th>白酒（涨幅)</th><th>啤酒（涨幅）</th><th>葡萄酒（涨幅）</th><th>黄酒（涨幅）</th></tr></thead><tbody><tr><td>2023</td><td>756(19.5%)</td><td>186.3(8.6%)</td><td>9(4.8%)</td><td>21(2.1%)</td></tr><tr><td>2022</td><td>662(9.64%)</td><td>175.1(10.1%)</td><td>9.1(-2.91%)</td><td>1.2(-24.3%)</td></tr><tr><td>2021</td><td>603(18.6%)</td><td>158.4(7.91%)</td><td>9(-9.79%)</td><td>12.7(-5.24%)</td></tr><tr><td>2020</td><td>583(4.61%)</td><td>146.8(-6.12%)</td><td>10(-29.82%)</td><td>13.4(-20.18%)</td></tr><tr><td>2019</td><td>561(8.2%)</td><td>158(4.8%)</td><td>14.5(17.5%)</td><td>17.3(2.7%)</td></tr></tbody></table></div><p>然后查看茅台酒和系列酒占整个白酒的销售收入情况如下（单位十亿），可以看出茅台酒和系列酒的收入在缓慢上升。</p><div class="table-container"><table><thead><tr><th>年份</th><th>白酒（较上年涨幅)</th><th>茅台酒（占比）</th><th>系列酒（占比）</th></tr></thead><tbody><tr><td>2023</td><td>756(19.5%)</td><td>126.5(16.7%)</td><td>20.6(2.7%)</td></tr><tr><td>2022</td><td>662(9.64%)</td><td>107.8(16.2%)</td><td>15.9(2.4%)</td></tr><tr><td>2021</td><td>603(18.6%)</td><td>93.4(15.4%)</td><td>12.5(2.0%)</td></tr><tr><td>2020</td><td>583(4.61%)</td><td>84.8(14.5%)</td><td>9.9(1.6%)</td></tr><tr><td>2019</td><td>561(8.2%)</td><td>75.8(13.5%)</td><td>9.5(1.6%)</td></tr></tbody></table></div><p>另外由中酒协披露 2023 年酒业数据[4] 可知，白酒销量在减少，但整体实现营收不断上升，白酒整体逐步迈向高端化。</p><h1 id="收益归属"><a href="#收益归属" class="headerlink" title="收益归属"></a>收益归属</h1><p>接下来查看相关归属情况</p><p>我们看下以茅台股份有限公司为中心视角的一些公司情况</p><ul><li>中国贵州茅台酒厂（集团）有限责任公司  54.07%</li><li>香港中央结算有限公司  6.45%</li><li>贵州国有资本运营有限责任公司  4.64%</li><li>贵州茅台酒厂（集团）技术开发有限公司 2.22%</li><li>中国工商银行-上证50交易型开放式指数证券投资基金 1.01%</li><li>中国工商银行股份有限公司-华泰柏瑞沪深300交易型开放式指数证券投资基金 0.91%</li><li>中央汇金资产管理有限公司 0.83%</li><li>中国证券金融股份有限责任公司 0.64%</li><li>中国建设银行股份有限公司-易方达沪深300交易型开放式指数发起式证券投资基金 0.61%</li><li>中国人寿保险股份有限公司-传统-普通保险产品-005L-CT001沪 0.44%<ul><li>贵州茅台酒股份有限公司<ul><li>贵州茅台酱香酒营销有限公司 100%</li><li>贵州茅台酒销售有限公司 95%</li><li>北京友谊使者商贸有限公司 70%</li><li>国酒茅台定制营销（贵州）有限公司 70%</li><li>贵州茅台酒进出口有限责任公司 70%</li><li>贵州茅台集团财务有限公司 51%</li><li>贵州赖茅酒业有限公司 43%</li><li>贵州金石（贵州）产业发展基金合伙企业（有限公司）</li><li>茅台招华（贵州）产业发展基金合伙企业（有限合伙）</li></ul></li></ul></li></ul><p>其中「茅台股份有限责任公司」的收益是所有股东共享的，也就是说该公司的利润普通股东是有份的。</p><p>如果有部分利益从「贵州茅台酒股份有限公司」移到其他地方，则会有损小股东的权益，比如 2009 年成立的 茅台销售公司成立是大家所担心的那样 —  后来茅台股份公司回应统一按照出厂价较会议，不影响股份有限公司的收。</p><p>那么另外有一个问题，这部分归属于小股东的权益，怎么保证实实在在会给到小股东呢？是否有可能造成大股东替小股东决策，然后导致大股东占小股东便宜的事情呢，这个在后续加上分红相关的一起描述。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从本文我们可以看出，作为茅台股份有限公司的股东来说，主要关心的一些点</p><ul><li>茅台酒的利润情况：这个和酒的质量、销量、价格等有关</li><li>茅台酒的利润归属：是否有相关收益从股份公司移到了其他公司，归属在茅台股份公司的利益是否都分给所有股东了 — 主要是小股东</li></ul><p>第一点来说主要有公司的商业模式决定，茅台酒（白酒）的商业模式好，不愁卖（有很多预收款），对上下游均有定价权，且进入门槛/口味等拥有一定的差异化，因此在可预见的未来。在之前的文章 [茅台是一个好的投资标的吗] 以及[茅台的成本分析] 中也有一些相关分析。</p><p>第二点主要从历史以及公司的透明度等情况来进行分析，另外后面会尝试从分红等角度来进行一些分析。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Q: 茅台的销量能持续吗？未来很多年轻人可能不喝白酒了？酒是有害物品<br>A: 关于这个问题，大致思考是这样的：整体白酒的销量不太确定，但是茅台的销量暂时看不太会受影响</p><ol><li>人不仅仅是为了健康（比如吸烟），还会考虑快乐 </li><li>通过和一些常喝酒的人沟通，酒会有用户粘性（至少到类似香型），不会因为稍微涨价而喝其他的。另外茅台在整体白酒中占比也还较低</li><li>茅台有一定的送礼/面子 属性在里面，这属于文化的一种，只要相关文化不变，就需要一种载体，茅台现在充当这个载体，载体是一个群体共识，共识的改变会比较难。</li></ol><p>[1] <a href="https://echarts.apache.org/examples/en/editor.html?c=bar-negative">https://echarts.apache.org/examples/en/editor.html?c=bar-negative</a><br>[2] <a href="https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf">https://pdf.dfcfw.com/pdf/H3_AP202407301638468976_1.pdf</a><br>[3] <a href="https://m.cls.cn/detail/712100">https://m.cls.cn/detail/712100</a><br>[4] <a href="https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html">https://jljcscyxs.mofcom.gov.cn/efile/html/yjbg/2024/3/1711437584739419.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> stock </tag>
            
            <tag> maotai </tag>
            
            <tag> profit </tag>
            
            <tag> cost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maotai-basic</title>
      <link href="/2025/02/22/maotai-basic-2025-02-08/"/>
      <url>/2025/02/22/maotai-basic-2025-02-08/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文尝试记录一些茅台公司的基本情况，便于对公司的深入了解。</p></blockquote><p>茅台的香型有三种典型体 — 酱香，窖底香，醇香。茅台酒命名为酱香型。[1]</p><ul><li>酱香体：具有酱香味，且味感优雅细腻</li><li>窖底香：用窖底酒醅酿烤、放香好，但酒味冲辣者定位窖底香。</li><li>醇甜体：含有大量多种香气成分，味醇甜者定为醇甜体。</li></ul><span id="more"></span><p>茅台酒有多个独特的作法：</p><ul><li>茅台酒生产从投料到丢糟直至结束，需要一年时间，也正好是一年一个生产周期</li><li>茅台酒全年生产用料—高粱，要在两个月内两次投完。</li><li>茅台酒的陈酿的时间，最短也要四年以上。这就是茅台酒显得优雅细腻的重要原因之一。</li><li>茅台酒制曲需要经过数十天的高温发酵，时间之长，温度之高，在白酒生产中可以说是首屈一指。五月端午前后开始踩曲，曲香特别浓郁，用曲量大，是形成茅台酒酱香突出的重要原因。</li><li>成熟了的曲药要经过 6 个月以上的贮存才能使用。</li><li>茅台酒对同一种原料药反复 7 次取酒，由于每一轮酒醅的基础不一样，气候条件不一样，所以每一轮次酒都有其特点，再经勾兑，相互取长补短，酒体显得协调，丰满。</li><li>同一批原料要经过 8 次摊凉，8 次加曲，8次堆积，8次入窖发酵，每一次入窖前都要喷洒一次“尾酒”，这种回沙技术是非常独特和科学的。</li><li>生产季节性强，九月重阳投料，这个季节性生产的特点，是和气候密切相关联的。</li></ul><p>茅台酒的独特酿造工艺：高温制曲、高温堆积、高温流酒、两次投料、七次蒸馏、八次发酵、九次蒸煮、长期陈酿，精心勾兑。由于茅台酒生产受产地的地质、水源、气候、温度、湿度、风向等自然条件影响，形成了有利于茅台酒的微生物群，使茅台酒酱香突出，风格独异，他处难于仿制。</p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/202502081749302.png" alt=""></p><p>因为刚酿烤出来的酒，具有爆辣、冲鼻，刺激性大的缺点。经过一定的陈酿期后，新酒变成陈酒，新酒具备的缺点就基本消失了。这个过程，经过氧化还原等一系列化学变化和物理变化，有效地排除了酒的低沸点物质，如醇类、硫化物等。除去了新酒的不愉快气味，乙醇缩合，辛辣味减少，增加了酒的芳香。随着酒的贮存时间的延长，增加爱了水分子和酒精分子的结合，减少了刺激，增加了香味。</p><p>陈酿的工艺：新酒入库以后，经检验品尝鉴定定香型后，装入容量为几百公斤的大酒坛内，酒坛上贴标签，注明该坛酒的生产时间，哪一班，哪一轮次酿制，属哪一类香型。存放一年后，将此酒“盘勾”。盘勾两年后，共经过三年的陈酿期，酒已基本老熟，进入了小型勾兑和大型勾兑的“精心勾兑”阶段。精心勾兑后的茅台酒，还要在酒库里继续陈酿。一年以后，通过检查，如果符合或超过茅台酒的质量标准，即可送包装车间包装出厂。</p><p>茅台是固态发酵，和洋酒的液态发酵不一样，液态发酵需要将原料经过粉碎后，在水溶液里添加酵母进行发酵。酵母相对比较单一，发酵力非常强，发酵速度一般比较快，比较充分，耗粮率比较低。但它带来的结果就是，里边的大分子物质比较多，香味成分少。大分子多的结果就是喝多了会上头。而我们国内的这些名白酒很细腻，喝太多不会上头，这是非常大的一个差别。</p><p>堆积发酵是茅台酒独特的操作工艺，既网罗、筛选繁殖了微生物，又弥补了大曲微生物品种和数量的不足，同时生成 大量的香味物质和香味的前驱物质，在茅台酒传统的工艺中，占用重要的位置。</p><p>茅台酒生产所需的原料是红高粱和小麦。每公斤酒用粮 5 公斤左右，红高粱和小麦大体上各占一半。据 1956 年的历史资料记载，有 4 个红高粱品种最适合于酿造茅台酒：矮子高粱、中心高粱、麻鸡婆高粱和红缨子高粱。</p><p>制曲是酿酒的第一套工序，由于曲中有益微生物数量和品种较多，香味物质也较多，因此，它是关系到酒的质量高低的一个重要环节。茅台酒采用优质小麦制造高温大曲，与其他酒的大曲相比，有三个独特之处：</p><ul><li>生产季节性强，要求“伏天踩曲”，每年端午节前后开始踩曲，重阳节结束。这段时间内气温高、湿度大，空气中微生物的种类和数量多，且活跃。</li><li>制曲需要优质小麦，不加任何辅料。小麦粘着力强，营养丰富，适宜于菌种的生长，也符合前人总结酿酒经验中之处的“得自然之曲，乃称第一品”的要求。</li><li>制曲温度高在 60 摄氏度以上，俗称高温大曲。<br>在踩曲过程中，高度、湿度、水分比例，母曲投放比例等均有独特的要求和严密的工艺。</li></ul><p>白酒中的主要成分包括醇类物质，酸、酯、醛、酮，酚等。酒中包含的物质含量、比例等不一样均会影响最终的口感，茅台酒通过不同香型、不同轮次，不同酒度，不同年龄的茅台酒相互勾兑，形成最终用户拿到的茅台酒。</p><p>茅台酒的勾兑工序如下：茅台酒陈酿期满三年后，先勾兑基础酒，再调香，调味，先是小型勾兑，再大型勾兑。小型勾兑后，将样品摇匀，放置一个月，与标准酒样对照，如质量没有发生变化，即按照小型勾兑的比例进行大型勾兑。然后将大型勾兑后的酒密封贮存，一年后，将此酒样送厂评委检验，如果此酒达到或超过出厂酒的标准，即可包装出厂。</p><p>制酒工艺的整体流程可以如下所示，假设第 X 年开始制曲和酿酒，那么在第 X + 5 年开始可以售卖成酒。<br><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/20250218203542.png" alt=""></p><ul><li>第一年开始制曲和酿酒（假设是第 X 年），这个流程完成之后，会有基酒（此处是第 X + 1年）</li><li>由于基酒不好喝，因此需要陈酿。<ul><li>基酒首先存放一年，然后继续盘勾（这是第 X + 2 年）</li><li>盘勾两年后，酒基本老熟，可以进行进行勾兑（这个过程完成是在第 X + 4 年）</li></ul></li><li>精心勾兑是在第 X + 4 年完成，然后精心勾兑的酒需要再存放一年（这个过程完成是在第 X + 5 年），然后酒品达标酒装车包装出厂。</li></ul><p>茅台酒有两道工序需要冷却：一是蒸馏取酒，二是蒸馏后酒糟的摊凉。现在使用锡制水冷却器，天锅改用甑盖，蒸汽通过甑盖，顶部 2 米长的天桥管道，进入冷却器冷却，聚成酒接入酒坛，取酒手段大大进步，酒甑体积增大，增加了容量。</p><p>茅台公司认为的核心竞争力如下：环境、工法、品质、品牌，文化，并拥有独一无二的原产地保护，不可复制的微生物菌落群、传承千年的独特酿造工艺，长期贮存的基酒资源组成的“四个核心势能”。</p><p>系列酒</p><ul><li>2014 年 12 月，茅台酱香酒营销有限公司正式成立，系列酒开始独立运行，不再作为茅台的附属品存在。</li><li>2015 年，推出赖茅、王茅、华茅和贵州大曲四个新平台。王茅和华茅很快就失败了，相继停产，到 2018 年又重新启动。</li><li>系列酒包括：1935、一曲、三茅、四酱，以及大单品 1935</li></ul><p>公司的经营模式：采购原料 — 生产产品— 销售产品。<br>原料采购模式为：茅台酒用高粱采取“公司+地方政府+供应商+合作社或农户”的模式；小麦采取“公司+供应商+合作社或农场”的模式，其他原辅料及包装材料采购主要根据公司生产和销售计划，通过集中采购方式向市场采购；<br>产品生产工艺流程为：制曲 — 制酒 — 贮存 — 勾兑 — 包装<br>销售模式为：公司产品通过直销和批发代理渠道进行销售。直销渠道指自营和“i 茅台”等数字营销平台渠道，批发代理渠道指社会经销商、商超、电商等渠道。</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>[1] <a href="https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html">https://www.rh.gov.cn/yxrh/rhjj/mswh/202405/t20240508_84599090.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> stock </tag>
            
            <tag> maotai </tag>
            
            <tag> company-analysis </tag>
            
            <tag> wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lsm-tree</title>
      <link href="/2023/04/24/lsm-tree-1-2023-05-17/"/>
      <url>/2023/04/24/lsm-tree-1-2023-05-17/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章内容基于原论文，结合自己的理解和思考，发现有错漏的地方，欢迎反馈探讨，感谢。</p></blockquote><p>LSM-Tree 拥有优异的性能出现在各种存储引擎中，本文希望对 LSM-Tree 进行一个最小全局认识，对其有个骨架结构认识，从 LSM-Tree 的原始论文开始，到现在的进展以及 LSM-Tree 中各种影响的因素。</p><span id="more"></span><h1 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h1><h2 id="1-LSM-Tree-的缘起"><a href="#1-LSM-Tree-的缘起" class="headerlink" title="1 LSM-Tree 的缘起"></a>1 LSM-Tree 的缘起</h2><p>LSM-Tree 从论文[1] 中出生，在该论文中谈及了 LSM-Tree 诞生的原因，主要流程，优缺点，适合场景，以及决定性能的相关参数等。首先接下来重点介绍这篇 LSM-Tree 的原始论文。</p><p>在论文[1] 之前的年代中，存储引擎主要使用 B-Tree 系列的数据结构，这种数据结构并不是 I/O 友好型的，随机 I/O 所带来的成本会比较高，尤其是写多读少的情况下，更新叶子节点会有两次随机 I/O（读+写），会有性能瓶颈。LSM-Tree 则以两个 batch 操作来优化 I/O 成本：1）首先写入 memory，然后 memory 的数据以 batch 形式写入磁盘；2）磁盘顺序读写，减少 seek 的成本（次数减少），均摊后单次成本更低。</p><p>由论文[2] 中的结论可知，在一定范围内使用内存换 I/O 能减少整体成本。随着硬件的更新换代，内存和磁盘的成本关系也在变化，可根据具体使用的硬件进行对比。</p><h2 id="2-LSM-Tree-的结构，以及主要流程"><a href="#2-LSM-Tree-的结构，以及主要流程" class="headerlink" title="2 LSM-Tree 的结构，以及主要流程"></a>2 LSM-Tree 的结构，以及主要流程</h2><p>LSM-Tree 是一个多层的数据结构，其中第一层（最上层）保持在内存中，除第一层外的其他层均在磁盘（部分频繁访问的数据会 cache 在内存）。最简单的 LSM-Tree 拥有两层：内存中一层，磁盘中一层。接下来首先以两层 LSM-Tree 介绍相关功能，后续在定量分析过程中，会详细介绍多层 LSM-Tree 结构。</p><p>两层 LSM-Tree 的结构如下所示：</p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141825.png" alt="tow-component-lsm"></p><p>上图中 L0 与 L1 均是 tree-like 的数据结构，由于 L0 不需要特别考虑 tree high（都在内存，无 I/O），因此 B-Tree、AVL-Tree 以及 2-3-tree 等各种 tree like 数据结构读可以。 L1 保存在磁盘，需要考虑 tree high，使用 B-Tree。</p><p>对 LSM-Tree 数据结构，首先看一下基本操作的流程(为了描述方便，L0 中的结构也以 B-Tree 为例）:</p><ul><li>insert：数据直接写入内存 L0 中。在 L0 大小达到一定阈值后，会进行 rolling merge 操作（后面详述），将数据从 L0 转移到 L1。</li><li>get：读取数据的时候，首先从 L0 中进行查找，找到后直接返回（不管是否带 delete meta 信息的 key/value），否则继续从 L1 进行查找。</li><li>delete：如果 L0 中没有 key/value 对，则在 L0 中增加一个 key/value 对，且 value 包括 delete 相关的 meta 信息；如果 L0 中有对应的 key/value，则将 value 更改为包括 delete meta 信息的值。rolling merge 的时候将带有 delete meta 信息的 key/value 从 L_i 写入到 L_(i+1) 删除 L_i &amp; L_(i + 1) 中的 key/value 对，然后在 L_(i+1) 插入一个带有 delete meta 信息的 key/value 对，当达到最底层的时候，将 key/value 对进行物理删除。同样 delete 的操作和 insert 一样，支持 batch 操作。</li><li>update：update 可以看作是 delete&amp;insert 的组合</li></ul><p>LSM-Tree 为了保证更上层有空间接受插入的新数据，维护一个 rolling merge 的后台流程，该流程会从相邻两层中分别读取数据，写入到下层中，在 rolling merge 的过程中也可以进行部分逻辑处理：比如 ttl 的数据可以直接删除等。下图是一个 rolling merge 的示意图： </p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516141924.png" alt="rolling-merge"></p><h2 id="3-LSM-Tree-相关的定量分析"><a href="#3-LSM-Tree-相关的定量分析" class="headerlink" title="3 LSM-Tree 相关的定量分析"></a>3 LSM-Tree 相关的定量分析</h2><p>上文介绍了 LSM-Tree 诞生的原因，以及基本的流程，下面着重进行性能相关的定量分析，包括双层 LSM-Tree 以及多层 LSM-Tree。</p><h3 id="双层-LSM-Tree-的-IO-定量分析"><a href="#双层-LSM-Tree-的-IO-定量分析" class="headerlink" title="双层 LSM-Tree 的 IO 定量分析"></a>双层 LSM-Tree 的 IO 定量分析</h3><p>本节介绍双层 LSM-Tree 的 I/O 定量分析，以及和 B-Tree 的相关对比情况。</p><p>以下对比内容基于 1995 年的硬件架构：</p><ul><li>1MByte 内存需要 100$</li><li>1MByte 磁盘的存储需要 1$</li><li>随机访问 I/O 成本是 25$</li><li>顺序访问的 I/O 成本是 2.5$</li></ul><p>同时为了后面描述方便，定义变量如下:</p><ul><li>$COST_d$ 表示磁盘存储 1MByte 所需要的成本</li><li>$COST_m $ 表示内存中存储 1MByte 所需要的成本</li><li>$ COST_P $ 表示提供 1 page 每秒所需要的磁盘成本（随机访问）</li><li>$ COST_\pi $ 表示提供 1 page 每秒所需要的磁盘成本（顺序访问）</li></ul><p>内存的成本由存储空间决定，而磁盘的成本则由存储空间和访问频率的更大者决定。</p><p>假设需要存储 S MByte 大小的数据，且每秒 H 的随机 I/O 访问（数据无缓存），则磁盘的开销是 $ COST_D = max(S <em> COST_d, H </em> COST_P $，其中 $ S<em>COST_d $ 表示存储所需成本，$ H </em> COST_P $ 则表示随机 I/O 访问的成本。</p><p>当使用内存来缓存部分数据后，使得磁盘的瓶颈变为存储量后，则对应总成本是 $ COST-B = S <em> COST_m + S</em>COST_d $ 其中， $ S<em>COST_M $ 表示内存的成本，$ S</em>COST_d $ 表示磁盘的存储所需成本。</p><p>综合上面两种情况可得，总共存储 S MByte 大小的数据，且每秒 H 随机访问的总成本公式如下所示：</p><p>$ COST-TOT = min(max(S<em>COST_d, H</em>COST_P), S<em>COST_m + S</em>COST_d) $</p><p>通过上述公式我们可以看到，整体的成本受总存储量，以及访问频率的影响，我们将 H/S（访问热度） 作为横轴，COST-TOT 作为纵轴画图得到如下曲线</p><Graph-of-cost-of-access-per-MByte-vs-Temperature.jpg> <p>通过上图可知，总成本会随着访问热度的增长而增长，当达到一定程度后不在增长。上图中两个拐点将数据分为三段：cold，warm，hot。其中第一段的成本主要来源磁盘存储量，第二段则随着访问频率的增加而变多，第三段主要是内存与磁盘容量的成本。其中两个拐点则用如下公式定义</p><ul><li>$ T_f = COST_d / COST_P = 1 / 25 = 0.04 $ 表示 cold 和 warm data 之间的拐点</li><li>$ T_b = COST_m / COST_P = 100 / 25 = 4 $ 表示 warm 和 hot data 之间的拐点</li></ul><blockquote><p>对于连续 I/O 访问来说，也有类似上图的分析，而其中 warm 和 hot 的划分则是对 “The Five Minute Rule”[2] 的概括。</p></blockquote><p>根据论文[3] 中的说法，访问热度与实际的磁盘访问有关，而不是逻辑插入速度，LSM 也是通过减少实际的磁盘访问量来提效，LSM-Tree 有两个减少磁盘访问的点：1）先写内存，然后 batch 写磁盘；2）顺序访问磁盘。接下来接下下顺序 I/O 的收益。</p><p>根据[4] 给的数据，随机读取一个磁盘页的耗时大概是 20ms（其中 10ms 用于磁道寻址，8.3ms 来源于旋转延迟，1.7ms 来源实际读取）。顺序读取 64 个磁盘页的耗时大概是 125ms（其中 10ms 来源于磁道寻址，8.3ms 来源于旋转延迟，106.9ms 来源于实际的数据读取），— 平均后大概只需要 2ms 读取一个磁盘页，是随机访问的 1/10。也就是 $ COST_{\pi} / COST_P = \frac{1}{10} $。通过前面计算也能直观感受到顺序 I/O 所带来的(均摊)具巨大性能收益。</p><p>我们使用[3] 中的给的结论来计算 “五分钟规则” 的参考区间 —  $ \tau $，规则指出“维持每秒 1 page 访问所需要的成本与保存它所需的内存成本一致”，我们得到如下公式</p><ul><li>$ \frac{1}{ \tau } <em> COST_P = pagesize </em> COST_m $  （I/O 速率 * 随机 I/O 的成本 = 内存存储的成本）</li></ul><p>那么 $ \tau = (\frac{1}{pagesize} <em> \frac{COST_P}{COST_m}) = \frac{1}{pagesize </em> T_b} $，如果每个 page 是 4k(0.004 Mb) 的话我们可以得到 <code>$\tau = 1/(0.004 * 4) = 62.5 seconds/IO</code>。换句话说在访问间隔小于 62.5 seconds/IO 的时候，用内存换磁盘是合理的（现在需要根据硬件成本进行具体计算）。</p><h3 id="B-Tree-和-LSM-Tree-的定量分析对比"><a href="#B-Tree-和-LSM-Tree-的定量分析对比" class="headerlink" title="B-Tree 和 LSM-Tree 的定量分析对比"></a>B-Tree 和 LSM-Tree 的定量分析对比</h3><p>在进行 B-Tree 和 LSM-Tree 的对比分析之前，先单独进行 B-Tree 和 LSM-Tree 的分析。主要对比 insert 的性能，同时忽略了 index 更新过程中所带来的微小 I/O 成本。</p><h4 id="B-Tree-的定量分析"><a href="#B-Tree-的定量分析" class="headerlink" title="B-Tree 的定量分析"></a>B-Tree 的定量分析</h4><blockquote><p>假设所有的 insert 是完全随机的，因此不会有叶子节点 buffer 在内存的情况。</p></blockquote><p>根据论文[5] 的结论，B-Tree 中的有效深度 - $D_e$ - 表示随机查找中，未在 buffer 中命中的平均 page 数目。在 B-Tree 的插入中，首先需要进行 $D_e$ 次 I/O 查找对应的叶子节点，更新改节点，然后将脏页写回（1 I/O），因此整个 I/O 的开销如下所示</p><p>$ COST_{B-ins} = COST_P * (D_e + 1) $</p><h4 id="LSM-的定量分析"><a href="#LSM-的定量分析" class="headerlink" title="LSM 的定量分析"></a>LSM 的定量分析</h4><p>由于 LSM 的单 entry insert 时直接写入内存，可能没有 I/O 开销，因此分析 LSM-Tree 的 insert I/O 开销时，使用均摊分析进行。</p><p>首先定义一些变量如下</p><ul><li>$ S_e $ 表示 entry（index entry） 的大小（byte 为单位）</li><li>$ S_p $ 表示 page size 的大小（byte 为单位）</li><li>$ S_0 $ 表示 C0 中叶子节点的大小（MByte 为单位）</li><li>$ S_1 $ 表示 C1 中叶子节点的大小（MByte 为单位）</li><li>M 表示 rolling merge 的过程中平均有多少个 entry 插入到 <strong>每个</strong> C1 的叶子节点 (a given LSM-tree as the average number of entries in the C0 tree inserted into <strong>each</strong> single page leaf node of the C1 tree during the rolling merge)</li></ul><p>每个 page 中的 entry 数目大致为 $ S_p / S_e $，整个 LSM-tree 中在 C0 中的数据比例是 $ S_0 / (S_0 + S_1) $ )，因此 rolling merge 过程中会平均插入到每个 C1 叶子节点的 entry 数 M 可以通过其他公式计算得到 $ M = (S_p/S_e) * (S_0/(S_0 + S_1)) $。</p><p>根据上述公式可以得到 LSM-Tree insert 的均摊开销为（将 C1 叶子节点读入和写出内存的开销均摊到 M 个 entry 上）</p><p>$ COST_{LSM-ins} = 2 * COST_{\pi} / M $ （读写一次 C1 的叶子节点，平均涉及到 M 个 entry）</p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>观察 B-Tree 和 LSM-Tree 的 insert I/O 开销我们可以得到如下的公式</p><p>$ COST_{LSM-ins} / COST_{B-ins} = K1 <em> (COST_{\pi}/COST_{P}) </em> (1 / M) $  </p><p>其中 $ K1 ~ 2/(D_e + 1) $ 是一个常数</p><p>上述公式对比展示出，LSM-Tree 比 B-Tree 的优势主要来自于两方面：1）$COST_{\pi}/COST_{P}$ 也就是磁盘的连续访问相比随机访问所带来的优势；2）M 也就是 rolling merge 时批量写入到 C1 中单个叶子节点的平均 entry 数目（注意 M 并不是一定会大于 1）。</p><p>在 B-Tree 作为索引的情况下，如果整体访问热度比较高的话，则可以使用上述公式进行粗略的估算，使用 LSM-Tree 之后大概会有多少收益。</p><h3 id="多-component-LSM-Tree-的分析"><a href="#多-component-LSM-Tree-的分析" class="headerlink" title="多 component LSM-Tree 的分析"></a>多 component LSM-Tree 的分析</h3><p>上面所有关于 LSM-Tree 的讨论均假设 LSM-Tree 是两层的，在实际的生成中，LSM-Tree 则可能会有多层，具体的层数，以及相邻层之间的大小比例等可以通过分析得出，本节介绍多层 LSM-Tree 相关的分析。</p><blockquote><p>为了方便讨论，下面的描述中，假设 LSM-Tree 中的 entry 在插入后，仅在最底层进行删除。</p></blockquote><p>上面几节中的分析可以得到从 C0 写入到 C1 每个叶子节点的平均 entry 数目 M 并不一定大于 1，如果 M &lt;= 1 的话，则 LSM-Tree 两个优势中的一个：“批量更新” 就失效了，因此如果分析得知 $ M &lt; K1 * COST_{\pi} / COSTP $ 的话则 B-Treee 比 LSM-Tree 会更好。另外一方面，为了更好的利用 LSM-Tree 的优势，则需要尽可能增大 M（也就是 C0 和 C1 的比值需要更大）；同时无限增大 C0  则会由于内存消耗更高造成成本过高，因此需要综合考虑计算一个总成本更小的参数值。</p><p>为了保持 LSM-Tree 中上层有空间持续接受新数据，因此 rolling merge 从上层读取并删除的速度与 C0 接受到插入速度需要保持一致。</p><p>在两层的 LSM-Tree 中，可以从 LSM-Tree 的总成本出发，寻找更合适的 C0 大小。首先从一个较大的 C0 开始，逐渐减小 C0 的大小（同时 I/O 开销会增加，I/O 的访问频率和存储成本会越来越小），直到达到一个平衡（此情况下再减少 C0 的大小会导致总成本增加）。另外的一个思路则是使用多层的 LSM-Tree 结构（这可以减少 C0 的大小，同时减少 I/O 的访问频率），同时没多一层会多部分 I/O 操作，因此需要综合考虑。</p><p>下图是一个多层 LSM-Tree 的结构</p><p><img src="https://raw.githubusercontent.com/klion26/ImageRepo/master/20230516142001.png" alt="multi-component-lsm-tree"></p><p>对于 K+1 层的 LSM-Tree 来说，总共有 C0, C1, C2, … C_{K-1} 以及 C_K，并且每层的大小递增（C1 比 C0 大，C2 比 C1 大，依次类推，最小的层 C0 在内存，其他的所有均在磁盘），相邻层之间会有异步的 rolling merge 过程，将 C_{i - 1} 层的数据迁移到 C_i 层中。对于一个插入后从未删除的 entry 来说，会从最上层 C0 逐步迁移到最底层 C_K 中。</p><p>接下来会通过定量的分析来说明多层 LSM-Tree 中不同参数对总成本的影响，并且推导得出一个总成本更低的参数组合。</p><p>首先定义一些在定量分析中需要的参数与假设</p><ul><li>$ S(C_i) $ — 表示 LSM-Tree 第 i 层叶子层所有 entry 的总大小（单位是 byte）</li><li>$ S_i $ — 表示 LSM-Tree 中第 i 层所有 entry 的总大小（单位是 byte），也就是 $S(C_i) = S_i$</li><li>$ r_i = S_i / S_{i-1} $  — 表示相邻两层中的总大小比例</li><li>S — 表示所有层中叶子节点的总大小，也就是 $S = \sigma{1}{i} S_i$</li><li>R — C0 接受到的插入速度（假设速度相对稳定），单位 byte/s</li><li>每层的中数据量保持稳定，且接近该层的阈值</li><li>每个 entry 只从 C0 插入，从 C_K 删除，中间层不删除 entry</li><li>C_K 的大小保持相对恒定，删除与插入保持相对的平衡，C_K 层的删除，可以理解为不增加插入速度的情况下将 entry 从 C_0 删除</li></ul><p>假定 LSM-Tree 有 K + 1 层，其中 S_0 和 S_K 固定，S_0 接受到的插入速度 R 恒定<br>问题：求所有的 $ r_i $ 使得整个 LSM-Tree 的总 I/O  速度 H 最小。</p><p>证明过程如下：</p><ol><li>由于假设每条数据从 C_0 插入后，一直到最底层 C_{K} 才会被删除，则所有相邻层 (C_{i-1}, C_{i}) 的 I/O 速度和 C_0 接受到的 I/O 速度一致，均是 C_0 接受的插入速度 R。</li><li>如果 C_{i-1} 和 C_{i} 都在磁盘上，那么 C_{i-1} 层从磁盘上读取的 I/O 速度就是 $ R/S_P $（这部分数据会被移入到 $C_{i}$ 层，其中 $S_P$ 是单 page 的字节数大小，从 C_{i} 层会有 $r_i <em> R/S_P$ 的读取 I/O（一个 C_{i-1} 层平均对应 C_{i} 层 r_i 个 page），然后所有读取的数据会写入到 $C_i$ 层，其速度是 $ (r_i + 1) </em> R / S_p $ (从 C_{i-1] 与 C_{i} 读取的数据都会写入到 C_{i} 层中，不会中途删除)，因此整个 LSM-Tree 的总 I/O 速度 H 可以用公式计算如下： $ H = (R / S_P) <em> ((2 </em> r_1 + 1) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 2) + (2<em>r_K + 1)). 其中 $ (2 </em> r_i + k) $ 表示 rolling merge 过程中第 i 层的总 I/O 量，其中 $ r_i <em> R / S_p $ 表示从 C_{i-1} merge 到 C_{i} 中从第 i 层读取的 I/O 量，(r_i + 1)</em>R/S_P 表示从 C_{i-1} merge 到 C_{i』 层后写入到第 i 层的 I/O 量，R/S_P 表示从第 i 层 rolling merge 到第 i + 1 层时的读取 I/O （C_0 没有 I/O，C_K 不需要合并到更下一层，没有下一层对应的 I/O)</li><li>简化 H 后得到 $ H + (R / S_P) <em> ((2 </em> r_1 + 2) + (2 <em> r_2 + 2) + … + (2</em>r_{K-1} + 1) + (2 * r_K + 1))  = (2R/S_p) (\sigma{1}{K} r_i + K - \frac{1}{2}) $</li><li>需要在已知条件下求 H 的最小值，其中 S_K 和 S_0 恒定，可以换算为同等已知条件 $ \prod\limits_{1}^K r_i = (S_k / S_0) = C $</li><li>也就是希望在 $ \prod\limits_{1}^K r_i = (S_k / S_0) = C $ 的情况下求 $ \sigma{1}{K} r_i $ 的最小值。</li><li>通过求偏导，得到 $ 0 = 1 - \frac{1}{r_j} <em> C </em> \prod\limits_{1}^{K-1} r_j^{-1}.  然后求的每个 r_j 等于 $ C * \prod\limits_{1}^{K-1} r_j^{-1} $ 或者 $ C^{\frac{1}/{K}} $ 情况下求的最小值。</li><li>在 LSM-Tree 中，相邻层然后把条件放宽（也就是不固定最大层的大小），每一层是上一层的 r 倍，由于正常情况下 r 会比较大，因此最大层会占据所有数据的大头（S_K ~~ S），那么固定整体大小 S 和 固定 S_K 就近似（上面的推导过程）</li></ol><blockquote><p>其中通过求偏导得到最小值的过程，自己推导的结果与论文中有差异，如果有人知道，恳请告知，自己推导的结果是 $ 0 = -\frac{1}{r_j} <em> C </em> \prod\limits_{1}^{K-1} r_j^{-1} $ 不是论文中的 $ 0 = 1 - \frac{1}{r_j} <em> C </em> \prod\limits_{1}^{K-1} r_j^{-1} $。</p></blockquote><p>根据已知条件与上述证明可得</p><ul><li>$ S = S_0 + r <em> S_0 + r^2 </em> S_0 + … + r^K * S_0 $</li><li>$ H = (2R / S_p)<em>(K </em> (1 + r) - 1/ 2) — 其中 R 是插入速度，S_p 是页大小，K 是磁盘上的层数，r 是相邻层的比值大小</li></ul><p>也就是 R 和 S_K 均保持不变的情况下，H 于 S_0 负相关（内存大小），与 r （相邻层的大小比例）正相关。</p><p>可以使用两层 LSM-Tree 进行具体的推演<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">两层的 LSM-Tree 中</span><br><span class="line">- K = 1， r = S_1 / S_0</span><br><span class="line">- H  = \frac&#123;2R&#125;&#123;S_P&#125;(K*(1+r) - \frac&#123;1&#125;&#123;2&#125;)</span><br><span class="line">- COST_tot = COST_m * S_0 + max(COST_d * S_1, COST_\pi * H)</span><br><span class="line">- s = (COST_m * S_0) / (COST_d * S_1) -- cost of memory relative to storage cost for S_1 data</span><br><span class="line">- t = 2 ((R/S_p) / S_1) * (COST_\pi /COST_d) * (COST_m / COST_d)</span><br><span class="line">- C = COST_tot / (COST_d * S_1)</span><br><span class="line"></span><br><span class="line">当 S_0 / S1 比较小的时候， C ~ s + max(1, t/s) </span><br></pre></td></tr></table></figure></p><p>其中 C 是 t 和 s 的函数，其中 t 是应用的平均访问热度（the variable t is a kind of normalized temperature measuring the basic multi-page block I/O rate required by the application），s 表示使用的内存大小。</p><p>最简单的来说，可以让 s = t, 这样 C  = s + 1，这样磁盘得到充分利用（I/O 的存储和访问量都打满）。</p><blockquote><p>个人理解这里是假定总存储量（磁盘所需空间）已知，且访问热度已知，也就是说 C 的最小值就是总成本的最小值。</p></blockquote><p>对于 t &lt; 1 的情况，s = t 的成本是最小的，但是 t &gt; 1 的情况下，C 在 s = t^{1/2} 的时候取得最小值，也就是 C = 2s = 2 t^{1/2}. 这个情况下 COST_tot = 2[(COST_m<em>S_1) </em> (2<em>COST_\pi</em>R/S_p)]^{1/2}（通过 C = 2<em>t^{1/2} 以及 C = COST_tot / (COST_d </em> S_1) 然后换算得到），也就是说当 t &gt; 1 的时候（两层的 LSM-Tree 最小代价如前所是），整体代价来源于两方面：1）内存的开销；2）I/O 访问的开销（由于 t 足够高，因此 I/O 开销比 I/O 存储代价更大）</p><p>对于 t &lt;= 1 的情况来说，C = s + 1 = t + 1 &lt;= 2. 也就是说总在成本总是小于存储成本的两倍，因此通过存储需求来确定磁盘使用大小，然后利用所有的 I/O 能力来最小化内存使用。（尽可能打满对应存储所能提供的 I/O)</p><h3 id="具体例子计算-B-Tree-和-LSM-Tree-的成本分析"><a href="#具体例子计算-B-Tree-和-LSM-Tree-的成本分析" class="headerlink" title="具体例子计算 B-Tree 和 LSM-Tree 的成本分析"></a>具体例子计算 B-Tree 和 LSM-Tree 的成本分析</h3><p>上面对 LSM-Tree 和 B-Tree 做了定量分析，接下来使用具体例子计算 B-Tree 和 LSM-Tree 在具体场景下的成本对比。</p><p>1 给定如下场景，计算 B-Tree 以及两层 LSM-Tree 的成本</p><ul><li>R = 16000 byte（每个 entry 16 byte，也就是 1000 个 entry 每秒）</li><li>总共 576 million entries（总存储空间 9.2Gbyte），每个 entry 的 ttl 是 20 days</li></ul><p>如果使用 B-Tree 的话，成本如下</p><ul><li>由于 I/O 访问是瓶颈，因此需要更多的磁盘存储空间才能满足对应的 I/O 访问（H = 2 <em> 1000 = 2000 随机访问），COST_P = 25$，那么随机访问的成本是 2000 </em> 25$ = 50,000$</li><li>然后非叶子节点需要缓存，具体的缓存成本计算如下<ul><li>假设叶子节点 70% 满，也就是每个叶子节点有 0.7 * (4K / 16) = 180 个 entry，上层节点需要 576 million/180 = 3.2 million 数据，在加上部分前缀压缩的技术后，假设每个非叶子节点可以存储 200 条数据，也就是 3.2 million / 200 = 16000 个节点，每个 4KB，总共有 64MB 的内存存储空间</li><li>64MB 的存储空间总成本是 64MB * 100$/MB  = 6400 $</li><li>忽略其他一些细小的成本开销</li></ul></li><li>B-Tree 的总成本 = 50000$ + 6400$ = 56400 $</li></ul><p>两层 LSM-Tree 的话，成本如下</p><ul><li>首先 C1 需要的总存储空间是 9.2Gbyte，总成本是 .1$/Mbyte * 92000Mbyte = 9200$</li><li>根据 C1 的大小计算出打满情况下的 H  = 92000 / COST_\pi = 9200 / 2.5 ~ 3700 page/s</li><li>假设单 page 大小 4K 的情况下，根据 H 以及 H = (2<em>R/S_P)</em>(K*(1 + r) - 1/2) 计算得到 r ~ 460，可以得到 C_0 = C_1/460 = 9.2G / 460 = 20Mb</li><li>20Mbyte C_0 的成本是 20MB * 100$/MB = 2000$，另外增加 2MB 用于 rolling merge 时使用，也就是 2000$ + 200$ = 2200$</li><li>总成本是 9200 + 2200 = 11400$</li></ul><p>大致计算之后 LSM-Tree 比 B-Tree 的成本会低很多（11400 VS 56400)，相当于 B-Tree 的 1/5 左右</p><p>2 如果 R 增加 10 倍，也就是 160000 byte/s，再计算 B-Tree，两层 LSM-Tree 以及三层 LSM-Tree 的成本</p><ul><li>R = 160000 byte（单 entry 16 byte，也就是 10000 entry/s）</li><li>576 million entries（总存储量 9.2GByte），每个 entry 的 ttl 是 20 days</li></ul><p>B-Tree 的情况下</p><ul><li>需要使用更多的磁盘来满足相应需求（主要是为了满足 I/O 的读写） 随机访问的总成本是 (2 <em> (160000 / 16)) </em> 25$ = 500,000$（相当于 500G 的存储，实际只需要 9.2G，也就是有 491G 的存储浪费）</li><li>buffer 非叶子节点的成本不变，也就是 6400$</li><li>总成本 = 500,000$ + 6400$ = 506400$</li></ul><p>两层 LSM-Tree 的情况</p><ul><li>首先通过 t 的公式计算得到 t = 2<em>((R/S_p)/S_1)</em>(COST_\pi/COST_d)*(COST_m/COST_d) ~ 2.2 &gt; 1</li><li>通过公式得到最低成本 = 2[(COST_m<em>S_1) </em> (2<em>COST_\pi</em>R/S_p)]^{1/2} ~ 27129$，其中一半用于磁盘，一半用于内存开销，磁盘的总存储空间是 13.5G（27129/2/1 Mb），135M 的内存</li><li>额外增加 2M 的内存用于 merge，200$ </li><li>总成本 ~ 27329$</li></ul><p>对于三层 LSM-Tree 的情况</p><ul><li>C_2 需要 9.2G 存储，总成本 9.2<em>1000</em>1$/Mb =9200$, 能提供的 I/O 访问频率 H  = 9.2 * 1000 / 2.5 ~ 3700</li><li>根据 H  = (2R/S_p)*(K ( 1 + r) - 1/2) 计算得到 r ~ 23</li><li>C_0 = C_2 / r / r ~ 17MB，成本为 17 * 100$/Mb = 1700$</li><li>C_1 的成本是 C_2 的 1/r =  1/23 也就是 9200/23 * 1$/Mb = 400$ （由于是最大层成本的 1/23，因此在估算时也可以忽略）</li><li>另外增加 4MB 用于 rolling merge，也就是 400$</li><li>总成本 ~ 9200$ +  1700$ + 400$ + 400$ = 11700$</li></ul><p>对比可知 三层 LSM 的成本（11700$） &lt; 两层 LSM 的成本（27329$） &lt; B-Tree 的成本（506400$）</p><h2 id="4-未来可能的优化"><a href="#4-未来可能的优化" class="headerlink" title="4 未来可能的优化"></a>4 未来可能的优化</h2><ul><li>为了更好的平衡插入和查询性能，留取部分 I/O 供查询使用；另外在 rolling merge 的时候，可以适当保留部分上层数据（并不完全迁移）</li><li>插入/合并的时候，CPU 做隔离，使用单独的 CPU 做合并，以及 LSM-Tree 结构的维护，这样可以在基本不增加延迟的情况下完成查找。</li></ul><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p>[1] <a href="https://www.cs.umb.edu/~poneil/lsmtree.pdf">The Log-Structured Merge-Tree (LSM-Tree)</a><br>[2] <a href="https://www.hpl.hp.com/techreports/tandem/TR-86.1.pdf">The Five Minute Rule</a><br>[3] <a href="">Database Buffer and Disk Configuring and the Battle of the Bottlenecks</a><br>[4] <a href="">GPD Performance Evaluation Lab Database 2 Version 2 Utility Analysis, IBM Document Number GG09-1031-0, September 28, 1989</a>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> lsm </tag>
            
            <tag> lsm-tree </tag>
            
            <tag> minimum-global-awareness </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
